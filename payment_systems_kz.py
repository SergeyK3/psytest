#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞ - –∑–∞–≥–ª—É—à–∫–∏ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
"""

from abc import ABC, abstractmethod
from datetime import datetime
from typing import Dict, Optional
import uuid

class PaymentProvider(ABC):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –ø–ª–∞—Ç–µ–∂–µ–π"""
    
    @abstractmethod
    def create_payment(self, amount: float, description: str, order_id: str) -> Dict:
        pass
    
    @abstractmethod
    def check_payment_status(self, payment_id: str) -> Dict:
        pass

class PaymentStub(PaymentProvider):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π"""
    
    def __init__(self):
        self.payments = {}
    
    def create_payment(self, amount: float, description: str, order_id: str) -> Dict:
        payment_id = str(uuid.uuid4())[:8]
        
        payment_data = {
            'payment_id': payment_id,
            'amount': amount,
            'currency': 'KZT',
            'description': description,
            'order_id': order_id,
            'status': 'pending',
            'payment_url': f"https://test-payment.kz/pay/{payment_id}",
            'created_at': datetime.now().isoformat()
        }
        
        self.payments[payment_id] = payment_data
        return payment_data
    
    def check_payment_status(self, payment_id: str) -> Dict:
        if payment_id in self.payments:
            # –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —É—Å–ø–µ—Ö –æ–ø–ª–∞—Ç—ã
            import random
            if random.choice([True, False]):
                self.payments[payment_id]['status'] = 'paid'
                self.payments[payment_id]['paid_at'] = datetime.now().isoformat()
            
            return self.payments[payment_id]
        
        return {'error': 'Payment not found'}
    
    def simulate_payment_success(self, payment_id: str):
        """–†—É—á–Ω–∞—è –∏–º–∏—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã"""
        if payment_id in self.payments:
            self.payments[payment_id]['status'] = 'paid'
            self.payments[payment_id]['paid_at'] = datetime.now().isoformat()

class KaspiPayStub(PaymentProvider):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è Kaspi Pay (–ø–æ–ø—É–ª—è—Ä–Ω–æ –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ)"""
    
    def create_payment(self, amount: float, description: str, order_id: str) -> Dict:
        return {
            'payment_id': f"kaspi_{uuid.uuid4().hex[:8]}",
            'amount': amount,
            'currency': 'KZT', 
            'qr_code': f"kaspi://pay?amount={amount}&merchant=test",
            'payment_url': f"https://kaspi.kz/pay?id={order_id}",
            'status': 'pending'
        }
    
    def check_payment_status(self, payment_id: str) -> Dict:
        return {'status': 'paid', 'method': 'kaspi_pay'}

class BankCenterCreditStub(PaymentProvider):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ë–∞–Ω–∫–¶–µ–Ω—Ç—Ä–ö—Ä–µ–¥–∏—Ç"""
    
    def __init__(self, merchant_id: str = "test_merchant"):
        self.merchant_id = merchant_id
        self.secret_key = "test_secret_key"
    
    def create_payment(self, amount: float, description: str, order_id: str) -> Dict:
        """–°–æ–∑–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ –≤ —Å—Ç–∏–ª–µ –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–æ–≥–æ –±–∞–Ω–∫–∞"""
        payment_data = {
            'payment_id': f"bcc_{uuid.uuid4().hex[:12]}",
            'merchant_id': self.merchant_id,
            'amount': int(amount * 100),  # –≤ —Ç–∏—ã–Ω–∞—Ö
            'currency': 'KZT',
            'description': description,
            'order_id': order_id,
            'payment_url': f"https://ecommerce.bcc.kz/payment?id={order_id}",
            'status': 'created',
            'methods': ['card', 'kaspi', 'qr_code'],
            'created_at': datetime.now().isoformat()
        }
        
        return payment_data
    
    def check_payment_status(self, payment_id: str) -> Dict:
        return {
            'payment_id': payment_id,
            'status': 'success',  # success, pending, failed
            'amount': 5000,
            'currency': 'KZT',
            'payment_method': 'card',
            'transaction_id': f"txn_{uuid.uuid4().hex[:8]}"
        }

# === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–õ–ê–¢–ï–ñ–ê–ú–ò –í –ë–û–¢–ï ===

class BotPaymentManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –±–æ—Ç–∞"""
    
    def __init__(self, provider: PaymentProvider):
        self.provider = provider
        self.pending_payments = {}
    
    def create_test_package_payment(self, package_type: str, company_name: str, contact_info: str) -> Dict:
        """–°–æ–∑–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ –∑–∞ –ø–∞–∫–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–π"""
        
        packages = {
            'basic': {'tests': 10, 'price': 15000, 'name': '–ë–∞–∑–æ–≤—ã–π'},
            'standard': {'tests': 50, 'price': 60000, 'name': '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π'}, 
            'premium': {'tests': 100, 'price': 100000, 'name': '–ü—Ä–µ–º–∏—É–º'}
        }
        
        if package_type not in packages:
            return {'error': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–∞–∫–µ—Ç–∞'}
        
        package = packages[package_type]
        order_id = f"order_{uuid.uuid4().hex[:8]}"
        
        description = f"–ü–∞–∫–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–π '{package['name']}' –¥–ª—è {company_name}"
        
        payment = self.provider.create_payment(
            amount=package['price'],
            description=description,
            order_id=order_id
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        self.pending_payments[order_id] = {
            'company_name': company_name,
            'contact_info': contact_info,
            'package_type': package_type,
            'tests_count': package['tests'],
            'payment_data': payment
        }
        
        return {
            'order_id': order_id,
            'payment_url': payment['payment_url'],
            'amount': package['price'],
            'currency': 'KZT',
            'tests_count': package['tests']
        }
    
    def check_and_activate_package(self, order_id: str) -> Optional[Dict]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–ø–ª–∞—Ç—É –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–∞–∫–µ—Ç"""
        if order_id not in self.pending_payments:
            return None
        
        order_data = self.pending_payments[order_id]
        payment_id = order_data['payment_data']['payment_id']
        
        status = self.provider.check_payment_status(payment_id)
        
        if status.get('status') in ['paid', 'success']:
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–π
            from password_management import SimplePasswordManager
            
            pm = SimplePasswordManager()
            password = pm.generate_company_password(
                order_data['company_name'], 
                order_data['tests_count']
            )
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö
            del self.pending_payments[order_id]
            
            return {
                'activated': True,
                'company_name': order_data['company_name'],
                'password': password,
                'tests_count': order_data['tests_count'],
                'payment_info': status
            }
        
        return {'activated': False, 'status': status.get('status', 'pending')}

# === –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –ë–û–¢–û–ú ===

async def handle_payment_flow(bot, message, payment_manager: BotPaymentManager):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ç–æ–∫–∞ –æ–ø–ª–∞—Ç—ã –≤ –±–æ—Ç–µ"""
    
    # 1. –í—ã–±–æ—Ä –ø–∞–∫–µ—Ç–∞
    keyboard = [
        ["üí∞ –ë–∞–∑–æ–≤—ã–π - 10 —Ç–µ—Å—Ç–æ–≤ (15,000 ‚Ç∏)"],
        ["üíé –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π - 50 —Ç–µ—Å—Ç–æ–≤ (60,000 ‚Ç∏)"],
        ["üèÜ –ü—Ä–µ–º–∏—É–º - 100 —Ç–µ—Å—Ç–æ–≤ (100,000 ‚Ç∏)"]
    ]
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–π:", reply_markup=keyboard)
    
    # 2. –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ (–ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–∞–∫–µ—Ç–∞)
    payment_info = payment_manager.create_test_package_payment(
        package_type='standard',
        company_name='–¢–û–û –¢–µ—Å—Ç',
        contact_info='+7 123 456 7890'
    )
    
    # 3. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É
    await message.reply(
        f"üí≥ –û–ø–ª–∞—Ç–∞ –ø–∞–∫–µ—Ç–∞ '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π'\n\n"
        f"üí∞ –°—É–º–º–∞: {payment_info['amount']:,} ‚Ç∏\n"
        f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤: {payment_info['tests_count']}\n\n"
        f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {payment_info['payment_url']}\n\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ /check_payment_{payment_info['order_id']}"
    )

# === –í–û–ü–†–û–°–´ –î–õ–Ø –ë–ê–ù–ö–ê ===

BANK_QUESTIONS = """
üè¶ –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –ë–∞–Ω–∫–¶–µ–Ω—Ç—Ä–ö—Ä–µ–¥–∏—Ç:

1. üí≥ –ü–õ–ê–¢–ï–ñ–ù–´–ï –ú–ï–¢–û–î–´:
   - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç–µ –ª–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—ç–∫–≤–∞–π—Ä–∏–Ω–≥?
   - Kaspi Pay –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –µ—Å—Ç—å?
   - QR-–∫–æ–¥ –ø–ª–∞—Ç–µ–∂–∏ –¥–æ—Å—Ç—É–ø–Ω—ã?
   - –ö–æ–º–∏—Å—Å–∏—è –∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏?

2. üîå –¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø:
   - REST API –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π?
   - –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ä–µ–¥–∞ (sandbox)?
   - –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤?
   - Webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è?

3. üìã –î–û–ö–£–ú–ï–ù–¢–´ –ò –ü–†–û–¶–ï–°–°:
   - –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å–∞?
   - –°—Ä–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —ç–∫–≤–∞–π—Ä–∏–Ω–≥–∞?
   - –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –æ–±–æ—Ä–æ—Ç—ã?
   - –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏?

4. üí∞ –¢–ê–†–ò–§–´:
   - –ê–±–æ–Ω–µ–Ω—Ç—Å–∫–∞—è –ø–ª–∞—Ç–∞?
   - –ü—Ä–æ—Ü–µ–Ω—Ç —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏?
   - –õ–∏–º–∏—Ç—ã –Ω–∞ —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞?
   - –í—Ä–µ–º—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤?
"""

if __name__ == "__main__":
    print("=== –î–ï–ú–û –ü–õ–ê–¢–ï–ñ–ù–û–ô –°–ò–°–¢–ï–ú–´ ===")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥–ª—É—à–∫—É
    payment_stub = PaymentStub()
    bot_payment = BotPaymentManager(payment_stub)
    
    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
    payment_info = bot_payment.create_test_package_payment(
        'standard', 
        '–¢–û–û –¢–µ—Å—Ç –ö–æ–º–ø–∞–Ω–∏—è',
        '+7 123 456 7890'
    )
    
    print(f"–°–æ–∑–¥–∞–Ω –ø–ª–∞—Ç–µ–∂: {payment_info}")
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É
    order_id = payment_info['order_id']
    payment_stub.simulate_payment_success(
        bot_payment.pending_payments[order_id]['payment_data']['payment_id']
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º
    result = bot_payment.check_and_activate_package(order_id)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {result}")
    
    print("\n" + BANK_QUESTIONS)