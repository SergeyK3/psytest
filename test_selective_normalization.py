#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç —Å–µ–ª–µ–∫—Ç–∏–≤–Ω–æ–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏: PAEI/DISC —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π, HEXACO/SOFT_SKILLS –±–µ–∑
"""

from scale_normalizer import ScaleNormalizer

def test_selective_normalization():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ–ª–µ–∫—Ç–∏–≤–Ω—É—é –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é"""
    print("üîÑ –¢–µ—Å—Ç —Å–µ–ª–µ–∫—Ç–∏–≤–Ω–æ–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = {
        "PAEI": {"P": 1, "A": 5, "E": 2, "I": 0},          # –î–æ–ª–∂–Ω—ã –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å—Å—è 0-10
        "DISC": {"D": 6, "I": 1, "S": 2, "C": 0},          # –î–æ–ª–∂–Ω—ã –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å—Å—è 0-10
        "HEXACO": {"H": 2.3, "E": 4.7, "X": 1.9, "A": 3.6, "C": 2.1, "O": 4.4},  # –û—Å—Ç–∞—é—Ç—Å—è 1-5
        "SOFT_SKILLS": {"–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è": 7.8, "–õ–∏–¥–µ—Ä—Å—Ç–≤–æ": 6.3, "–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å": 8.9, "–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å": 5.4}  # –û—Å—Ç–∞—é—Ç—Å—è 1-10
    }
    
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
    print()
    
    for test_type, scores in test_data.items():
        print(f"üîç {test_type}:")
        print(f"   –ò—Å—Ö–æ–¥–Ω—ã–µ:      {scores}")
        
        normalized, method = ScaleNormalizer.auto_normalize(test_type, scores)
        print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ:  {normalized}")
        print(f"   –ú–µ—Ç–æ–¥:         {method}")
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if test_type in ["PAEI", "DISC"]:
            max_val = max(normalized.values())
            if max_val <= 10:
                print(f"   ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ (–º–∞–∫—Å: {max_val})")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ (–º–∞–∫—Å: {max_val})")
        else:
            # HEXACO –¥–æ–ª–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 1-5, SOFT_SKILLS –≤ 1-10
            original_range = scores
            if test_type == "HEXACO":
                expected_min, expected_max = 1, 5
            else:  # SOFT_SKILLS
                expected_min, expected_max = 1, 10
                
            actual_min = min(normalized.values())
            actual_max = max(normalized.values())
            
            if expected_min <= actual_min and actual_max <= expected_max:
                print(f"   ‚úÖ –û—Å—Ç–∞–ª—Å—è –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ ({actual_min:.1f}-{actual_max:.1f})")
            else:
                print(f"   ‚ùå –í—ã—à–µ–ª –∑–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω ({actual_min:.1f}-{actual_max:.1f})")
        
        print()

def test_visualization_impact():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é"""
    print("üìà –í–ª–∏—è–Ω–∏–µ –Ω–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –¥–∏–∞–≥—Ä–∞–º–º:")
    print("=" * 60)
    
    # –ü—Ä–æ–±–ª–µ–º–Ω—ã–π —Å–ª—É—á–∞–π - –≤—ã—Å–æ–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è PAEI/DISC
    problem_case = {
        "PAEI": {"P": 0, "A": 5, "E": 0, "I": 0},          # A –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ
        "DISC": {"D": 6, "I": 0, "S": 0, "C": 0},          # D –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ
        "HEXACO": {"H": 3.0, "E": 3.0, "X": 3.0, "A": 3.0, "C": 3.0, "O": 3.0},  # –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        "SOFT_SKILLS": {"–ù–∞–≤—ã–∫1": 5.0, "–ù–∞–≤—ã–∫2": 5.0, "–ù–∞–≤—ã–∫3": 5.0, "–ù–∞–≤—ã–∫4": 5.0}  # –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    }
    
    print("üéØ –ü—Ä–æ–±–ª–µ–º–Ω—ã–π —Å–ª—É—á–∞–π (–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ PAEI/DISC, —Å—Ä–µ–¥–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ):")
    print()
    
    for test_type, scores in problem_case.items():
        normalized, method = ScaleNormalizer.auto_normalize(test_type, scores)
        max_val = max(normalized.values())
        
        print(f"{test_type}:")
        print(f"  –î–æ:     {scores} (–º–∞–∫—Å: {max(scores.values()):.1f})")
        print(f"  –ü–æ—Å–ª–µ:  {normalized} (–º–∞–∫—Å: {max_val:.1f})")
        
        if test_type in ["PAEI", "DISC"]:
            print(f"  üìä –î–∏–∞–≥—Ä–∞–º–º–∞: –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç–∏–≥–∞—é—Ç –∫—Ä–∞—è (10.0)")
        else:
            print(f"  üìä –î–∏–∞–≥—Ä–∞–º–º–∞: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è")
        print()

if __name__ == "__main__":
    test_selective_normalization()
    print()
    test_visualization_impact()
    
    print("üéâ –°–µ–ª–µ–∫—Ç–∏–≤–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!")
    print("‚úÖ PAEI/DISC: –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫ 0-10 –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø—Ä–æ–ø–æ—Ä—Ü–∏–π")
    print("‚úÖ HEXACO: –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —à–∫–∞–ª–∞ 1-5 –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏") 
    print("‚úÖ SOFT_SKILLS: –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —à–∫–∞–ª–∞ 1-10 –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏")