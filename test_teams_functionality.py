#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∫–æ–º–∞–Ω–¥–µ
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, os.path.join(os.path.dirname(os.path.abspath(__file__)), 'src'))

from enhanced_pdf_report_v2 import EnhancedPDFReportV2
from src.psytest.ai_interpreter import AIInterpreter

def test_team_recommendations():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∫–æ–º–∞–Ω–¥–µ"""
    
    print("üß™ –¢–ï–°–¢ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô –ü–û –ö–û–ú–ê–ù–î–ï")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_scores = {
        'paei': [3, 4, 2, 1],  # P=3, A=4, E=2, I=1 - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        'disc': [2, 3, 1, 4],  # D=2, I=3, S=1, C=4 - Compliance
        'hexaco': [4, 3, 2, 5, 3, 4],  # –í—ã—Å–æ–∫–∞—è –ß–µ—Å—Ç–Ω–æ—Å—Ç—å
        'soft_skills': [3, 4, 3, 4, 2, 3, 4, 2]  # –°–º–µ—à–∞–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏
    }
    
    user_data = {
        'name': 'TEST_TEAMS',
        'age': 30,
        'position': '–ú–µ–Ω–µ–¥–∂–µ—Ä',
        'scores': test_scores
    }
    
    # 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...")
    
    try:
        ai_interpreter = AIInterpreter()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—â–µ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ
        general_interpretation = ai_interpreter.interpret_general_conclusion(test_scores)
        
        if general_interpretation:
            print("‚úÖ AI —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            print(f"   üìù –î–ª–∏–Ω–∞: {len(general_interpretation)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            keywords = ['–∫–æ–º–∞–Ω–¥', '–ø–æ–¥–±–æ—Ä', '—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç', '–∫–æ–º–ø–µ–Ω—Å', '–¥–æ–ø–æ–ª–Ω', '–±–∞–ª–∞–Ω—Å']
            found_keywords = [kw for kw in keywords if kw.lower() in general_interpretation.lower()]
            
            print(f"   üîç –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {found_keywords}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—Ä—ã–≤–æ–∫
            print(f"   üìÑ –ù–∞—á–∞–ª–æ —Ç–µ–∫—Å—Ç–∞:")
            print(f"      {general_interpretation[:200]}...")
            
        else:
            print("‚ùå AI –Ω–µ —Å–º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ AI: {e}")
        return False
    
    # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º PDF –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    print(f"\nüìÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º PDF –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...")
    
    try:
        pdf_generator = EnhancedPDFReportV2()
        
        # –°–æ–∑–¥–∞–µ–º PDF —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        pdf_path = pdf_generator.generate_report(user_data, "team_test")
        
        if pdf_path and os.path.exists(pdf_path):
            print(f"‚úÖ PDF —Å–æ–∑–¥–∞–Ω: {pdf_path}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = os.path.getsize(pdf_path)
            print(f"   üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
            
            return True
        else:
            print("‚ùå PDF –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ PDF: {e}")
        return False

if __name__ == "__main__":
    success = test_team_recommendations()
    
    if success:
        print(f"\nüéä –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∫–æ–º–∞–Ω–¥–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print(f"   üí° –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞")
    else:
        print(f"\n‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù: –¢—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–ª–∞–¥–∫–∞")