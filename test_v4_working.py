#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–ï–°–¢ –†–ê–ë–û–ß–ï–ô –í–ï–†–°–ò–ò enhanced_pdf_report_v2.py –∏–∑ –∫–æ–º–º–∏—Ç–∞ v4.0.0
"""

from pathlib import Path
from datetime import datetime
from enhanced_pdf_report_v2 import EnhancedPDFReportV2

def test_v4_working_version():
    """
    –¢–µ—Å—Ç —Ä–∞–±–æ—á–µ–π –≤–µ—Ä—Å–∏–∏ enhanced_pdf_report_v2.py –∏–∑ v4.0.0
    """
    print("üöÄ –¢–ï–°–¢ –†–ê–ë–û–ß–ï–ô –í–ï–†–°–ò–ò V4.0.0")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
    generator = EnhancedPDFReportV2()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    participant_name = "–†–∞–±–æ—á–∏–π –¢–µ—Å—Ç V4.0"
    test_date = datetime.now().strftime("%Y-%m-%d")
    
    paei_scores = {"P": 8, "A": 6, "E": 9, "I": 7}
    disc_scores = {"D": 7, "I": 8, "S": 5, "C": 6}
    hexaco_scores = {"H": 4, "E": 3, "X": 5, "A": 4, "C": 5, "O": 4}
    
    soft_skills_scores = {
        "–õ–∏–¥–µ—Ä—Å—Ç–≤–æ": 8, "–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è": 9, "–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å": 7, "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞": 6,
        "–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å": 8, "–ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞": 9, "–≠–º–ø–∞—Ç–∏—è": 8, 
        "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ": 7, "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–µ–º": 6, "–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º": 8
    }
    
    # AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ (–ø—Ä–æ—Å—Ç—ã–µ –¥–ª—è v4.0)
    ai_interpretations = {
        "paei": "–ü—Ä–µ–æ–±–ª–∞–¥–∞—é—â–∏–π —Å—Ç–∏–ª—å –ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—è —Å –≤—ã—Å–æ–∫–∏–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è",
        "disc": "–î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —Ç–∏–ø —Å –≤—ã—Å–æ–∫–æ–π –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å—é –∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–µ–π –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
        "hexaco": "–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å —Å —É–º–µ—Ä–µ–Ω–Ω—ã–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏ –ø–æ –≤—Å–µ–º —Ñ–∞–∫—Ç–æ—Ä–∞–º"
    }
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    out_path = Path(f"test_v4_working_{timestamp}.pdf")
    
    print(f"üìÑ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞: {out_path}")
    print(f"üë§ –£—á–∞—Å—Ç–Ω–∏–∫: {participant_name}")
    print()
    
    try:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ (v4.0 –≤–µ—Ä—Å–∏—è)
        pdf_path = generator.generate_enhanced_report(
            participant_name=participant_name,
            test_date=test_date,
            paei_scores=paei_scores,
            disc_scores=disc_scores,
            hexaco_scores=hexaco_scores,
            soft_skills_scores=soft_skills_scores,
            ai_interpretations=ai_interpretations,
            out_path=out_path
        )
        
        print("‚úÖ –û–¢–ß–ï–¢ V4.0 –°–û–ó–î–ê–ù!")
        print(f"üìÑ –§–∞–π–ª: {pdf_path}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
        if pdf_path.exists():
            size = pdf_path.stat().st_size
            size_kb = size / 1024
            print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {size} –±–∞–π—Ç ({size_kb:.1f} KB)")
            
            if size > 100000:  # –ë–æ–ª—å—à–µ 100KB
                print("‚úÖ –û—Ç–ª–∏—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä - –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏!")
            elif size > 10000:  # –ë–æ–ª—å—à–µ 10KB
                print("‚úÖ –•–æ—Ä–æ—à–∏–π —Ä–∞–∑–º–µ—Ä - –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω")
            else:
                print("‚ö†Ô∏è –ú–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä - –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã")
        
        return pdf_path
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return None

if __name__ == "__main__":
    test_v4_working_version()