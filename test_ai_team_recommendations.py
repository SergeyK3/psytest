#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∫–æ–º–∞–Ω–¥–µ
"""

import os
import sys

from interpretation_utils import generate_interpretations_from_prompt

def test_team_recommendations():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∫–æ–º–∞–Ω–¥–µ —á–µ—Ä–µ–∑ AI"""
    
    print("üß™ –¢–ï–°–¢ AI –ì–ï–ù–ï–†–ê–¶–ò–ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô –ü–û –ö–û–ú–ê–ù–î–ï")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è —Å–æ —Å–ª–∞–±—ã–º–∏ –æ–±–ª–∞—Å—Ç—è–º–∏
    test_user_data = {
        'name': '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        'disc_results': {'D': 4.5, 'I': 3.0, 'S': 1.5, 'C': 3.5},  # –°–ª–∞–±—ã–π S
        'paei_results': {'P': 1, 'A': 2, 'E': 4, 'I': 3},  # –°–ª–∞–±—ã–µ P, A
        'hexaco_results': {
            'honesty_humility': 3.5,
            'emotionality': 2.0,  # –°–ª–∞–±–∞—è –æ–±–ª–∞—Å—Ç—å
            'extraversion': 1.8,  # –°–ª–∞–±–∞—è –æ–±–ª–∞—Å—Ç—å  
            'agreeableness': 4.2,
            'conscientiousness': 3.8,
            'openness': 4.0
        },
        'soft_skills_results': {
            'leadership': 5,
            'emotional_intelligence': 4, 
            'communication': 4,
            'critical_thinking': 2,  # –°–ª–∞–±–∞—è –æ–±–ª–∞—Å—Ç—å
            'time_management': 4,
            'conflict_resolution': 5,
            'adaptability': 3,
            'employee_development': 4,
            'teamwork': 3,
            'creativity': 2  # –°–ª–∞–±–∞—è –æ–±–ª–∞—Å—Ç—å
        }
    }
    
    print("üìä –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å (—Å–æ —Å–ª–∞–±—ã–º–∏ –æ–±–ª–∞—Å—Ç—è–º–∏):")
    print(f"DISC: {test_user_data['disc_results']}")
    print(f"PAEI: {test_user_data['paei_results']}")
    print(f"HEXACO emotionality: {test_user_data['hexaco_results']['emotionality']}")
    print(f"HEXACO extraversion: {test_user_data['hexaco_results']['extraversion']}")
    print(f"Soft Skills critical_thinking: {test_user_data['soft_skills_results']['critical_thinking']}")
    print(f"Soft Skills creativity: {test_user_data['soft_skills_results']['creativity']}")
    print()
    
    try:
        print("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ AI...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ (–≤–∫–ª—é—á–∞—è –Ω–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ)
        interpretations = generate_interpretations_from_prompt(
            test_user_data['paei_results'],
            test_user_data['disc_results'], 
            test_user_data['hexaco_results'],
            test_user_data['soft_skills_results']
        )
        
        print("‚úÖ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –æ–∂–∏–¥–∞–µ–º—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
        expected_sections = ['disc', 'paei', 'hexaco', 'soft_skills']
        
        for section in expected_sections:
            if section in interpretations:
                print(f"‚úÖ –†–∞–∑–¥–µ–ª '{section}' –Ω–∞–π–¥–µ–Ω")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∫–æ–º–∞–Ω–¥–µ
                content = interpretations[section].lower()
                team_keywords = [
                    '—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–¥–±–æ—Ä—É', '–∫–æ–º–∞–Ω–¥—É', '–∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤',
                    'disc-–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è', 'paei-–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ', 'hexaco-–±–∞–ª–∞–Ω—Å', 'soft skills-—Å–∏–Ω–µ—Ä–≥–∏—è',
                    '—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã', '–±–∞–ª–∞–Ω—Å –∫–æ–º–∞–Ω–¥—ã', '–∫–æ–º–ø–µ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å'
                ]
                
                found_team_content = any(keyword in content for keyword in team_keywords)
                
                if found_team_content:
                    print(f"   üéØ –ù–∞–π–¥–µ–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ –≤ —Ä–∞–∑–¥–µ–ª–µ '{section}'")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
                    lines = interpretations[section].split('\n')
                    for i, line in enumerate(lines):
                        if any(keyword in line.lower() for keyword in team_keywords[:6]):
                            print(f"   üìã –§—Ä–∞–≥–º–µ–Ω—Ç: {line.strip()}")
                            if i + 1 < len(lines):
                                print(f"              {lines[i+1].strip()}")
                            break
                else:
                    print(f"   ‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ä–∞–∑–¥–µ–ª–µ '{section}'")
            else:
                print(f"‚ùå –†–∞–∑–¥–µ–ª '{section}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        print()
        print("üîç –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–ê:")
        
        # –ò—â–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Å–ª–∞–±—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π
        all_content = " ".join(interpretations.values()).lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Å–ª–∞–±—ã—Ö DISC –æ–±–ª–∞—Å—Ç–µ–π
        if '—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç' in all_content or '–∫–æ–º–∞–Ω–¥' in all_content:
            print("‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ —Å–ª–∞–±–æ–≥–æ S (–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Å–ª–∞–±—ã—Ö PAEI —Ä–æ–ª–µ–π  
        if '–ø—Ä–æ–¥—é—Å–µ—Ä' in all_content or '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' in all_content:
            print("‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Å–∏–ª–µ–Ω–∏—é P/A —Ä–æ–ª–µ–π")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Å–ª–∞–±—ã—Ö Soft Skills
        if '–∫—Ä–∏—Ç–∏—á–µ—Å–∫' in all_content or '–∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç' in all_content:
            print("‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è/–∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Å–ª–∞–±—ã—Ö HEXACO –æ–±–ª–∞—Å—Ç–µ–π
        if '—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç' in all_content or '—ç–∫—Å—Ç—Ä–∞–≤–µ—Ä—Å–∏' in all_content:
            print("‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ HEXACO —Å–ª–∞–±–æ—Å—Ç–µ–π")
            
        print()
        print("üéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∫–æ–º–∞–Ω–¥–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        return False

if __name__ == "__main__":
    success = test_team_recommendations()
    if success:
        print("\nüéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
    else:
        print("\nüí• –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")