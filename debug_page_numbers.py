#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –≤–µ—Ä—Å–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å –û–ß–ï–ù–¨ –ó–ê–ú–ï–¢–ù–û–ô –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π
"""

from reportlab.lib.pagesizes import A4
from reportlab.lib.units import mm
from reportlab.pdfgen import canvas
from reportlab.lib.colors import Color, red, black
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, PageBreak
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
import os

class DebugNumberedCanvas(canvas.Canvas):
    """–û–¢–õ–ê–î–û–ß–ù–´–ô Canvas —Å –û–ß–ï–ù–¨ –ó–ê–ú–ï–¢–ù–û–ô –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π"""
    def __init__(self, *args, **kwargs):
        canvas.Canvas.__init__(self, *args, **kwargs)
        self._saved_page_states = []

    def showPage(self):
        self._saved_page_states.append(dict(self.__dict__))
        self._startPage()

    def save(self):
        """–î–æ–±–∞–≤–ª—è–µ–º –û–ß–ï–ù–¨ –ó–ê–ú–ï–¢–ù–´–ï –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü"""
        num_pages = len(self._saved_page_states)
        for (page_num, page_state) in enumerate(self._saved_page_states):
            self.__dict__.update(page_state)
            self.draw_debug_page_number(page_num + 1, num_pages)
            canvas.Canvas.showPage(self)
        canvas.Canvas.save(self)

    def draw_debug_page_number(self, page_num, total_pages):
        """–û–¢–õ–ê–î–û–ß–ù–ê–Ø –Ω—É–º–µ—Ä–∞—Ü–∏—è - –¥–µ–ª–∞–µ–º –µ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∑–∞–º–µ—Ç–Ω–æ–π"""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.saveState()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ö–†–ê–°–ù–´–ô —Ü–≤–µ—Ç –¥–ª—è –∑–∞–º–µ—Ç–Ω–æ—Å—Ç–∏
        self.setFillColor(red)
        self.setStrokeColor(red)
        
        # –ë–æ–ª—å—à–æ–π —à—Ä–∏—Ñ—Ç
        try:
            arial_path = "C:/Windows/Fonts/arialbd.ttf"  # –ñ–∏—Ä–Ω—ã–π Arial
            if os.path.exists(arial_path):
                pdfmetrics.registerFont(TTFont('Arial-Debug', arial_path))
                self.setFont("Arial-Debug", 14)  # –ë–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä
            else:
                self.setFont("Times-Bold", 14)
        except:
            self.setFont("Times-Bold", 14)
        
        text = f"–°—Ç—Ä. {page_num} –∏–∑ {total_pages}"
        
        # –†–∏—Å—É–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é –≤ –ù–ï–°–ö–û–õ–¨–ö–ò–• –º–µ—Å—Ç–∞—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        
        # 1. –ü—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª (–æ—Å–Ω–æ–≤–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è)
        self.drawRightString(A4[0] - 15*mm, A4[1] - 12*mm, text)
        
        # 2. –¶–µ–Ω—Ç—Ä –≤–µ—Ä—Ö–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
        self.drawCentredText(A4[0] / 2, A4[1] - 12*mm, f"–¶–ï–ù–¢–†: {text}")
        
        # 3. –õ–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
        self.drawString(15*mm, A4[1] - 12*mm, f"–õ–ï–í–û: {text}")
        
        # 4. –ü—Ä–∞–≤—ã–π –Ω–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è)
        self.drawRightString(A4[0] - 15*mm, 15*mm, f"–ù–ò–ó: {text}")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.restoreState()

def create_debug_pdf():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π PDF —Å –∑–∞–º–µ—Ç–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π"""
    
    filename = 'debug_page_numbers.pdf'
    
    # –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç —Å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–º canvas
    doc = SimpleDocTemplate(
        filename,
        pagesize=A4,
        leftMargin=25*mm,
        rightMargin=25*mm,
        topMargin=30*mm,  # –ë–æ–ª—å—à–µ –º–µ—Å—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–∏
        bottomMargin=25*mm,
        canvasmaker=DebugNumberedCanvas
    )
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª–∏
    styles = getSampleStyleSheet()
    
    title_style = ParagraphStyle(
        'DebugTitle',
        parent=styles['Heading1'],
        fontSize=18,
        spaceAfter=30,
        alignment=1,
        fontName='Times-Bold'
    )
    
    normal_style = ParagraphStyle(
        'DebugNormal',
        parent=styles['Normal'],
        fontSize=12,
        spaceAfter=8,
        fontName='Times-Roman'
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
    story = []
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    story.append(Paragraph("–û–¢–õ–ê–î–ö–ê –ù–£–ú–ï–†–ê–¶–ò–ò –°–¢–†–ê–ù–ò–¶", title_style))
    story.append(Spacer(1, 30))
    
    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    story.append(Paragraph("–ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ü–†–û–í–ï–†–ö–ï:", normal_style))
    story.append(Paragraph("1. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –ü–†–ê–í–´–ô –í–ï–†–•–ù–ò–ô —É–≥–æ–ª - –æ—Å–Ω–æ–≤–Ω–∞—è –Ω—É–º–µ—Ä–∞—Ü–∏—è", normal_style))
    story.append(Paragraph("2. –°–≤–µ—Ä—Ö—É –ø–æ —Ü–µ–Ω—Ç—Ä—É - –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –Ω—É–º–µ—Ä–∞—Ü–∏—è", normal_style))  
    story.append(Paragraph("3. –°–ª–µ–≤–∞ —Å–≤–µ—Ä—Ö—É - –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è –Ω—É–º–µ—Ä–∞—Ü–∏—è", normal_style))
    story.append(Paragraph("4. –°–ø—Ä–∞–≤–∞ —Å–Ω–∏–∑—É - –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è", normal_style))
    story.append(Paragraph("5. –í–°–ï –ù–û–ú–ï–†–ê –î–û–õ–ñ–ù–´ –ë–´–¢–¨ –ö–†–ê–°–ù–û–ì–û –¶–í–ï–¢–ê!", normal_style))
    story.append(Spacer(1, 30))
    
    # –ù–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    for page in range(1, 4):
        story.append(Paragraph(f"–°–¢–†–ê–ù–ò–¶–ê {page}", title_style))
        story.append(Spacer(1, 20))
        
        for i in range(10):
            story.append(Paragraph(
                f"–¢–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ {i+1} –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}. "
                f"–≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –Ω—É–∂–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω—É–º–µ—Ä–∞—Ü–∏–∏. "
                f"–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–≤–µ—Ä—Ö –∏ –≤–Ω–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã - –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∏–¥–Ω–∞ –ö–†–ê–°–ù–ê–Ø –Ω—É–º–µ—Ä–∞—Ü–∏—è.",
                normal_style
            ))
            story.append(Spacer(1, 8))
        
        if page < 3:  # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑—Ä—ã–≤ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            story.append(PageBreak())
    
    # –°—Ç—Ä–æ–∏–º –¥–æ–∫—É–º–µ–Ω—Ç
    print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ PDF...")
    doc.build(story)
    
    return filename

if __name__ == "__main__":
    try:
        result = create_debug_pdf()
        print(f"‚úÖ –û—Ç–ª–∞–¥–æ—á–Ω—ã–π PDF —Å–æ–∑–¥–∞–Ω: {result}")
        print("üîç –ü–†–û–í–ï–†–¨–¢–ï –ö–†–ê–°–ù–£–Æ –ù–£–ú–ï–†–ê–¶–ò–Æ –≤ —Ä–∞–∑–Ω—ã—Ö —É–≥–ª–∞—Ö —Å—Ç—Ä–∞–Ω–∏—Ü!")
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π –¥–ª—è PDF
        import subprocess
        try:
            # –î–ª—è Windows - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–∞–Ω–¥—É –æ—Ç–∫—Ä—ã—Ç–∏—è PDF
            subprocess.run(['cmd', '/c', 'start', '', result], shell=False)
            print(f"üìñ –û—Ç–∫—Ä—ã–≤–∞–µ–º PDF: {result}")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å PDF –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: {e}")
            print(f"üìÅ –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –≤—Ä—É—á–Ω—É—é: {result}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()