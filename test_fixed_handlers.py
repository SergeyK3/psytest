#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–∞
"""

# –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–æ—Ç–∞
class MockSession:
    def __init__(self):
        self.soft_skills_scores = []
        self.hexaco_scores = []
        self.current_question = 0

class MockUpdate:
    def __init__(self, text):
        self.message = MockMessage(text)
        self.effective_user = MockUser()

class MockMessage:
    def __init__(self, text):
        self.text = text
    
    async def reply_text(self, text):
        print(f"ü§ñ Bot reply: {text}")

class MockUser:
    def __init__(self):
        self.id = 12345

# –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
SOFT_SKILLS_TESTING = 5
HEXACO_TESTING = 6

# –ò–º–∏—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
async def ask_soft_skills_question(update, context):
    print("üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É Soft Skills")
    return SOFT_SKILLS_TESTING

async def ask_hexaco_question(update, context):
    print("üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É HEXACO")
    return HEXACO_TESTING

async def cancel(update, context):
    print("üö™ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –≤—ã—Ö–æ–¥–∞")
    return -1

# –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_sessions = {12345: MockSession()}

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
async def handle_soft_skills_answer_fixed(update, context):
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ Soft Skills"""
    user_id = update.effective_user.id
    session = user_sessions[user_id]
    answer_text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤—ã—Ö–æ–¥
    if answer_text == "‚ùå –í—ã–π—Ç–∏":
        return await cancel(update, context)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤–æ–π –æ—Ç–≤–µ—Ç (1-5)
    try:
        score = None
        for i in range(1, 6):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–∏—Ñ—Ä—ã 1-5
            if answer_text.startswith(str(i)):
                score = i
                break
                
        if score is not None:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ —Å–ø–∏—Å–æ–∫
            session.soft_skills_scores.append(score)
            session.current_question += 1
            return await ask_soft_skills_question(update, context)
        else:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞")
            
    except (ValueError, IndexError):
        await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (1-5)")
        return SOFT_SKILLS_TESTING

async def handle_hexaco_answer_fixed(update, context):
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ HEXACO"""
    user_id = update.effective_user.id
    session = user_sessions[user_id]
    answer_text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤—ã—Ö–æ–¥
    if answer_text == "‚ùå –í—ã–π—Ç–∏":
        return await cancel(update, context)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤–æ–π –æ—Ç–≤–µ—Ç (1-5)
    try:
        score = None
        for i in range(1, 6):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–∏—Ñ—Ä—ã 1-5
            if answer_text.startswith(str(i)):
                score = i
                break
                
        if score is not None:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ —Å–ø–∏—Å–æ–∫
            session.hexaco_scores.append(score)
            session.current_question += 1
            return await ask_hexaco_question(update, context)
        else:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞")
            
    except (ValueError, IndexError):
        await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (1-5)")
        return HEXACO_TESTING

async def test_fixed_handlers():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤...")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã
    test_answers = [
        "1. –ü–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω",
        "3. –û–±—ã—á–Ω–æ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞—é –∫—Ä–∏—Ç–∏–∫—É —Å–ø–æ–∫–æ–π–Ω–æ", 
        "5. –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–µ–Ω",
        "‚ùå –í—ã–π—Ç–∏"
    ]
    
    print("üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º Soft Skills –æ–±—Ä–∞–±–æ—Ç—á–∏–∫:")
    for answer in test_answers:
        print(f"\nüìù –û—Ç–≤–µ—Ç: '{answer}'")
        session = user_sessions[12345]
        session.soft_skills_scores = []  # –°–±—Ä–æ—Å
        
        update = MockUpdate(answer)
        result = await handle_soft_skills_answer_fixed(update, None)
        
        if answer != "‚ùå –í—ã–π—Ç–∏":
            print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –±–∞–ª–ª—ã: {session.soft_skills_scores}")
        print(f"üîÑ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏: {result}")
    
    print("\n" + "=" * 60)
    print("üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º HEXACO –æ–±—Ä–∞–±–æ—Ç—á–∏–∫:")
    for answer in test_answers[:3]:  # –ë–µ–∑ –∫–æ–º–∞–Ω–¥—ã –≤—ã—Ö–æ–¥–∞ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
        print(f"\nüìù –û—Ç–≤–µ—Ç: '{answer}'")
        session = user_sessions[12345]
        session.hexaco_scores = []  # –°–±—Ä–æ—Å
        
        update = MockUpdate(answer)
        result = await handle_hexaco_answer_fixed(update, None)
        
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –±–∞–ª–ª—ã: {session.hexaco_scores}")
        print(f"üîÑ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏: {result}")
    
    print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    import asyncio
    asyncio.run(test_fixed_handlers())