#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É docs/reports/
"""
import shutil
from datetime import datetime
from pathlib import Path
from typing import Optional, Dict, Any
import re

class ReportArchiver:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤"""
    
    def __init__(self, base_dir: Path = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Ä—Ö–∏–≤–∞—Ç–æ—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤
        
        Args:
            base_dir: –ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∞—è)
        """
        if base_dir is None:
            base_dir = Path(__file__).parent.parent
        
        self.base_dir = Path(base_dir)
        self.reports_dir = self.base_dir / "docs" / "reports"
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        self.reports_dir.mkdir(parents=True, exist_ok=True)
    
    def save_report(self, source_path: Path, test_type: str, 
                   user_name: str = "User", additional_info: Dict[str, Any] = None) -> Path:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –≤ –∞—Ä—Ö–∏–≤–Ω—É—é –ø–∞–ø–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º –∏–º–µ–Ω–µ–º
        
        Args:
            source_path: –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É –æ—Ç—á–µ—Ç–∞
            test_type: –¢–∏–ø —Ç–µ—Å—Ç–∞ (DISC, PAEI, HEXACO, etc.)
            user_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ)
            additional_info: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            
        Returns:
            –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        if not source_path.exists():
            raise FileNotFoundError(f"–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {source_path}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
        timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        
        # –û—á–∏—â–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        safe_user_name = re.sub(r'[^\w\-_.]', '_', user_name)[:20]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        filename_parts = [timestamp, test_type.upper(), safe_user_name]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
        if additional_info:
            for key, value in additional_info.items():
                safe_value = re.sub(r'[^\w\-_.]', '_', str(value))[:10]
                filename_parts.append(f"{key}_{safe_value}")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        filename = "_".join(filename_parts) + source_path.suffix
        destination = self.reports_dir / filename
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
        shutil.copy2(source_path, destination)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        print(f"üìÅ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {destination.name}")
        
        return destination
    
    def save_telegram_report(self, source_path: Path, user_id: int, 
                           test_type: str, user_name: str = None) -> Path:
        """
        –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ –∏–∑ Telegram –±–æ—Ç–∞
        
        Args:
            source_path: –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
            test_type: –¢–∏–ø —Ç–µ—Å—Ç–∞
            user_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
            
        Returns:
            –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        # –ê–Ω–æ–Ω–∏–º–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_name:
            display_name = user_name.split()[0] if user_name.split() else "User"
        else:
            display_name = f"TgUser{str(user_id)[-4:]}"  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã ID
        
        additional_info = {
            "tg": str(user_id)[-4:],  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            "v": "balanced"  # –í–µ—Ä—Å–∏—è —Å —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∏–∞–≥—Ä–∞–º–º–∞–º–∏
        }
        
        return self.save_report(source_path, test_type, display_name, additional_info)
    
    def get_report_stats(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        reports = list(self.reports_dir.glob("*.pdf"))
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ —Ç–∏–ø–∞–º —Ç–µ—Å—Ç–æ–≤
        test_types = {}
        dates = []
        
        for report in reports:
            # –ü–∞—Ä—Å–∏–º –∏–º—è —Ñ–∞–π–ª–∞: YYYY-MM-DD_HH-MM-SS_TYPE_User...
            parts = report.stem.split("_")
            if len(parts) >= 3:
                test_type = parts[2]
                test_types[test_type] = test_types.get(test_type, 0) + 1
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É
                if len(parts) >= 2:
                    try:
                        date_str = f"{parts[0]}_{parts[1]}"
                        date = datetime.strptime(date_str, "%Y-%m-%d_%H-%M-%S")
                        dates.append(date)
                    except ValueError:
                        pass
        
        stats = {
            "total_reports": len(reports),
            "test_types": test_types,
            "date_range": {
                "first": min(dates).strftime("%Y-%m-%d %H:%M") if dates else None,
                "last": max(dates).strftime("%Y-%m-%d %H:%M") if dates else None
            },
            "reports_today": len([d for d in dates if d.date() == datetime.now().date()]),
            "storage_path": str(self.reports_dir)
        }
        
        return stats
    
    def cleanup_old_reports(self, days_to_keep: int = 30) -> int:
        """
        –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –æ—Ç—á–µ—Ç—ã
        
        Args:
            days_to_keep: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        """
        cutoff_date = datetime.now().timestamp() - (days_to_keep * 24 * 60 * 60)
        reports = list(self.reports_dir.glob("*.pdf"))
        deleted_count = 0
        
        for report in reports:
            if report.stat().st_mtime < cutoff_date:
                report.unlink()
                deleted_count += 1
                print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –æ—Ç—á–µ—Ç: {report.name}")
        
        return deleted_count

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
report_archiver = ReportArchiver()

def save_report_copy(source_path: Path, test_type: str, user_info: Dict[str, Any]) -> Optional[Path]:
    """
    –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–ø–∏–∏ –æ—Ç—á–µ—Ç–∞
    
    Args:
        source_path: –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –æ—Ç—á–µ—Ç—É
        test_type: –¢–∏–ø —Ç–µ—Å—Ç–∞
        user_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        
    Returns:
        –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∫–æ–ø–∏–∏ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    try:
        if "telegram_id" in user_info:
            return report_archiver.save_telegram_report(
                source_path, 
                user_info["telegram_id"], 
                test_type,
                user_info.get("name")
            )
        else:
            return report_archiver.save_report(
                source_path,
                test_type,
                user_info.get("name", "User"),
                user_info
            )
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–ø–∏—é –æ—Ç—á–µ—Ç–∞: {e}")
        return None

def print_report_stats():
    """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤"""
    stats = report_archiver.get_report_stats()
    
    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–¢–ß–ï–¢–û–í:")
    print(f"–í—Å–µ–≥–æ –æ—Ç—á–µ—Ç–æ–≤: {stats['total_reports']}")
    print(f"–°–µ–≥–æ–¥–Ω—è —Å–æ–∑–¥–∞–Ω–æ: {stats['reports_today']}")
    
    if stats['test_types']:
        print(f"–ü–æ —Ç–∏–ø–∞–º —Ç–µ—Å—Ç–æ–≤:")
        for test_type, count in stats['test_types'].items():
            print(f"  ‚Ä¢ {test_type}: {count}")
    
    if stats['date_range']['first']:
        print(f"–ü–µ—Ä–∏–æ–¥: {stats['date_range']['first']} - {stats['date_range']['last']}")
    
    print(f"–ü–∞–ø–∫–∞: {stats['storage_path']}")

if __name__ == "__main__":
    print("üìÅ –°–ò–°–¢–ï–ú–ê –ê–†–•–ò–í–ò–†–û–í–ê–ù–ò–Ø –û–¢–ß–ï–¢–û–í")
    print("=" * 50)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print_report_stats()
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    print(f"\nüìÇ –ü–∞–ø–∫–∞ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ –≥–æ—Ç–æ–≤–∞: {report_archiver.reports_dir}")
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤")