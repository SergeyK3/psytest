#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è –¥–æ 1 –¥–µ—Å—è—Ç–∏—á–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
"""

from scale_normalizer import ScaleNormalizer

def test_rounding_precision():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è"""
    print("üîç –¢–µ—Å—Ç –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è –¥–æ 1 –¥–µ—Å—è—Ç–∏—á–Ω–æ–≥–æ –∑–Ω–∞–∫–∞")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    test_cases = [
        # PAEI —Ç–µ—Å—Ç—ã
        ("PAEI", {"P": 1, "A": 2, "E": 1, "I": 1}),  # –í—Å–µ –ø–æ 1-2
        ("PAEI", {"P": 0, "A": 5, "E": 0, "I": 0}),  # –≠–∫—Å—Ç—Ä–µ–º—É–º A
        ("PAEI", {"P": 1, "A": 1, "E": 1, "I": 2}),  # –°–º–µ—à–∞–Ω–Ω—ã–µ
        
        # DISC —Ç–µ—Å—Ç—ã
        ("DISC", {"D": 1, "I": 2, "S": 2, "C": 1}),  # –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
        ("DISC", {"D": 6, "I": 0, "S": 0, "C": 0}),  # –≠–∫—Å—Ç—Ä–µ–º—É–º D
        ("DISC", {"D": 2, "I": 1, "S": 2, "C": 1}),  # –°–º–µ—à–∞–Ω–Ω—ã–µ
        
        # HEXACO —Ç–µ—Å—Ç—ã (—à–∫–∞–ª–∞ 1-5)
        ("HEXACO", {"H": 2.3, "E": 4.7, "X": 1.9, "A": 3.6, "C": 2.1, "O": 4.4}),
        ("HEXACO", {"H": 1.0, "E": 5.0, "X": 2.5, "A": 3.3, "C": 4.8, "O": 1.7}),
        
        # Soft Skills —Ç–µ—Å—Ç—ã (—à–∫–∞–ª–∞ 1-10)
        ("SOFT_SKILLS", {"–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è": 7.8, "–õ–∏–¥–µ—Ä—Å—Ç–≤–æ": 6.3, "–¢–∏–º–≤–æ—Ä–∫": 8.9, "–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å": 5.4}),
        ("SOFT_SKILLS", {"–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è": 10.0, "–õ–∏–¥–µ—Ä—Å—Ç–≤–æ": 1.0, "–¢–∏–º–≤–æ—Ä–∫": 5.5, "–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å": 7.2}),
    ]
    
    for test_type, scores in test_cases:
        print(f"\nüìä {test_type} —Ç–µ—Å—Ç:")
        print(f"   –ò—Å—Ö–æ–¥–Ω—ã–µ: {scores}")
        
        normalized, method = ScaleNormalizer.auto_normalize(test_type, scores)
        print(f"   –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ: {normalized}")
        print(f"   –ú–µ—Ç–æ–¥: {method}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ
        for key, value in normalized.items():
            decimal_places = len(str(value).split('.')[-1]) if '.' in str(value) else 0
            if decimal_places > 1:
                print(f"   ‚ùå –û–®–ò–ë–ö–ê: {key}={value} –∏–º–µ–µ—Ç {decimal_places} –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π!")
            else:
                print(f"   ‚úÖ OK: {key}={value} –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–∫—Ä—É–≥–ª–µ–Ω–æ")

def test_extreme_rounding_cases():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è"""
    print("\nüéØ –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è")
    print("=" * 50)
    
    # –°–ª—É—á–∞–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –¥–∞–≤–∞—Ç—å –º–Ω–æ–≥–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    extreme_cases = [
        # PAEI: 1/5 = 0.2, 2/5 = 0.4, 3/5 = 0.6, 4/5 = 0.8
        ("PAEI", {"P": 1, "A": 2, "E": 3, "I": 4}),  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 2.0, 4.0, 6.0, 8.0
        
        # DISC: 1/6 = 0.166..., 2/6 = 0.333..., 5/6 = 0.833...
        ("DISC", {"D": 1, "I": 2, "S": 0, "C": 5}),  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 1.7, 3.3, 0.0, 8.3
        
        # HEXACO: –¥—Ä–æ–±–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        ("HEXACO", {"H": 1.33, "E": 2.67, "X": 3.14, "A": 4.99, "C": 1.01, "O": 4.44}),
        
        # Soft Skills: –∑–Ω–∞—á–µ–Ω–∏—è —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∑–Ω–∞–∫–∞–º–∏
        ("SOFT_SKILLS", {"Skill1": 3.333, "Skill2": 6.666, "Skill3": 9.999, "Skill4": 1.111}),
    ]
    
    for test_type, scores in extreme_cases:
        print(f"\nüî¨ {test_type} —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç:")
        print(f"   –ò—Å—Ö–æ–¥–Ω—ã–µ: {scores}")
        
        normalized, method = ScaleNormalizer.auto_normalize(test_type, scores)
        print(f"   –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ: {normalized}")
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
        all_correct = True
        for key, value in normalized.items():
            str_value = str(value)
            if '.' in str_value:
                decimal_part = str_value.split('.')[1]
                if len(decimal_part) > 1:
                    print(f"   ‚ùå {key}={value} -> {len(decimal_part)} –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π")
                    all_correct = False
                else:
                    print(f"   ‚úÖ {key}={value} -> {len(decimal_part)} –∑–Ω–∞–∫ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π")
            else:
                print(f"   ‚úÖ {key}={value} -> —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ")
        
        if all_correct:
            print(f"   üéâ –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–∫—Ä—É–≥–ª–µ–Ω—ã!")

if __name__ == "__main__":
    test_rounding_precision()
    test_extreme_rounding_cases()
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")