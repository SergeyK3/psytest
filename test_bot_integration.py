#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö —á–µ—Ç—ã—Ä–µ—Ö —Ç–µ—Å—Ç–æ–≤ –≤ Telegram –±–æ—Ç–µ
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from telegram_test_bot import UserSession, PAEI_QUESTIONS, DISC_QUESTIONS, HEXACO_QUESTIONS, SOFT_SKILLS_QUESTIONS
from enhanced_pdf_report_v2 import EnhancedPDFReportV2

def test_complete_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    
    print("üß™ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö —á–µ—Ç—ã—Ä–µ—Ö –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    session = UserSession("–¢–µ—Å—Ç–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á")
    session.user_name = "–¢–µ—Å—Ç–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"  # –î–æ–±–∞–≤–ª—è–µ–º —è–≤–Ω–æ –∞—Ç—Ä–∏–±—É—Ç
    
    # === –ü–†–û–í–ï–†–ö–ê 1: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ ===
    print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–µ—Å—Ç–∞–º:")
    print(f"   PAEI: {len(PAEI_QUESTIONS)} –≤–æ–ø—Ä–æ—Å–æ–≤")
    print(f"   DISC: {len(DISC_QUESTIONS)} –≤–æ–ø—Ä–æ—Å–æ–≤")
    print(f"   HEXACO: {len(HEXACO_QUESTIONS)} –≤–æ–ø—Ä–æ—Å–æ–≤")
    print(f"   Soft Skills: {len(SOFT_SKILLS_QUESTIONS)} –≤–æ–ø—Ä–æ—Å–æ–≤")
    print()
    
    # === –ü–†–û–í–ï–†–ö–ê 2: –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ PAEI ===
    print("üéØ –°–∏–º—É–ª—è—Ü–∏—è —Ç–µ—Å—Ç–∞ PAEI...")
    test_paei_answers = ["P", "A", "E", "I", "P", "P", "A", "A"]  # 8 –æ—Ç–≤–µ—Ç–æ–≤
    for i, answer in enumerate(test_paei_answers):
        session.paei_scores[answer] += 1
    print(f"   PAEI —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {session.paei_scores}")
    
    # === –ü–†–û–í–ï–†–ö–ê 3: –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ DISC ===
    print("üéØ –°–∏–º—É–ª—è—Ü–∏—è —Ç–µ—Å—Ç–∞ DISC...")
    test_disc_answers = ["D", "I", "S", "C", "D", "D", "I", "S"]  # 8 –æ—Ç–≤–µ—Ç–æ–≤
    for answer in test_disc_answers:
        session.disc_scores[answer] += 1
    print(f"   DISC —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {session.disc_scores}")
    
    # === –ü–†–û–í–ï–†–ö–ê 4: –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ HEXACO ===
    print("üéØ –°–∏–º—É–ª—è—Ü–∏—è —Ç–µ—Å—Ç–∞ HEXACO...")
    test_hexaco_answers = [4, 3, 5, 2, 4, 3]  # 6 –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ —à–∫–∞–ª–µ 1-5
    session.hexaco_scores = test_hexaco_answers.copy()
    print(f"   HEXACO –æ—Ç–≤–µ—Ç—ã (1-5): {session.hexaco_scores}")
    
    # === –ü–†–û–í–ï–†–ö–ê 5: –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ Soft Skills ===
    print("üéØ –°–∏–º—É–ª—è—Ü–∏—è —Ç–µ—Å—Ç–∞ Soft Skills...")
    test_soft_skills_answers = [7, 8, 6, 9, 7, 8, 6, 7, 8, 7]  # 10 –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ —à–∫–∞–ª–µ 1-10
    session.soft_skills_scores = test_soft_skills_answers.copy()
    print(f"   Soft Skills –æ—Ç–≤–µ—Ç—ã (1-10): {session.soft_skills_scores}")
    print()
    
    # === –ü–†–û–í–ï–†–ö–ê 6: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è PDF ===
    print("üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è PDF...")
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º PAEI
    total_paei = sum(session.paei_scores.values()) or 1
    paei_converted = {
        "P": round(1 + (session.paei_scores["P"] / total_paei) * 9, 1),
        "A": round(1 + (session.paei_scores["A"] / total_paei) * 9, 1), 
        "E": round(1 + (session.paei_scores["E"] / total_paei) * 9, 1),
        "I": round(1 + (session.paei_scores["I"] / total_paei) * 9, 1)
    }
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º DISC
    total_disc = sum(session.disc_scores.values()) or 1
    disc_converted = {
        "D": round(1 + (session.disc_scores["D"] / total_disc) * 9, 1),
        "I": round(1 + (session.disc_scores["I"] / total_disc) * 9, 1),
        "S": round(1 + (session.disc_scores["S"] / total_disc) * 9, 1),
        "C": round(1 + (session.disc_scores["C"] / total_disc) * 9, 1)
    }
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º HEXACO
    hexaco_dimensions = ["H", "E", "X", "A", "C", "O"]
    hexaco_converted = {}
    for i, dimension in enumerate(hexaco_dimensions):
        score = session.hexaco_scores[i]  # –û—Ü–µ–Ω–∫–∞ 1-5
        hexaco_converted[dimension] = round((score / 5.0) * 10.0, 1)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Soft Skills
    soft_skills_names = ["–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è", "–õ–∏–¥–µ—Ä—Å—Ç–≤–æ", "–†–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ", "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ",
                        "–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º", "–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–µ–º", "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç",
                        "–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å", "–°—Ç—Ä–µ—Å—Å–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å"]
    soft_skills_converted = {}
    for i, skill_name in enumerate(soft_skills_names):
        soft_skills_converted[skill_name] = session.soft_skills_scores[i]
    
    print(f"   PAEI (1-10): {paei_converted}")
    print(f"   DISC (1-10): {disc_converted}")
    print(f"   HEXACO (1-10): {hexaco_converted}")
    print(f"   Soft Skills (1-10): {soft_skills_converted}")
    print()
    
    # === –ü–†–û–í–ï–†–ö–ê 7: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF ===
    print("üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ PDF –æ—Ç—á–µ—Ç–∞...")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è PDF
    session.paei_scores = paei_converted
    session.disc_scores = disc_converted
    session.hexaco_scores = hexaco_converted
    session.soft_skills_scores = soft_skills_converted
    
    try:
        pdf_path = f"test_integration_report_{session.user_name.replace(' ', '_').lower()}.pdf"
        
        from datetime import datetime
        
        generator = EnhancedPDFReportV2()
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∞
        ai_interpretations = {
            "paei": "–¢–µ—Å—Ç–æ–≤–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è PAEI",
            "disc": "–¢–µ—Å—Ç–æ–≤–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è DISC",
            "hexaco": "–¢–µ—Å—Ç–æ–≤–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è HEXACO",
            "soft_skills": "–¢–µ—Å—Ç–æ–≤–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è Soft Skills"
        }
        
        from pathlib import Path
        pdf_path = Path(f"test_integration_report_{session.user_name.replace(' ', '_').lower()}.pdf")
        
        generator.generate_enhanced_report(
            participant_name=session.user_name,
            test_date=datetime.now().strftime("%d.%m.%Y"),
            paei_scores=session.paei_scores,
            disc_scores=session.disc_scores,
            hexaco_scores=session.hexaco_scores,
            soft_skills_scores=session.soft_skills_scores,
            ai_interpretations=ai_interpretations,
            out_path=pdf_path
        )
        
        print(f"‚úÖ PDF –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {pdf_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if os.path.exists(pdf_path):
            file_size = os.path.getsize(pdf_path) / 1024  # KB
            print(f"   –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size:.1f} KB")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF: {e}")
        return False
    
    print()
    print("üéâ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    return True

def test_data_consistency():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏"""
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö...")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤
    errors = []
    
    # PAEI –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    for i, q in enumerate(PAEI_QUESTIONS):
        if "answers" not in q or len(q["answers"]) != 4:
            errors.append(f"PAEI –≤–æ–ø—Ä–æ—Å {i+1}: –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ answers")
    
    # DISC –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    for i, q in enumerate(DISC_QUESTIONS):
        if "answers" not in q or len(q["answers"]) != 4:
            errors.append(f"DISC –≤–æ–ø—Ä–æ—Å {i+1}: –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ answers")
    
    # HEXACO –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
    for i, q in enumerate(HEXACO_QUESTIONS):
        if "question" not in q:
            errors.append(f"HEXACO –≤–æ–ø—Ä–æ—Å {i+1}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞")
    
    # Soft Skills –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–∞
    for i, q in enumerate(SOFT_SKILLS_QUESTIONS):
        if "skill" not in q:
            errors.append(f"Soft Skills –≤–æ–ø—Ä–æ—Å {i+1}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–∞")
    
    if errors:
        print("‚ùå –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö:")
        for error in errors:
            print(f"   ‚Ä¢ {error}")
        return False
    else:
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        return True

if __name__ == "__main__":
    print("üß™ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    print("=" * 60)
    print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
    data_ok = test_data_consistency()
    print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
    integration_ok = test_complete_integration()
    
    print()
    print("üìã –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"   –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö: {'‚úÖ –û–ö' if data_ok else '‚ùå –û–®–ò–ë–ö–ê'}")
    print(f"   –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤: {'‚úÖ –û–ö' if integration_ok else '‚ùå –û–®–ò–ë–ö–ê'}")
    
    if data_ok and integration_ok:
        print()
        print("üéØ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("   –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å–æ –≤—Å–µ–º–∏ —á–µ—Ç—ã—Ä—å–º—è —Ç–µ—Å—Ç–∞–º–∏.")
    else:
        print()
        print("‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´!")
        print("   –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º.")