#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Å –æ–±—â–∏–º –∑–∞–∫–ª—é—á–µ–Ω–∏–µ–º
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append('.')
sys.path.append('./src')

def test_ai_interpreter_logic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∞"""
    
    print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∞...")
    
    try:
        from src.psytest.ai_interpreter import AIInterpreter
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω
        ai = AIInterpreter.__new__(AIInterpreter)  # –°–æ–∑–¥–∞–µ–º –±–µ–∑ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ API
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–∞ interpret_general_conclusion
        if hasattr(ai, 'interpret_general_conclusion'):
            print("‚úÖ –ú–µ—Ç–æ–¥ interpret_general_conclusion –Ω–∞–π–¥–µ–Ω")
        else:
            print("‚ùå –ú–µ—Ç–æ–¥ interpret_general_conclusion –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã
        methods_to_check = [
            'interpret_paei',
            'interpret_disc', 
            'interpret_hexaco',
            'interpret_soft_skills'
        ]
        
        for method in methods_to_check:
            if hasattr(ai, method):
                print(f"‚úÖ –ú–µ—Ç–æ–¥ {method} –Ω–∞–π–¥–µ–Ω")
            else:
                print(f"‚ùå –ú–µ—Ç–æ–¥ {method} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                return False
                
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∞: {e}")
        return False

def test_prompt_files():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø—Ä–æ–º–ø—Ç–æ–≤"""
    
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–º–ø—Ç–æ–≤...")
    
    prompt_files = [
        "adizes_system_res.txt",
        "disk_system_res.txt", 
        "soft_system_res.txt",
        "hexaco_system_res.txt",
        "general_system_res.txt"
    ]
    
    prompts_dir = Path("data/prompts")
    
    for prompt_file in prompt_files:
        prompt_path = prompts_dir / prompt_file
        
        if prompt_path.exists():
            try:
                content = prompt_path.read_text(encoding="utf-8")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –ª–∏—à–Ω–µ–≥–æ Python –∫–æ–¥–∞
                if "system_res_" in content or "'''" in content:
                    print(f"‚ö†Ô∏è  {prompt_file}: —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏—à–Ω–∏–π Python –∫–æ–¥")
                else:
                    print(f"‚úÖ {prompt_file}: –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
                if len(content.strip()) < 200:
                    print(f"‚ö†Ô∏è  {prompt_file}: —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç ({len(content.strip())} —Å–∏–º–≤–æ–ª–æ–≤)")
                    
            except Exception as e:
                print(f"‚ùå {prompt_file}: –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è - {e}")
        else:
            print(f"‚ùå {prompt_file}: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

def test_telegram_bot_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å telegram bot"""
    
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Telegram –±–æ—Ç–æ–º...")
    
    try:
        from telegram_test_bot import generate_user_report, UserSession
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Å—Å–∏—é
        session = UserSession(12345)
        session.name = "Test User"
        session.paei_scores = {"–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å": 8, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä": 5, "–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å": 7, "–ò–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä": 6}
        session.disc_scores = {"D": 7, "I": 5, "S": 3, "C": 4}
        session.hexaco_scores = {"–ß–µ—Å—Ç–Ω–æ—Å—Ç—å-–°–∫—Ä–æ–º–Ω–æ—Å—Ç—å": 4, "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å": 3, "–≠–∫—Å—Ç—Ä–∞–≤–µ—Ä—Å–∏—è": 5, "–î—Ä—É–∂–µ–ª—é–±–∏–µ": 4, "–°–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å": 5, "–û—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å –æ–ø—ã—Ç—É": 3}
        session.soft_skills_scores = {"–õ–∏–¥–µ—Ä—Å—Ç–≤–æ": 8, "–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è": 7, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ": 6, "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–µ–º": 7, "–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤": 8, "–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å": 6, "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç": 7, "–ù–∞–≤—ã–∫–∏ —Ä–∞–∑–≤–∏—Ç–∏—è": 6}
        
        print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞")
        print(f"   PAEI: {session.paei_scores}")
        print(f"   DISC: {session.disc_scores}")
        print(f"   HEXACO: {len(session.hexaco_scores)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        print(f"   Soft Skills: {len(session.soft_skills_scores)} –Ω–∞–≤—ã–∫–æ–≤")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–µ –ø—Ä–æ–º–ø—Ç–æ–≤")
    print("=" * 70)
    
    tests = [
        ("AI Interpreter Logic", test_ai_interpreter_logic),
        ("Prompt Files", test_prompt_files), 
        ("Telegram Bot Integration", test_telegram_bot_integration)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüîç {test_name}:")
        if test_func():
            passed += 1
            print(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
        else:
            print(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –õ–æ–≥–∏–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –ø—Ä–æ–º–ø—Ç–∞–º.")
    else:
        print("‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
    
    return passed == total

if __name__ == "__main__":
    main()