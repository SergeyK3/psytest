#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–†–ê–ë–û–ß–ò–ô –ü–û–î–•–û–î –î–õ–Ø –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ù–£–ú–ï–†–ê–¶–ò–ò –°–¢–†–ê–ù–ò–¶
–û–±—Ö–æ–¥–∏—Ç –ø—Ä–æ–±–ª–µ–º—É —Å canvasmaker –≤ ReportLab 4.4.4
"""

from reportlab.lib.pagesizes import A4
from reportlab.lib.units import mm
from reportlab.pdfgen import canvas
from reportlab.lib.colors import black
import io
from PyPDF2 import PdfReader, PdfWriter

def add_page_numbers_to_pdf(input_pdf_path: str, output_pdf_path: str) -> str:
    """
    –ü–û–°–¢-–û–ë–†–ê–ë–û–¢–ö–ê: –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü –∫ –≥–æ—Ç–æ–≤–æ–º—É PDF
    
    Args:
        input_pdf_path: –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É PDF –±–µ–∑ –Ω—É–º–µ—Ä–∞—Ü–∏–∏
        output_pdf_path: –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è PDF —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π
    
    Returns:
        –ø—É—Ç—å –∫ –≥–æ—Ç–æ–≤–æ–º—É —Ñ–∞–π–ª—É
    """
    print(f"üìÑ –î–æ–±–∞–≤–ª—è–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é –∫ PDF: {input_pdf_path}")
    
    # –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π PDF
    reader = PdfReader(input_pdf_path)
    writer = PdfWriter()
    total_pages = len(reader.pages)
    
    print(f"üìä –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –Ω—É–º–µ—Ä–∞—Ü–∏–∏: {total_pages}")
    
    for page_num in range(total_pages):
        # –ë–µ—Ä–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ PDF
        page = reader.pages[page_num]
        
        # –°–æ–∑–¥–∞–µ–º overlay —Å –Ω–æ–º–µ—Ä–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        overlay = create_page_number_overlay(page_num + 1, total_pages)
        
        # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        page.merge_page(overlay)
        writer.add_page(page)
        
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–º–µ—Ä –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {page_num + 1}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    with open(output_pdf_path, 'wb') as output_file:
        writer.write(output_file)
    
    print(f"üéâ PDF —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_pdf_path}")
    return output_pdf_path

def create_page_number_overlay(page_num: int, total_pages: int):
    """
    –°–æ–∑–¥–∞–µ—Ç overlay —Å –Ω–æ–º–µ—Ä–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    """
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π PDF —Å –Ω–æ–º–µ—Ä–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    packet = io.BytesIO()
    can = canvas.Canvas(packet, pagesize=A4)
    
    # –ù–ê–°–¢–†–û–ô–ö–ò –ü–û–ó–ò–¶–ò–ò –ò –®–†–ò–§–¢–ê
    # –ü—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª —Å –æ—Ç—Å—Ç—É–ø–æ–º –æ—Ç –∫—Ä–∞—è
    x_position = A4[0] - 15*mm  # 15–º–º –æ—Ç –ø—Ä–∞–≤–æ–≥–æ –∫—Ä–∞—è
    y_position = A4[1] - 10*mm  # 10–º–º –æ—Ç –≤–µ—Ä—Ö–Ω–µ–≥–æ –∫—Ä–∞—è
    
    # –®—Ä–∏—Ñ—Ç –∏ —Ä–∞–∑–º–µ—Ä
    can.setFont("Helvetica", 10)
    can.setFillColor(black)
    
    # –¢–µ–∫—Å—Ç –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    page_text = f"–°—Ç—Ä. {page_num} –∏–∑ {total_pages}"
    
    # –†–∏—Å—É–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    can.drawRightString(x_position, y_position, page_text)
    
    can.save()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞–∫ overlay
    packet.seek(0)
    overlay_pdf = PdfReader(packet)
    return overlay_pdf.pages[0]

# –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ô –ü–û–î–•–û–î 2: –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï PLATYPUS PAGETEMPLATE

from reportlab.platypus import BaseDocTemplate, PageTemplate, Frame
from reportlab.platypus.tableofcontents import TableOfContents
from reportlab.lib.enums import TA_RIGHT

class NumberedPageTemplate(PageTemplate):
    """
    –®–∞–±–ª–æ–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π
    """
    def __init__(self, id='numbered', **kwargs):
        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        frame = Frame(
            20*mm, 20*mm,  # x, y (–ª–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª)
            A4[0] - 40*mm, A4[1] - 40*mm,  # width, height
            id='main'
        )
        super().__init__(id, frames=[frame], **kwargs)
    
    def beforeDrawPage(self, canvas, doc):
        """
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ü–ï–†–ï–î —Ä–∏—Å–æ–≤–∞–Ω–∏–µ–º –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        """
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page_num = canvas.getPageNumber()
        
        # –†–∏—Å—É–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É
        canvas.saveState()
        canvas.setFont("Helvetica", 10)
        canvas.setFillColor(black)
        
        # –ü–æ–∑–∏—Ü–∏—è –¥–ª—è –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        x_position = A4[0] - 15*mm
        y_position = A4[1] - 10*mm
        
        # –ü–†–û–ë–õ–ï–ú–ê: –º—ã –Ω–µ –∑–Ω–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ!
        # –ü–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        page_text = f"–°—Ç—Ä. {page_num}"
        canvas.drawRightString(x_position, y_position, page_text)
        
        canvas.restoreState()

def create_pdf_with_template_numbering(filename: str, story_content):
    """
    –ü–û–î–•–û–î 3: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ PageTemplate –¥–ª—è –Ω—É–º–µ—Ä–∞—Ü–∏–∏
    """
    # –°–æ–∑–¥–∞–µ–º BaseDocTemplate –≤–º–µ—Å—Ç–æ SimpleDocTemplate
    doc = BaseDocTemplate(
        filename,
        pagesize=A4,
        leftMargin=20*mm,
        rightMargin=20*mm,
        topMargin=25*mm,  # –ë–æ–ª—å—à–µ –º–µ—Å—Ç–∞ –¥–ª—è –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        bottomMargin=20*mm,
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π
    template = NumberedPageTemplate()
    doc.addPageTemplates([template])
    
    # –°—Ç—Ä–æ–∏–º –¥–æ–∫—É–º–µ–Ω—Ç
    doc.build(story_content)
    
    return filename

if __name__ == "__main__":
    print("üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –¥–ª—è –Ω—É–º–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü")
    
    # –ú–æ–∂–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å post-processing –ø–æ–¥—Ö–æ–¥
    # add_page_numbers_to_pdf("input.pdf", "output_with_numbers.pdf")