#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ 7-–≥–æ –≤–æ–ø—Ä–æ—Å–∞ Soft Skills
"""

import sys
sys.path.append("d:/MyActivity/MyInfoBusiness/MyPythonApps/07 PsychTest")

from telegram_test_bot import parse_soft_skills_questions

def debug_question_7():
    """–û—Ç–ª–∞–¥–∫–∞ 7-–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –æ –∫—Ä–∏—Ç–∏–∫–µ"""
    print("üîç –û—Ç–ª–∞–¥–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ 7-–≥–æ –≤–æ–ø—Ä–æ—Å–∞ Soft Skills...")
    
    questions = parse_soft_skills_questions()
    print(f"üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(questions)}")
    
    if len(questions) >= 7:
        question_7 = questions[6]  # 7-–π –≤–æ–ø—Ä–æ—Å (–∏–Ω–¥–µ–∫—Å 6)
        print(f"\n‚ùì 7-–π –≤–æ–ø—Ä–æ—Å:")
        print(f"   –¢–µ–∫—Å—Ç: {question_7['question']}")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤: {len(question_7.get('answers', {}))}")
        
        if 'answers' in question_7:
            print(f"   –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:")
            for key, value in question_7['answers'].items():
                print(f"     {key}. {value}")
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤ 1-5
            expected_keys = {'1', '2', '3', '4', '5'}
            actual_keys = set(question_7['answers'].keys())
            
            print(f"\nüéØ –ê–Ω–∞–ª–∏–∑:")
            print(f"   –û–∂–∏–¥–∞–µ–º—ã–µ –∫–ª—é—á–∏: {sorted(expected_keys)}")
            print(f"   –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∫–ª—é—á–∏: {sorted(actual_keys)}")
            
            missing_keys = expected_keys - actual_keys
            extra_keys = actual_keys - expected_keys
            
            if missing_keys:
                print(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–∏: {sorted(missing_keys)}")
            if extra_keys:
                print(f"   ‚ö†Ô∏è  –õ–∏—à–Ω–∏–µ –∫–ª—é—á–∏: {sorted(extra_keys)}")
            if not missing_keys and not extra_keys:
                print(f"   ‚úÖ –í—Å–µ –∫–ª—é—á–∏ –Ω–∞ –º–µ—Å—Ç–µ")
                
        else:
            print("   ‚ùå –ù–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤!")
    else:
        print("‚ùå 7-–π –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        
    # –ü—Ä–æ–≤–µ—Ä–∏–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤
    print(f"\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:")
    for i, question in enumerate(questions, 1):
        answers = question.get('answers', {})
        keys = set(answers.keys())
        expected = {'1', '2', '3', '4', '5'}
        
        if keys == expected:
            status = "‚úÖ"
        else:
            status = "‚ùå"
            
        print(f"   {status} –í–æ–ø—Ä–æ—Å {i}: {len(keys)}/5 –æ—Ç–≤–µ—Ç–æ–≤, –∫–ª—é—á–∏: {sorted(keys)}")

def main():
    debug_question_7()

if __name__ == "__main__":
    main()