#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —à–∫–∞–ª –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤
"""
from typing import Dict, Tuple

class ScaleNormalizer:
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ç–æ—Ä —à–∫–∞–ª –¥–ª—è –ø—Ä–∏–≤–µ–¥–µ–Ω–∏—è –∫ –µ–¥–∏–Ω–æ–º—É –º–∞—Å—à—Ç–∞–±—É"""
    
    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –±–∞–ª–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Ç–µ—Å—Ç–∞
    MAX_SCORES = {
        "PAEI": 5,    # 5 –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º –≤—ã–±–æ—Ä–æ–º
        "DISC": 6,    # 6 –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º –≤—ã–±–æ—Ä–æ–º  
        "HEXACO": 5,  # –®–∫–∞–ª–∞ 1-5
        "SOFT_SKILLS": 10  # –®–∫–∞–ª–∞ 1-10
    }
    
    TARGET_MAX = 10  # –¶–µ–ª–µ–≤–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∫–∞–ª–∞
    
    @staticmethod
    def normalize_alternative_choice(scores: Dict[str, float], max_questions: int) -> Dict[str, float]:
        """
        –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –±–∞–ª–ª—ã –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ (PAEI, DISC) –∫ —à–∫–∞–ª–µ 0-10
        
        Args:
            scores: –ò—Å—Ö–æ–¥–Ω—ã–µ –±–∞–ª–ª—ã (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±–æ—Ä–æ–≤)
            max_questions: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
            
        Returns:
            –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –±–∞–ª–ª—ã –∫ —à–∫–∞–ª–µ 0-10 (–æ–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ –¥–æ 1 –∑–Ω–∞–∫–∞)
        """
        normalized = {}
        for key, count in scores.items():
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º: (count / max_questions) * 10
            value = (count / max_questions) * ScaleNormalizer.TARGET_MAX
            normalized[key] = round(value, 1)  # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 1 –¥–µ—Å—è—Ç–∏—á–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
        return normalized
    
    @staticmethod
    def normalize_rating_scale(scores: Dict[str, float], original_min: int, original_max: int) -> Dict[str, float]:
        """
        –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –±–∞–ª–ª—ã —Ä–µ–π—Ç–∏–Ω–≥–æ–≤–æ–π —à–∫–∞–ª—ã –∫ —à–∫–∞–ª–µ 0-10
        
        Args:
            scores: –ò—Å—Ö–æ–¥–Ω—ã–µ –±–∞–ª–ª—ã
            original_min: –ú–∏–Ω–∏–º—É–º –∏—Å—Ö–æ–¥–Ω–æ–π —à–∫–∞–ª—ã
            original_max: –ú–∞–∫—Å–∏–º—É–º –∏—Å—Ö–æ–¥–Ω–æ–π —à–∫–∞–ª—ã
            
        Returns:
            –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –±–∞–ª–ª—ã –∫ —à–∫–∞–ª–µ 0-10 (–æ–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ –¥–æ 1 –∑–Ω–∞–∫–∞)
        """
        normalized = {}
        original_range = original_max - original_min
        
        for key, value in scores.items():
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ 0-10: ((value - min) / range) * 10
            normalized_value = ((value - original_min) / original_range) * ScaleNormalizer.TARGET_MAX
            clamped_value = max(0, min(10, normalized_value))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 0-10
            normalized[key] = round(clamped_value, 1)  # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 1 –¥–µ—Å—è—Ç–∏—á–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
            
        return normalized
    
    @staticmethod 
    def normalize_paei(scores: Dict[str, float]) -> Tuple[Dict[str, float], str]:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç PAEI –±–∞–ª–ª—ã"""
        normalized = ScaleNormalizer.normalize_alternative_choice(
            scores, ScaleNormalizer.MAX_SCORES["PAEI"]
        )
        method = f"PAEI: {ScaleNormalizer.MAX_SCORES['PAEI']} –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Üí 0-10"
        return normalized, method
    
    @staticmethod
    def normalize_disc(scores: Dict[str, float]) -> Tuple[Dict[str, float], str]:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç DISC –±–∞–ª–ª—ã"""
        normalized = ScaleNormalizer.normalize_alternative_choice(
            scores, ScaleNormalizer.MAX_SCORES["DISC"]
        )
        method = f"DISC: {ScaleNormalizer.MAX_SCORES['DISC']} –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Üí 0-10"
        return normalized, method
    
    @staticmethod
    def normalize_hexaco(scores: Dict[str, float]) -> Tuple[Dict[str, float], str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç HEXACO –±–∞–ª–ª—ã –±–µ–∑ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —à–∫–∞–ª–∞ 1-5)"""
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –±–µ–∑ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
        original_scores = {k: round(v, 1) for k, v in scores.items()}
        method = "HEXACO: –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —à–∫–∞–ª–∞ 1-5 (–±–µ–∑ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏)"
        return original_scores, method
    
    @staticmethod
    def normalize_soft_skills(scores: Dict[str, float]) -> Tuple[Dict[str, float], str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç Soft Skills –±–∞–ª–ª—ã –±–µ–∑ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —à–∫–∞–ª–∞ 1-10)"""
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –±–µ–∑ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
        original_scores = {k: round(v, 1) for k, v in scores.items()}
        method = "Soft Skills: –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —à–∫–∞–ª–∞ 1-10 (–±–µ–∑ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏)"
        return original_scores, method
    
    @staticmethod
    def auto_normalize(test_type: str, scores: Dict[str, float]) -> Tuple[Dict[str, float], str]:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –º–µ—Ç–æ–¥ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø—É —Ç–µ—Å—Ç–∞
        
        Args:
            test_type: –¢–∏–ø —Ç–µ—Å—Ç–∞ (PAEI, DISC, HEXACO, SOFT_SKILLS)
            scores: –ò—Å—Ö–æ–¥–Ω—ã–µ –±–∞–ª–ª—ã
            
        Returns:
            –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –±–∞–ª–ª—ã –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞
        """
        test_type = test_type.upper()
        
        if test_type == "PAEI":
            return ScaleNormalizer.normalize_paei(scores)
        elif test_type == "DISC":
            return ScaleNormalizer.normalize_disc(scores)
        elif test_type == "HEXACO":
            return ScaleNormalizer.normalize_hexaco(scores)
        elif test_type == "SOFT_SKILLS":
            return ScaleNormalizer.normalize_soft_skills(scores)
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            return scores.copy(), f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø {test_type}"

def test_scale_normalizer():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
    print("üß™ –¢–µ—Å—Ç ScaleNormalizer")
    
    # –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–ª—É—á–∞–∏
    paei_extreme = {"P": 1, "A": 5, "E": 0, "I": 0}
    disc_extreme = {"D": 6, "I": 0, "S": 1, "C": 0}
    
    paei_norm, paei_method = ScaleNormalizer.auto_normalize("PAEI", paei_extreme)
    disc_norm, disc_method = ScaleNormalizer.auto_normalize("DISC", disc_extreme)
    
    print(f"PAEI {paei_extreme} ‚Üí {paei_norm} ({paei_method})")
    print(f"DISC {disc_extreme} ‚Üí {disc_norm} ({disc_method})")
    
    return True

if __name__ == "__main__":
    test_scale_normalizer()