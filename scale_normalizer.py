#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —à–∫–∞–ª –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤
"""
from typing import Dict, Tuple

class ScaleNormalizer:
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ç–æ—Ä —à–∫–∞–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    
    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –±–∞–ª–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Ç–µ—Å—Ç–∞ (–±–µ–∑ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏)
    MAX_SCORES = {
        "PAEI": 5,        # 5 –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º –≤—ã–±–æ—Ä–æ–º
        "DISC": 8,        # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∫–∞–ª–∞ 8
        "HEXACO": 5,      # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ 5
        "SOFT_SKILLS": 10 # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ 10
    }
    
    @staticmethod
    def get_max_scale(test_type: str) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —à–∫–∞–ª—ã –¥–ª—è —Ç–∏–ø–∞ —Ç–µ—Å—Ç–∞"""
        return ScaleNormalizer.MAX_SCORES.get(test_type.upper(), 10)
    
    @staticmethod 
    def normalize_paei(scores: Dict[str, float]) -> Tuple[Dict[str, float], str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç PAEI –±–∞–ª–ª—ã –±–µ–∑ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ (—à–∫–∞–ª–∞ 0-5)"""
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –æ–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ –¥–æ 1 –∑–Ω–∞–∫–∞
        original_scores = {k: round(v, 1) for k, v in scores.items()}
        method = "PAEI: –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —à–∫–∞–ª–∞ 0-5 (–±–µ–∑ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏)"
        return original_scores, method
    
    @staticmethod
    def normalize_disc(scores: Dict[str, float]) -> Tuple[Dict[str, float], str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç DISC –±–∞–ª–ª—ã –±–µ–∑ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ (—à–∫–∞–ª–∞ 0-8)"""
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –æ–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ –¥–æ 1 –∑–Ω–∞–∫–∞
        original_scores = {k: round(v, 1) for k, v in scores.items()}
        method = "DISC: –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —à–∫–∞–ª–∞ 0-8 (–±–µ–∑ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏)"
        return original_scores, method
    
    @staticmethod
    def normalize_hexaco(scores: Dict[str, float]) -> Tuple[Dict[str, float], str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç HEXACO –±–∞–ª–ª—ã –±–µ–∑ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —à–∫–∞–ª–∞ 1-5)"""
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –±–µ–∑ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
        original_scores = {k: round(v, 1) for k, v in scores.items()}
        method = "HEXACO: –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —à–∫–∞–ª–∞ 1-5 (–±–µ–∑ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏)"
        return original_scores, method
    
    @staticmethod
    def normalize_soft_skills(scores: Dict[str, float]) -> Tuple[Dict[str, float], str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç Soft Skills –±–∞–ª–ª—ã –±–µ–∑ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —à–∫–∞–ª–∞ 1-10)"""
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –±–µ–∑ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
        original_scores = {k: round(v, 1) for k, v in scores.items()}
        method = "Soft Skills: –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —à–∫–∞–ª–∞ 1-10 (–±–µ–∑ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏)"
        return original_scores, method
    
    @staticmethod
    def auto_normalize(test_type: str, scores: Dict[str, float]) -> Tuple[Dict[str, float], str]:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –º–µ—Ç–æ–¥ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø—É —Ç–µ—Å—Ç–∞
        
        Args:
            test_type: –¢–∏–ø —Ç–µ—Å—Ç–∞ (PAEI, DISC, HEXACO, SOFT_SKILLS)
            scores: –ò—Å—Ö–æ–¥–Ω—ã–µ –±–∞–ª–ª—ã
            
        Returns:
            –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –±–∞–ª–ª—ã –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞
        """
        test_type = test_type.upper()
        
        if test_type == "PAEI":
            return ScaleNormalizer.normalize_paei(scores)
        elif test_type == "DISC":
            return ScaleNormalizer.normalize_disc(scores)
        elif test_type == "HEXACO":
            return ScaleNormalizer.normalize_hexaco(scores)
        elif test_type == "SOFT_SKILLS":
            return ScaleNormalizer.normalize_soft_skills(scores)
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            return scores.copy(), f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø {test_type}"

def test_scale_normalizer():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
    print("üß™ –¢–µ—Å—Ç ScaleNormalizer")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    paei_test = {"P": 1, "A": 5, "E": 0, "I": 0}
    disc_test = {"D": 6, "I": 0, "S": 1, "C": 0}
    hexaco_test = {"H": 3.5, "E": 4.2, "X": 2.8, "A": 4.0, "C": 3.1, "O": 3.7}
    soft_skills_test = {"–õ–∏–¥–µ—Ä—Å—Ç–≤–æ": 8.5, "–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è": 7.2, "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞": 9.1}
    
    paei_norm, paei_method = ScaleNormalizer.auto_normalize("PAEI", paei_test)
    disc_norm, disc_method = ScaleNormalizer.auto_normalize("DISC", disc_test)
    hexaco_norm, hexaco_method = ScaleNormalizer.auto_normalize("HEXACO", hexaco_test)
    soft_norm, soft_method = ScaleNormalizer.auto_normalize("SOFT_SKILLS", soft_skills_test)
    
    print(f"PAEI {paei_test} ‚Üí {paei_norm}")
    print(f"  –ú–µ—Ç–æ–¥: {paei_method}")
    print(f"  –ú–∞–∫—Å —à–∫–∞–ª–∞: {ScaleNormalizer.get_max_scale('PAEI')}")
    
    print(f"DISC {disc_test} ‚Üí {disc_norm}")
    print(f"  –ú–µ—Ç–æ–¥: {disc_method}")
    print(f"  –ú–∞–∫—Å —à–∫–∞–ª–∞: {ScaleNormalizer.get_max_scale('DISC')}")
    
    print(f"HEXACO ‚Üí {hexaco_norm}")
    print(f"  –ú–µ—Ç–æ–¥: {hexaco_method}")
    print(f"  –ú–∞–∫—Å —à–∫–∞–ª–∞: {ScaleNormalizer.get_max_scale('HEXACO')}")
    
    print(f"SOFT_SKILLS ‚Üí {soft_norm}")
    print(f"  –ú–µ—Ç–æ–¥: {soft_method}")
    print(f"  –ú–∞–∫—Å —à–∫–∞–ª–∞: {ScaleNormalizer.get_max_scale('SOFT_SKILLS')}")
    
    return True

if __name__ == "__main__":
    test_scale_normalizer()