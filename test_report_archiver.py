#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤
"""
from pathlib import Path
from report_archiver import ReportArchiver, print_report_stats
import tempfile
from datetime import datetime

def test_report_archiver():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üìÅ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ê–†–•–ò–í–ò–†–û–í–ê–ù–ò–Ø –û–¢–ß–ï–¢–û–í")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—Ä—Ö–∏–≤–∞—Ç–æ—Ä
    archiver = ReportArchiver()
    print(f"üìÇ –ü–∞–ø–∫–∞ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤: {archiver.reports_dir}")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π PDF —Ñ–∞–π–ª
    with tempfile.NamedTemporaryFile(suffix=".pdf", delete=False) as temp_file:
        temp_file.write(b"Test PDF content for archiving system")
        temp_path = Path(temp_file.name)
    
    print(f"\nüß™ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {temp_path}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    test_cases = [
        {
            "test_type": "PAEI",
            "user_name": "–¢–µ—Å—Ç–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            "additional_info": {"version": "balanced", "source": "test"}
        },
        {
            "test_type": "DISC", 
            "user_name": "TestUser",
            "additional_info": {"version": "v2", "mode": "demo"}
        }
    ]
    
    saved_files = []
    
    for i, case in enumerate(test_cases, 1):
        print(f"\nüìä –¢–µ—Å—Ç {i}: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ {case['test_type']}")
        
        try:
            saved_path = archiver.save_report(
                temp_path,
                case['test_type'],
                case['user_name'],
                case['additional_info']
            )
            saved_files.append(saved_path)
            print(f"  ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {saved_path.name}")
            
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º Telegram —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    print(f"\nüì± –¢–µ—Å—Ç Telegram —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:")
    try:
        telegram_path = archiver.save_telegram_report(
            temp_path, 123456789, "HEXACO", "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤"
        )
        saved_files.append(telegram_path)
        print(f"  ‚úÖ Telegram –æ—Ç—á–µ—Ç: {telegram_path.name}")
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ Telegram: {e}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–°–õ–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print_report_stats()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏
    print(f"\nüìã –°–û–î–ï–†–ñ–ò–ú–û–ï –ü–ê–ü–ö–ò –û–¢–ß–ï–¢–û–í:")
    reports = list(archiver.reports_dir.glob("*.pdf"))
    for report in reports:
        size = report.stat().st_size
        mtime = datetime.fromtimestamp(report.stat().st_mtime)
        print(f"  üìÑ {report.name} ({size} –±–∞–π—Ç, {mtime.strftime('%Y-%m-%d %H:%M')})")
    
    # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    temp_path.unlink()
    for saved_file in saved_files:
        if saved_file.exists():
            saved_file.unlink()
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {saved_file.name}")
    
    print(f"\n‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print(f"–°–∏—Å—Ç–µ–º–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
    
    return archiver

def test_gitignore_setup():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É .gitignore"""
    print(f"\nüîí –ü–†–û–í–ï–†–ö–ê –ù–ê–°–¢–†–û–ô–ö–ò .GITIGNORE")
    print("=" * 40)
    
    gitignore_path = Path(__file__).parent / ".gitignore"
    
    if gitignore_path.exists():
        with open(gitignore_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        required_patterns = [
            "docs/reports/",
            "docs/user_reports/", 
            "docs/test_results/"
        ]
        
        missing_patterns = []
        for pattern in required_patterns:
            if pattern not in content:
                missing_patterns.append(pattern)
        
        if missing_patterns:
            print(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ .gitignore: {missing_patterns}")
        else:
            print(f"‚úÖ .gitignore –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            print(f"üìÅ –ü–∞–ø–∫–∏ reports/ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ Git")
            
    else:
        print(f"‚ùå –§–∞–π–ª .gitignore –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return len(missing_patterns) == 0 if gitignore_path.exists() else False

if __name__ == "__main__":
    print("üöÄ –°–ò–°–¢–ï–ú–ê –õ–û–ö–ê–õ–¨–ù–û–ì–û –ê–†–•–ò–í–ò–†–û–í–ê–ù–ò–Ø –û–¢–ß–ï–¢–û–í")
    print("=" * 70)
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—Ä—Ö–∏–≤–∞—Ç–æ—Ä
        archiver = test_report_archiver()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º .gitignore
        gitignore_ok = test_gitignore_setup()
        
        print(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –ù–ê–°–¢–†–û–ô–ö–ò:")
        print(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è: –≥–æ—Ç–æ–≤–∞")
        print(f"{'‚úÖ' if gitignore_ok else '‚ö†Ô∏è'} –ù–∞—Å—Ç—Ä–æ–π–∫–∞ .gitignore: {'–≥–æ—Ç–æ–≤–∞' if gitignore_ok else '—Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è'}")
        print(f"üìÇ –ü–∞–ø–∫–∞ –æ—Ç—á–µ—Ç–æ–≤: {archiver.reports_dir}")
        
        print(f"\nüí° –ö–ê–ö –≠–¢–û –†–ê–ë–û–¢–ê–ï–¢:")
        print(f"1. Telegram –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–ø–∏–∏ –≤—Å–µ—Ö –æ—Ç—á–µ—Ç–æ–≤")
        print(f"2. –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏")
        print(f"3. –û—Ç—á–µ—Ç—ã –ù–ï –ø–æ–ø–∞–¥–∞—é—Ç –≤ Git (–Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –≤ .gitignore)")
        print(f"4. –í—ã –º–æ–∂–µ—Ç–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã")
        print(f"5. –°—Ç–∞—Ä—ã–µ –æ—Ç—á–µ—Ç—ã –º–æ–∂–Ω–æ —É–¥–∞–ª—è—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        
        print(f"\nüîÑ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print(f"1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Telegram –±–æ—Ç–∞ —Å –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é")
        print(f"2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞")
        print(f"3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ docs/reports/")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()