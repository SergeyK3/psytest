#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è PDF –æ—Ç—á—ë—Ç–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
–í–µ—Ä—Å–∏—è 2.0 —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é —Ç–µ—Å—Ç–æ–≤
"""

from pathlib import Path
from typing import Dict, List, Optional, Tuple
from io import BytesIO
from copy import deepcopy
from reportlab.lib.pagesizes import A4
from reportlab.lib.units import mm
from reportlab.lib.colors import Color
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, PageBreak, Image
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
import os
import sys
from interpretation_utils import generate_interpretations_from_prompt

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(str(Path(__file__).parent / "src"))

try:
    from src.psytest.ai_interpreter import get_ai_interpreter
    AI_AVAILABLE = True
except ImportError:
    AI_AVAILABLE = False
    print("‚ö†Ô∏è AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏")

from src.psytest.charts import make_radar, make_bar_chart, make_paei_combined_chart, make_disc_combined_chart, make_hexaco_radar

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞
class DesignConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–∏–∑–∞–π–Ω–∞ –¥–ª—è –ø–µ—á–∞—Ç–∏"""
    
    # –¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —á/–± –ø–µ—á–∞—Ç–∏)
    PRIMARY_COLOR = Color(0.18, 0.25, 0.34)      # #2E4057 —Ç—ë–º–Ω–æ-—Å–∏–Ω–∏–π
    ACCENT_COLOR = Color(0.29, 0.56, 0.72)       # #4A90B8 —Å–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π  
    TEXT_COLOR = Color(0.17, 0.17, 0.17)         # #2C2C2C —Ç—ë–º–Ω–æ-—Å–µ—Ä—ã–π
    LIGHT_GRAY = Color(0.9, 0.9, 0.9)            # #E6E6E6 —Å–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π
    WHITE = Color(1, 1, 1)                        # #FFFFFF –±–µ–ª—ã–π
    
    # –†–∞–∑–º–µ—Ä—ã (–≤ –º–º)
    PAGE_WIDTH = 210
    PAGE_HEIGHT = 297
    MARGIN = 20
    
    # –†–∞–∑–º–µ—Ä—ã –≥—Ä–∞—Ñ–∏–∫–æ–≤ (–≤ –º–º) - —Ä–∞—Å—à–∏—Ä–µ–Ω—ã –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    RADAR_SIZE = 160  # —É–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–ª–Ω–æ–π —à–∏—Ä–∏–Ω—ã
    BAR_CHART_WIDTH = 180  # —É–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –ø–æ–ª–Ω–æ–π —à–∏—Ä–∏–Ω—ã
    BAR_CHART_HEIGHT = 90  # —É–≤–µ–ª–∏—á–µ–Ω–æ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
    PAEI_COMBINED_WIDTH = 180  # —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã PAEI
    PAEI_COMBINED_HEIGHT = 90  # –≤—ã—Å–æ—Ç–∞ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
    
    # –®—Ä–∏—Ñ—Ç—ã (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ Unicode —à—Ä–∏—Ñ—Ç—ã) - –∏–∑–º–µ–Ω—è–µ–º—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
    TITLE_FONT: str = "Times-Bold"
    BODY_FONT: str = "Times-Roman"
    SMALL_FONT: str = "Times-Roman"
    
    TITLE_SIZE = 14
    BODY_SIZE = 11  # –±—ã–ª–æ 10, —É–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    SMALL_SIZE = 9   # –±—ã–ª–æ 8


class EnhancedCharts:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –¥–∏–∞–≥—Ä–∞–º–º"""
    
    @staticmethod
    def create_minimalist_radar(labels: List[str], values: List[float], 
                               title: str, out_path: Path) -> Path:
        """–°–æ–∑–¥–∞—ë—Ç –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—É—é —Ä–∞–¥–∞—Ä–Ω—É—é –¥–∏–∞–≥—Ä–∞–º–º—É"""
        return make_radar(labels, values, out_path, title=title, max_value=10)
    
    @staticmethod
    def create_minimalist_bar_chart(labels: List[str], values: List[float],
                                   title: str, out_path: Path) -> Path:
        """–°–æ–∑–¥–∞—ë—Ç –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—É—é —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É"""
        return make_bar_chart(labels, values, out_path, title=title, max_value=10)
    
    @staticmethod
    def create_paei_combined_chart(labels: List[str], values: List[float],
                                  title: str, out_path: Path) -> Path:
        """–°–æ–∑–¥–∞—ë—Ç –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–∏–∞–≥—Ä–∞–º–º—É PAEI (—Å—Ç–æ–ª–±–∏–∫–æ–≤–∞—è + –∫—Ä—É–≥–æ–≤–∞—è)"""
        return make_paei_combined_chart(labels, values, out_path, title=title)
    
    @staticmethod
    def create_disc_combined_chart(labels: List[str], values: List[float],
                                  title: str, out_path: Path) -> Path:
        """–°–æ–∑–¥–∞—ë—Ç –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–∏–∞–≥—Ä–∞–º–º—É DISC (—Å—Ç–æ–ª–±–∏–∫–æ–≤–∞—è + –∫—Ä—É–≥–æ–≤–∞—è)"""
        return make_disc_combined_chart(labels, values, out_path, title=title)
        
    @staticmethod
    def create_hexaco_radar(labels: List[str], values: List[float], 
                          title: str, out_path: Path) -> Path:
        """–°–æ–∑–¥–∞—ë—Ç —Ä–∞–¥–∞—Ä–Ω—É—é –¥–∏–∞–≥—Ä–∞–º–º—É HEXACO —Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞–º–∏ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä"""
        return make_hexaco_radar(labels, values, out_path, title=title)


class EnhancedPDFReportV2:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω—ã—Ö PDF –æ—Ç—á—ë—Ç–æ–≤ –≤–µ—Ä—Å–∏–∏ 2.0"""
    
    def __init__(self, template_dir: Optional[Path] = None):
        self.template_dir = template_dir or Path.cwd() / "temp_charts"
        self.template_dir.mkdir(exist_ok=True)
        self._setup_fonts()
        
    def _setup_fonts(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —à—Ä–∏—Ñ—Ç—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã Windows —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π
            import os
            windows_fonts = "C:/Windows/Fonts/"
            
            # –°–ø–∏—Å–æ–∫ —à—Ä–∏—Ñ—Ç–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
            font_candidates = [
                ("arial.ttf", "Arial-Regular"),
                ("arialbd.ttf", "Arial-Bold"), 
                ("times.ttf", "Times-Regular"),
                ("timesbd.ttf", "Times-Bold"),
            ]
            
            fonts_registered = {}
            
            for font_file, font_name in font_candidates:
                font_path = os.path.join(windows_fonts, font_file)
                if os.path.exists(font_path):
                    try:
                        pdfmetrics.registerFont(TTFont(font_name, font_path))
                        fonts_registered[font_name] = True
                        print(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —à—Ä–∏—Ñ—Ç: {font_name}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ {font_name}: {e}")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, —á—Ç–æ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å
            if "Arial-Regular" in fonts_registered:
                DesignConfig.BODY_FONT = "Arial-Regular"
                DesignConfig.SMALL_FONT = "Arial-Regular"
                print("üìù –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Arial –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞")
            else:
                DesignConfig.BODY_FONT = "Times-Roman"
                DesignConfig.SMALL_FONT = "Times-Roman"
                print("üìù –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Times-Roman –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞")
            
            if "Arial-Bold" in fonts_registered:
                DesignConfig.TITLE_FONT = "Arial-Bold"
                print("üìù –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Arial-Bold –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤")
            elif "Times-Bold" in fonts_registered:
                DesignConfig.TITLE_FONT = "Times-Bold"
                print("üìù –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Times-Bold –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤")
            else:
                DesignConfig.TITLE_FONT = "Times-Bold"
                print("üìù –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π Times-Bold –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤")
                
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à—Ä–∏—Ñ—Ç–æ–≤: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã
            DesignConfig.TITLE_FONT = "Times-Bold"
            DesignConfig.BODY_FONT = "Times-Roman"
            DesignConfig.SMALL_FONT = "Times-Roman"
            print("üìù –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã Times")
    
    def _add_chart_to_story(
        self,
        story,
        chart_path: Path,
        styles,
        width: Optional[int] = None,
        height: Optional[int] = None,
    ):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–∏–∞–≥—Ä–∞–º–º—É –≤ –¥–æ–∫—É–º–µ–Ω—Ç —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏"""
        if chart_path.exists():
            try:
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∏–∞–≥—Ä–∞–º–º
                if "paei_combined" in str(chart_path) or "disc_combined" in str(chart_path):
                    chart_width = DesignConfig.PAEI_COMBINED_WIDTH
                    chart_height = DesignConfig.PAEI_COMBINED_HEIGHT
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã —è–≤–Ω–æ
                elif width is None:
                    chart_width = DesignConfig.RADAR_SIZE
                    if height is None:
                        chart_height = DesignConfig.RADAR_SIZE
                    else:
                        chart_height = height
                else:
                    chart_width = width
                    chart_height = height or DesignConfig.RADAR_SIZE
                    
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã –≤ –º–∏–ª–ª–∏–º–µ—Ç—Ä—ã
                img = Image(str(chart_path), width=chart_width*mm, height=chart_height*mm)
                img.hAlign = 'CENTER'
                story.append(img)
                story.append(Spacer(1, 3*mm))  # —É–º–µ–Ω—å—à–µ–Ω —Å 5–º–º –¥–æ 3–º–º
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã {chart_path}: {e}")
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä
                story.append(Paragraph(f"[–î–∏–∞–≥—Ä–∞–º–º–∞: {chart_path.name}]", styles['Body']))
                story.append(Spacer(1, 3*mm))  # —É–º–µ–Ω—å—à–µ–Ω —Å 5–º–º –¥–æ 3–º–º

    def _create_doc_template(self, target) -> SimpleDocTemplate:
        """–°–æ–∑–¥–∞—ë—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è ReportLab."""
        return SimpleDocTemplate(
            target,
            pagesize=A4,
            rightMargin=DesignConfig.MARGIN * mm,
            leftMargin=DesignConfig.MARGIN * mm,
            topMargin=DesignConfig.MARGIN * mm,
            bottomMargin=DesignConfig.MARGIN * mm,
        )

    def _count_story_pages(self, story) -> int:
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü, –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞—è —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫."""
        temp_buffer = BytesIO()
        temp_doc = self._create_doc_template(temp_buffer)
        temp_doc.build(deepcopy(story))
        return temp_doc.page

    def _draw_page_number(self, canvas_obj, total_pages: int) -> None:
        """–†–∏—Å—É–µ—Ç –Ω—É–º–µ—Ä–∞—Ü–∏—é —Å—Ç—Ä–∞–Ω–∏—Ü –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–°—Ç—Ä. X –∏–∑ N'."""
        canvas_obj.saveState()
        canvas_obj.setFont(DesignConfig.BODY_FONT, 10)
        page_num = canvas_obj.getPageNumber()
        text = f"–°—Ç—Ä. {page_num} –∏–∑ {total_pages}"
        canvas_obj.drawRightString(
            A4[0] - DesignConfig.MARGIN * mm,
            A4[1] - DesignConfig.MARGIN * mm + 5,
            text,
        )
        canvas_obj.restoreState()
    
    def _generate_dynamic_interpretations(self, paei_scores: Dict[str, float], 
                                        disc_scores: Dict[str, float],
                                        hexaco_scores: Dict[str, float], 
                                        soft_skills_scores: Dict[str, float]) -> Dict[str, str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É—è AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏ *_system_res.txt"""
        interpretations = {}
        
        print(f"[DEBUG] USE_AI_INTERPRETATIONS: {os.getenv('USE_AI_INTERPRETATIONS')}")
        print(f"[DEBUG] OPENAI_API_KEY: {'set' if os.getenv('OPENAI_API_KEY') else 'not set'}")
        print(f"[DEBUG] AI_AVAILABLE: {AI_AVAILABLE}")
        try:
            import openai
            print(f"[DEBUG] openai version: {openai.__version__}")
        except Exception as e:
            print(f"[DEBUG] openai import error: {e}")
        if AI_AVAILABLE:
            try:
                # –°–æ–∑–¥–∞–µ–º AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä
                ai = get_ai_interpreter()
                if ai:
                    print("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é AI...")
                    
                    # PAEI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Å –ø—Ä–æ–º–ø—Ç–æ–º adizes_system_res.txt
                    # –Ø–≤–Ω–æ —Ç—Ä–µ–±—É–µ–º —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –≤ —Å—Ç–∏–ª–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Ä—Ç—Ä–µ—Ç–∞
                    user_prompt = (
                        f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ PAEI: {', '.join([f'{k}: {v}' for k, v in paei_scores.items()])}\n"
                        "–°–æ—Å—Ç–∞–≤—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –≤ —Å—Ç–∏–ª–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Ä—Ç—Ä–µ—Ç–∞, –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–∞—Ö, —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â–µ–≥–æ —Å—Ç–∏–ª—è, —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω, –∑–æ–Ω —Ä–æ—Å—Ç–∞, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–æ–ª–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Ä–∞–∑–º–µ—Ç–∫—É, –∫–∞–∫ –≤ –æ–±—Ä–∞–∑—Ü–∞—Ö."
                    )
                    ai_result = ai.interpret_paei(paei_scores, dialog_context=user_prompt)
                    print("\n===== AI PAEI INTERPRETATION (DEBUG) =====\n" + ai_result + "\n==========================================\n")
                    interpretations['paei'] = ai_result
                    
                    # Soft Skills –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Å –ø—Ä–æ–º–ø—Ç–æ–º soft_system_res.txt
                    soft_skills_result = ai.interpret_soft_skills(soft_skills_scores)
                    print("\n===== AI SOFT SKILLS INTERPRETATION (DEBUG) =====\n" + soft_skills_result + "\n===============================================\n")
                    interpretations['soft_skills'] = soft_skills_result
                    
                    # HEXACO –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Å –ø—Ä–æ–º–ø—Ç–æ–º hexaco_system_res.txt
                    interpretations['hexaco'] = ai.interpret_hexaco(hexaco_scores)
                    
                    # DISC –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Å –ø—Ä–æ–º–ø—Ç–æ–º disk_system_res.txt
                    interpretations['disc'] = ai.interpret_disc(disc_scores)
                    
                    print("‚úÖ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
                    return interpretations
                    
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏: {e}")
        
        print("üìù –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ generate_interpretations_from_prompt...")
        try:
            interpretations = generate_interpretations_from_prompt(
                paei_scores, disc_scores, hexaco_scores, soft_skills_scores
            )
            print("‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ —á–µ—Ä–µ–∑ generate_interpretations_from_prompt")
            return interpretations
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏: {e}")
            # –ï—Å–ª–∏ –≤—Å—ë —Å–æ–≤—Å–µ–º –ø–ª–æ—Ö–æ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            interpretations = {
                'paei': '',
                'soft_skills': '',
                'hexaco': '',
                'disc': ''
            }
            return interpretations

    def _format_scores_detailed(self, scores: Dict[str, float]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É"""
        return "\n".join([f"‚Ä¢ {k}: {v} –±–∞–ª–ª–æ–≤" for k, v in scores.items()])

    def _build_story(
        self,
        participant_name: str,
        test_date: str,
        paei_scores: Dict[str, float],
        disc_scores: Dict[str, float],
        hexaco_scores: Dict[str, float],
        soft_skills_scores: Dict[str, float],
        ai_interpretations: Dict[str, str],
        chart_paths: Dict[str, Path],
    ):
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ—Ç—á—ë—Ç–∞ (story)."""
        styles = self._get_custom_styles()
        story = []

        # === –ó–ê–ì–û–õ–û–í–û–ö –î–û–ö–£–ú–ï–ù–¢–ê ===
        story.append(Paragraph("–û–¶–ï–ù–ö–ê –ö–û–ú–ê–ù–î–ù–´–• –ù–ê–í–´–ö–û–í", styles['MainTitle']))
        story.append(Spacer(1, 1 * mm))

        # === –ò–ú–Ø –£–ß–ê–°–¢–ù–ò–ö–ê (–ü–û –¶–ï–ù–¢–†–£, —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç) ===
        if participant_name.strip():
            story.append(Paragraph(participant_name, styles['ParticipantName']))
            story.append(Spacer(1, 1 * mm))

        # === –î–ê–¢–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===
        date_text = f"–î–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {test_date}"
        story.append(Paragraph(date_text, styles['Body']))
        story.append(Spacer(1, 2 * mm))

        # === –û–ë–©–ï–ï –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ===
        story.append(Paragraph("–û–ë–©–ï–ï –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò", styles['SectionTitle']))
        story.append(Spacer(1, 2 * mm))

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–µ —á–µ—Ä—Ç—ã –¥–ª—è –∑–∞–∫–ª—é—á–µ–Ω–∏—è
        max_paei = max(paei_scores, key=lambda k: paei_scores[k])
        max_disc = max(disc_scores, key=lambda k: disc_scores[k])
        max_hexaco = max(hexaco_scores, key=lambda k: hexaco_scores[k])
        max_soft = max(soft_skills_scores, key=lambda k: soft_skills_scores[k])

        paei_names = {"P": "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å", "A": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "E": "–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å", "I": "–ò–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä"}
        disc_names = {"D": "–î–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "I": "–í–ª–∏—è–Ω–∏–µ", "S": "–ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ", "C": "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ"}

        # –°–∏–Ω—Ç–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        synthesis_text = f"""
        –ù–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ <b>{participant_name}</b> 
        –ø—Ä–æ–≤–µ–¥–µ–Ω –∞–Ω–∞–ª–∏–∑ —É–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–æ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞, –ª–∏—á–Ω–æ—Å—Ç–Ω—ã—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π, –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏—Ö —Å—Ç–∏–ª–µ–π 
        –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∑–≤–æ–ª—è—é—Ç —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ 
        –æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º –ø—Ä–æ—Ñ–∏–ª–µ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–µ —Ä–∞–∑–≤–∏—Ç–∏—è.
        """
        story.append(Paragraph(synthesis_text, styles['Body']))
        story.append(Spacer(1, 3 * mm))  # —É–º–µ–Ω—å—à–µ–Ω –æ—Ç—Å—Ç—É–ø —Å 5–º–º –¥–æ 3–º–º

        # –°–≤–æ–¥–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º –∏ –º–µ—Ç–æ–¥–∏–∫–∞–º
        story.append(Paragraph("<b>–ö–ª—é—á–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥–∏–∫–∏:</b>", styles['SubTitle']))

        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –º–µ—Ç–æ–¥–∏–∫
        story.append(Paragraph("<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>", styles['Body']))
        bullet_items = [
            f"<b>–¢–µ—Å—Ç –ê–¥–∏–∑–µ—Å–∞ (PAEI)</b> - –æ—Ü–µ–Ω–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏—Ö —Ä–æ–ª–µ–π –∏ —Å—Ç–∏–ª–µ–π —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ (5 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ 4 —Ç–∏–ø–∞–º). –ü—Ä–µ–æ–±–ª–∞–¥–∞–µ—Ç —Ä–æ–ª—å {paei_names.get(max_paei, max_paei)} - {paei_scores[max_paei]} –±–∞–ª–ª–æ–≤",
            f"<b>–û—Ü–µ–Ω–∫–∞ Soft Skills</b> - –∞–Ω–∞–ª–∏–∑ –Ω–∞–¥–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π (10 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ 10-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ). –ù–∞–∏–±–æ–ª–µ–µ —Ä–∞–∑–≤–∏—Ç—ã–π –Ω–∞–≤—ã–∫: {max_soft} - {soft_skills_scores[max_soft]} –±–∞–ª–ª–æ–≤",
            f"<b>HEXACO</b> - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —à–µ—Å—Ç–∏—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –º–æ–¥–µ–ª—å –ª–∏—á–Ω–æ—Å—Ç–∏ (10 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ 5-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ). –í—ã—Ä–∞–∂–µ–Ω–Ω–∞—è –ª–∏—á–Ω–æ—Å—Ç–Ω–∞—è —á–µ—Ä—Ç–∞: {max_hexaco} ({hexaco_scores[max_hexaco]} –±–∞–ª–ª–æ–≤)",
            f"<b>DISC</b> - –º–µ—Ç–æ–¥–∏–∫–∞ –æ—Ü–µ–Ω–∫–∏ –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –∏ —Å—Ç–∏–ª–µ–π (8 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ 4 —Ç–∏–ø–∞–º). {disc_names.get(max_disc, max_disc)} ({disc_scores[max_disc]} –±–∞–ª–ª–æ–≤)",
        ]
        for item in bullet_items:
            story.append(Paragraph(item, style=styles['ListWithIndent'], bulletText='‚Ä¢'))
        story.append(Spacer(1, 2 * mm))

        # –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        story.append(Paragraph("<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º—É —Ä–∞–∑–≤–∏—Ç–∏—é:</b>", styles['SubTitle']))

        # 1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω
        story.append(Paragraph("<b>1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω:</b>", styles['Body']))
        story.append(Paragraph(f"‚Ä¢ (PAEI): –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ñ–∏–ª—é {paei_names.get(max_paei, max_paei)}", styles['ListWithIndent']))
        story.append(Paragraph(f"‚Ä¢ (Soft Skills): –†–∞–∑–≤–∏–≤–∞—Ç—å {max_soft.lower()} —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã", styles['ListWithIndent']))
        story.append(Paragraph(f"‚Ä¢ (DISC): –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å {disc_names.get(max_disc, max_disc)} –≤ –∫–æ–º–∞–Ω–¥–Ω–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏", styles['ListWithIndent']))
        story.append(Spacer(1, 2 * mm))

        # 2. –û–±–ª–∞—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è
        story.append(Paragraph("<b>2. –û–±–ª–∞—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è:</b>", styles['Body']))
        story.append(Paragraph("‚Ä¢ (PAEI): –†–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ –º–µ–Ω–µ–µ –≤—ã—Ä–∞–∂–µ–Ω–Ω—ã–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏–º–∏ —Ä–æ–ª—è–º–∏", styles['ListWithIndent']))
        story.append(Paragraph("‚Ä¢ (Soft Skills): –†–∞–∑–≤–∏–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ soft skills –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç–∏ [–ø–æ–∏—Å–∫ –∫—É—Ä—Å–æ–≤ –≤ Google]", styles['ListWithIndent']))
        story.append(Paragraph("‚Ä¢ (DISC): –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏—Ç—É–∞—Ü–∏–∏", styles['ListWithIndent']))
        story.append(Spacer(1, 2 * mm))

        # 3. –ö–∞—Ä—å–µ—Ä–Ω—ã–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã
        story.append(Paragraph("<b>3. –ö–∞—Ä—å–µ—Ä–Ω—ã–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã:</b>", styles['Body']))
        story.append(Paragraph(f"‚Ä¢ (PAEI): –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∑–∏—Ü–∏–∏, —Ç—Ä–µ–±—É—é—â–∏–µ –∫–∞—á–µ—Å—Ç–≤ {paei_names.get(max_paei, max_paei)}", styles['ListWithIndent']))
        story.append(Paragraph("‚Ä¢ (HEXACO): –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–≤–∏—Ç–∏–µ —Å —É—á–µ—Ç–æ–º –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è HEXACO", styles['ListWithIndent']))
        story.append(Paragraph("‚Ä¢ (DISC): –í—ã—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É —Å —É—á–µ—Ç–æ–º –∫–æ–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω—ã—Ö —Ä–æ–ª–µ–π –ø–æ DISC", styles['ListWithIndent']))
        story.append(Spacer(1, 6 * mm))  # —É–º–µ–Ω—å—à–µ–Ω –æ—Ç—Å—Ç—É–ø —Å 10–º–º –¥–æ 6–º–º

        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –¥–µ—Ç–∞–ª—å–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∞–º
        story.append(PageBreak())

        # === 1. –¢–ï–°–¢ –ê–î–ò–ó–ï–°–ê (PAEI) ===
        story.append(Paragraph("1. –¢–ï–°–¢ –ê–î–ò–ó–ï–°–ê (PAEI) - –£–ü–†–ê–í–õ–ï–ù–ß–ï–°–ö–ò–ï –†–û–õ–ò", styles['SectionTitle']))

        test_description = "–¢–µ—Å—Ç –ê–¥–∏–∑–µ—Å–∞ (PAEI) - –æ—Ü–µ–Ω–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏—Ö —Ä–æ–ª–µ–π –∏ —Å—Ç–∏–ª–µ–π —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ (5 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ 4 —Ç–∏–ø–∞–º)."
        story.append(Paragraph(test_description, styles['Body']))
        story.append(Spacer(1, 3 * mm))

        story.append(Paragraph("<b>–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ PAEI:</b>", styles['Body']))
        paei_bullets = [
            f"<b>P (Producer - –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å)</b> - –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–π: {paei_scores.get('P', '')} –±–∞–ª–ª–æ–≤",
            f"<b>A (Administrator - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)</b> - –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –∫–æ–Ω—Ç—Ä–æ–ª—å, —Å–∏—Å—Ç–µ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã: {paei_scores.get('A', '')} –±–∞–ª–ª–æ–≤.",
            f"<b>E (Entrepreneur - –ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å)</b> - –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏, —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ, –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å: {paei_scores.get('E', '')} –±–∞–ª–ª–æ–≤.",
            f"<b>I (Integrator - –ò–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä)</b> - –∫–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞, –º–æ—Ç–∏–≤–∞—Ü–∏—è –ª—é–¥–µ–π, —Å–æ–∑–¥–∞–Ω–∏–µ –µ–¥–∏–Ω—Å—Ç–≤–∞: {paei_scores.get('I', '')} –±–∞–ª–ª–æ–≤.",
        ]
        for item in paei_bullets:
            story.append(Paragraph(item, style=styles['ListWithIndent'], bulletText='‚Ä¢'))
        story.append(Spacer(1, 5 * mm))

        if 'paei' in chart_paths:
            self._add_chart_to_story(story, chart_paths['paei'], styles)

        if 'paei' in ai_interpretations:
            story.append(Paragraph("<b>–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:</b>", styles['SubTitle']))
            paei_text = ai_interpretations['paei'].replace('\n', '<br/>')
            story.append(Paragraph(paei_text, styles['Body']))
        story.append(Spacer(1, 6 * mm))

        # === 2. SOFT SKILLS - –ú–Ø–ì–ö–ò–ï –ù–ê–í–´–ö–ò ===
        story.append(Paragraph("2. SOFT SKILLS - –û–¶–ï–ù–ö–ê –ú–Ø–ì–ö–ò–• –ù–ê–í–´–ö–û–í", styles['SectionTitle']))

        test_description = "–û—Ü–µ–Ω–∫–∞ Soft Skills - –∞–Ω–∞–ª–∏–∑ –Ω–∞–¥–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π (10 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ 10-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ)."
        story.append(Paragraph(test_description, styles['Body']))
        story.append(Spacer(1, 3 * mm))

        soft_description = """
        <b>Soft Skills</b> - —ç—Ç–æ –Ω–∞–¥–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥–∞—é—Ç —Ä–µ—à–∞—Ç—å –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ –∏ —Ä–∞–±–æ—á–∏–µ –∑–∞–¥–∞—á–∏ 
        –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏. –í–∫–ª—é—á–∞—é—Ç –∫–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏, –ª–∏–¥–µ—Ä—Å–∫–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞, –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å, 
        –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å. –≠—Ç–∏ –Ω–∞–≤—ã–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ª—é–¥—å–º–∏ 
        –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º—É —Ä–æ—Å—Ç—É –≤ –ª—é–±–æ–π —Å—Ñ–µ—Ä–µ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
        """
        story.append(Paragraph(soft_description, styles['Body']))
        story.append(Spacer(1, 5 * mm))

        soft_results = f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b> {self._format_scores(soft_skills_scores)}"
        story.append(Paragraph(soft_results, styles['Body']))
        story.append(Spacer(1, 3 * mm))

        if 'soft_skills' in chart_paths:
            self._add_chart_to_story(story, chart_paths['soft_skills'], styles)

        if 'soft_skills' in ai_interpretations:
            story.append(Paragraph("<b>–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:</b>", styles['SubTitle']))
            story.append(Paragraph(ai_interpretations['soft_skills'], styles['Body']))

        story.append(Spacer(1, 4 * mm))

        # === 3. –¢–ï–°–¢ HEXACO - –õ–ò–ß–ù–û–°–¢–ù–´–ï –ß–ï–†–¢–´ ===
        story.append(Paragraph("3. –¢–ï–°–¢ HEXACO - –ú–û–î–ï–õ–¨ –õ–ò–ß–ù–û–°–¢–ò", styles['SectionTitle']))

        test_description = "HEXACO - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —à–µ—Å—Ç–∏—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –º–æ–¥–µ–ª—å –ª–∏—á–Ω–æ—Å—Ç–∏ (10 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ 5-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ)."
        story.append(Paragraph(test_description, styles['Body']))
        story.append(Spacer(1, 3 * mm))

        hexaco_description = """
        <b>HEXACO</b> - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —à–µ—Å—Ç–∏—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –º–æ–¥–µ–ª—å –ª–∏—á–Ω–æ—Å—Ç–∏, –≤–∫–ª—é—á–∞—é—â–∞—è –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è:<br/>
        ‚Ä¢ <b>H (Honesty-Humility)</b> - —á–µ—Å—Ç–Ω–æ—Å—Ç—å, —Å–∫—Ä–æ–º–Ω–æ—Å—Ç—å, –∏—Å–∫—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö<br/>
        ‚Ä¢ <b>E (Emotionality)</b> - —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å, —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —ç–º–ø–∞—Ç–∏—è<br/>
        ‚Ä¢ <b>X (eXtraversion)</b> - —ç–∫—Å—Ç—Ä–∞–≤–µ—Ä—Å–∏—è, —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –æ–±—â–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å<br/>
        ‚Ä¢ <b>A (Agreeableness)</b> - –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ, —Ç–µ—Ä–ø–∏–º–æ—Å—Ç—å<br/>
        ‚Ä¢ <b>C (Conscientiousness)</b> - –¥–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω–æ—Å—Ç—å, –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω–æ—Å—Ç—å, –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞<br/>
        ‚Ä¢ <b>O (Openness)</b> - –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å –æ–ø—ã—Ç—É, –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å, –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        """
        story.append(Paragraph(hexaco_description, styles['Body']))
        story.append(Spacer(1, 5 * mm))

        hexaco_results = f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b> {self._format_scores(hexaco_scores)}"
        story.append(Paragraph(hexaco_results, styles['Body']))
        story.append(Spacer(1, 3 * mm))

        if 'hexaco' in chart_paths:
            self._add_chart_to_story(story, chart_paths['hexaco'], styles)

        if 'hexaco' in ai_interpretations:
            story.append(Paragraph("<b>–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:</b>", styles['SubTitle']))
            story.append(Paragraph(ai_interpretations['hexaco'], styles['Body']))
        story.append(Spacer(1, 4 * mm))

        # === 4. –¢–ï–°–¢ DISC - –ü–û–í–ï–î–ï–ù–ß–ï–°–ö–ò–ï –°–¢–ò–õ–ò ===
        story.append(Paragraph("4. –¢–ï–°–¢ DISC - –ú–û–î–ï–õ–¨ –ü–û–í–ï–î–ï–ù–ò–Ø", styles['SectionTitle']))

        test_description = "DISC - –º–µ—Ç–æ–¥–∏–∫–∞ –æ—Ü–µ–Ω–∫–∏ –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –∏ —Å—Ç–∏–ª–µ–π (8 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ 4 —Ç–∏–ø–∞–º)."
        story.append(Paragraph(test_description, styles['Body']))
        story.append(Spacer(1, 3 * mm))

        disc_description = """
        <b>DISC</b> - –º–µ—Ç–æ–¥–∏–∫–∞ –æ—Ü–µ–Ω–∫–∏ –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –∏ —Å—Ç–∏–ª–µ–π –æ–±—â–µ–Ω–∏—è:<br/>
        ‚Ä¢ <b>D (Dominance)</b> - –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø—Ä—è–º–æ—Ç–∞, —Ä–µ—à–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç<br/>
        ‚Ä¢ <b>I (Influence)</b> - –≤–ª–∏—è–Ω–∏–µ, –æ–±—â–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –æ–ø—Ç–∏–º–∏–∑–º, –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –Ω–∞ –ª—é–¥–µ–π<br/>
        ‚Ä¢ <b>S (Steadiness)</b> - –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ, —Ç–µ—Ä–ø–µ–Ω–∏–µ, –∫–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞, —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å<br/>
        ‚Ä¢ <b>C (Compliance)</b> - —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º, –∞–Ω–∞–ª–∏—Ç–∏—á–Ω–æ—Å—Ç—å, —Ç–æ—á–Ω–æ—Å—Ç—å, –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å
        """
        story.append(Paragraph(disc_description, styles['Body']))
        story.append(Spacer(1, 5 * mm))

        disc_results = f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b> {self._format_scores(disc_scores)}"
        story.append(Paragraph(disc_results, styles['Body']))
        story.append(Spacer(1, 3 * mm))

        if 'disc' in chart_paths:
            self._add_chart_to_story(story, chart_paths['disc'], styles)

        if 'disc' in ai_interpretations:
            story.append(Paragraph("<b>–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:</b>", styles['SubTitle']))
            story.append(Paragraph(ai_interpretations['disc'], styles['Body']))
        story.append(Spacer(1, 4 * mm))

        return story

    def generate_enhanced_report(self, 
                               participant_name: str,
                               test_date: str,
                               paei_scores: Dict[str, float],
                               disc_scores: Dict[str, float], 
                               hexaco_scores: Dict[str, float],
                               soft_skills_scores: Dict[str, float],
                               ai_interpretations: Optional[Dict[str, str]],
                               out_path: Path) -> Tuple[Path, Optional[str]]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π PDF –æ—Ç—á—ë—Ç —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏"""
        prepared_interpretations = dict(ai_interpretations or {})
        expected_keys = {'paei', 'disc', 'hexaco', 'soft_skills'}
        missing_keys = expected_keys - set(prepared_interpretations)
        if missing_keys:
            generated = self._generate_dynamic_interpretations(
                paei_scores, disc_scores, hexaco_scores, soft_skills_scores
            )
            prepared_interpretations = {**generated, **prepared_interpretations}

        chart_paths = self._create_all_charts(
            paei_scores,
            disc_scores,
            hexaco_scores,
            soft_skills_scores,
        )

        story = self._build_story(
            participant_name,
            test_date,
            paei_scores,
            disc_scores,
            hexaco_scores,
            soft_skills_scores,
            prepared_interpretations,
            chart_paths,
        )

        total_pages = self._count_story_pages(story)
        doc = self._create_doc_template(str(out_path))

        def _draw_page(canvas_obj, _doc):
            self._draw_page_number(canvas_obj, total_pages)

        doc.build(story, onFirstPage=_draw_page, onLaterPages=_draw_page)
        return out_path, None
    
    def _create_all_charts(self, paei_scores: Dict, disc_scores: Dict, 
                         hexaco_scores: Dict, soft_skills_scores: Dict) -> Dict[str, Path]:
        """–°–æ–∑–¥–∞—ë—Ç –≤—Å–µ —Ä–∞–¥–∞—Ä–Ω—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –¥–ª—è –æ—Ç—á–µ—Ç–∞"""
        charts = {}
        
        # PAEI –¥–∏–∞–≥—Ä–∞–º–º–∞ (–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è - —Å—Ç–æ–ª–±–∏–∫–æ–≤–∞—è + –∫—Ä—É–≥–æ–≤–∞—è)
        paei_labels = list(paei_scores.keys())
        paei_values = list(paei_scores.values())
        paei_path = self.template_dir / "paei_combined.png"
        EnhancedCharts.create_paei_combined_chart(paei_labels, paei_values, 
                                                "PAEI (–ê–¥–∏–∑–µ—Å) - –£–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏–µ —Ä–æ–ª–∏", paei_path)
        charts['paei'] = paei_path
        
        # Soft Skills –¥–∏–∞–≥—Ä–∞–º–º–∞ (—Ä–∞–¥–∞—Ä–Ω–∞—è)
        # –ñ—ë—Å—Ç–∫–æ –∑–∞–¥–∞—ë–º –ø–æ—Ä—è–¥–æ–∫ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è soft skills –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã, —á—Ç–æ–±—ã —Å–æ–≤–ø–∞–¥–∞–ª–æ —Å skills_mapping
        soft_labels = [
            "–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è",
            "–†–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ",
            "–õ–∏–¥–µ—Ä—Å—Ç–≤–æ",
            "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ",
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–µ–º",
            "–°—Ç—Ä–µ—Å—Å–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å",
            "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç",
            "–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å",
            "–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º",
            "–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å"
        ]
        soft_values = list(soft_skills_scores.values())
        soft_radar_path = self.template_dir / "soft_skills_radar.png"
        EnhancedCharts.create_minimalist_radar(soft_labels, soft_values,
                                             "Soft Skills", soft_radar_path)
        charts['soft_skills'] = soft_radar_path
        
        # HEXACO –¥–∏–∞–≥—Ä–∞–º–º–∞ (—Ä–∞–¥–∞—Ä–Ω–∞—è —Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞–º–∏)
        hexaco_labels = list(hexaco_scores.keys())
        hexaco_values = list(hexaco_scores.values())
        hexaco_path = self.template_dir / "hexaco_radar.png"
        EnhancedCharts.create_hexaco_radar(hexaco_labels, hexaco_values,
                                         "HEXACO", hexaco_path)
        charts['hexaco'] = hexaco_path
        
        # DISC –¥–∏–∞–≥—Ä–∞–º–º–∞ (–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è - —Å—Ç–æ–ª–±–∏–∫–æ–≤–∞—è + –∫—Ä—É–≥–æ–≤–∞—è)  
        disc_labels = list(disc_scores.keys())
        disc_values = list(disc_scores.values())
        disc_path = self.template_dir / "disc_combined.png"
        EnhancedCharts.create_disc_combined_chart(disc_labels, disc_values,
                                                "DISC - –ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ —Å—Ç–∏–ª–∏", disc_path)
        charts['disc'] = disc_path
        
        return charts
    
    def _get_custom_styles(self):
        """–°–æ–∑–¥–∞—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å—Ç–∏–ª–∏"""
        styles = getSampleStyleSheet()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        styles.add(ParagraphStyle(
            name='MainTitle',
            parent=styles['Title'],
            fontSize=DesignConfig.TITLE_SIZE,
            fontName=DesignConfig.TITLE_FONT,
            textColor=DesignConfig.PRIMARY_COLOR,
            alignment=1,  # CENTER
            spaceAfter=6,
        ))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
        styles.add(ParagraphStyle(
            name='SectionTitle',
            parent=styles['Heading2'],
            fontSize=12,
            fontName=DesignConfig.TITLE_FONT,
            textColor=DesignConfig.PRIMARY_COLOR,
            spaceBefore=6,
            spaceAfter=3,
        ))
        
        # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
        styles.add(ParagraphStyle(
            name='SubTitle',
            parent=styles['Heading3'],
            fontSize=11,
            fontName=DesignConfig.TITLE_FONT,
            textColor=DesignConfig.PRIMARY_COLOR,
            spaceBefore=4,
            spaceAfter=2,
        ))
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
        styles.add(ParagraphStyle(
            name='Body',
            parent=styles['Normal'],
            fontSize=DesignConfig.BODY_SIZE,
            fontName=DesignConfig.BODY_FONT,
            textColor=DesignConfig.TEXT_COLOR,
            spaceAfter=4,
            leading=14,  # –±—ã–ª–æ 12, —É–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        ))
        
        # –ò–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ (—É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç, –ø–æ —Ü–µ–Ω—Ç—Ä—É)
        styles.add(ParagraphStyle(
            name='ParticipantName',
            parent=styles['Normal'],
            fontSize=12,  # —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç
            fontName=DesignConfig.TITLE_FONT,
            textColor=DesignConfig.PRIMARY_COLOR,
            alignment=1,  # CENTER
            spaceAfter=1,
            spaceBefore=1,
        ))
        
        # –°—Ç–∏–ª—å –¥–ª—è —Å–ø–∏—Å–∫–æ–≤ —Å –æ—Ç—Å—Ç—É–ø–æ–º (–∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ)
        styles.add(ParagraphStyle(
            name='ListWithIndent',
            parent=styles['Normal'],
            fontSize=DesignConfig.BODY_SIZE,
            fontName=DesignConfig.BODY_FONT,
            textColor=DesignConfig.TEXT_COLOR,
            leftIndent=15,  # –æ—Ç—Å—Ç—É–ø —Å–ª–µ–≤–∞ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞
            spaceAfter=2,
            leading=14,
        ))
        
        return styles
    
    def _format_scores(self, scores: Dict[str, float]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —á–∏—Ç–∞–µ–º—É—é —Å—Ç—Ä–æ–∫—É"""
        return ", ".join([f"{k}: {v}" for k, v in scores.items()])
    
    def upload_to_google_drive(self, file_path: Path, participant_name: Optional[str] = None) -> Optional[str]:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ PDF –≤ Google Drive (–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å oauth_google_drive.py)
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            participant_name: –ò–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
            
        Returns:
            Optional[str]: –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª –≤ Google Drive –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            from oauth_google_drive import upload_to_google_drive_oauth
            
            print(f"üì§ –ó–∞–≥—Ä—É–∑–∫–∞ PDF –æ—Ç—á–µ—Ç–∞ –≤ Google Drive: {participant_name or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å –º–µ—Å—è—á–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –ø–∞–ø–æ–∫: PsychTest Reports/2025/10-October
            web_link = upload_to_google_drive_oauth(
                file_path=str(file_path),
                folder_name="PsychTest Reports",
                use_monthly_structure=True
            )
            
            if web_link:
                print(f"üéâ PDF —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Google Drive!")
                print(f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {web_link}")
                return web_link
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å PDF –≤ Google Drive")
                return None
                
        except ImportError:
            print("‚ö†Ô∏è Google Drive –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç oauth_google_drive)")
            return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Google Drive: {e}")
            return None
    
    def generate_enhanced_report_with_gdrive(self, 
                                           participant_name: str,
                                           test_date: str,
                                           paei_scores: Dict[str, float],
                                           disc_scores: Dict[str, float], 
                                           hexaco_scores: Dict[str, float],
                                           soft_skills_scores: Dict[str, float],
                                           ai_interpretations: Dict[str, str],
                                           out_path: Path,
                                           upload_to_gdrive: bool = True) -> Tuple[Path, Optional[str]]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PDF –æ—Ç—á—ë—Ç –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤ Google Drive
        
        Returns:
            Tuple[Path, Optional[str]]: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ Google Drive (–µ—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω)
        """
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–π –æ—Ç—á–µ—Ç
        pdf_result = self.generate_enhanced_report(
            participant_name, test_date, paei_scores, disc_scores,
            hexaco_scores, soft_skills_scores, ai_interpretations, out_path
        )
        
        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        pdf_path, existing_gdrive_link = pdf_result
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Google Drive –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
        gdrive_link = existing_gdrive_link
        if upload_to_gdrive and not existing_gdrive_link:
            gdrive_link = self.upload_to_google_drive(pdf_path, participant_name)
        
        return pdf_path, gdrive_link
