#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è PDF –æ—Ç—á—ë—Ç–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
–í–µ—Ä—Å–∏—è 2.0 —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é —Ç–µ—Å—Ç–æ–≤
"""

from pathlib import Path
from typing import Dict, List, Tuple, Optional
from io import BytesIO
from copy import deepcopy
import matplotlib.pyplot as plt
import matplotlib.patches as patches
from reportlab.lib.pagesizes import A4
from reportlab.lib.units import mm, cm
from reportlab.pdfgen import canvas
from reportlab.lib.colors import Color, black, white
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.platypus import PageBreak, KeepTogether, Image
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from datetime import datetime
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(str(Path(__file__).parent / "src"))

try:
    from src.psytest.ai_interpreter import get_ai_interpreter
    AI_AVAILABLE = True
except ImportError:
    AI_AVAILABLE = False
    print("‚ö†Ô∏è AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏")
import numpy as np

from src.psytest.charts import make_radar, make_bar_chart

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞
class DesignConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–∏–∑–∞–π–Ω–∞ –¥–ª—è –ø–µ—á–∞—Ç–∏"""
    
    # –¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —á/–± –ø–µ—á–∞—Ç–∏)
    PRIMARY_COLOR = Color(0.18, 0.25, 0.34)      # #2E4057 —Ç—ë–º–Ω–æ-—Å–∏–Ω–∏–π
    ACCENT_COLOR = Color(0.29, 0.56, 0.72)       # #4A90B8 —Å–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π  
    TEXT_COLOR = Color(0.17, 0.17, 0.17)         # #2C2C2C —Ç—ë–º–Ω–æ-—Å–µ—Ä—ã–π
    LIGHT_GRAY = Color(0.9, 0.9, 0.9)            # #E6E6E6 —Å–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π
    WHITE = Color(1, 1, 1)                        # #FFFFFF –±–µ–ª—ã–π
    
    # –†–∞–∑–º–µ—Ä—ã (–≤ –º–º)
    PAGE_WIDTH = 210
    PAGE_HEIGHT = 297
    MARGIN = 20
    
    # –†–∞–∑–º–µ—Ä—ã –≥—Ä–∞—Ñ–∏–∫–æ–≤ (–≤ –º–º) - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ —Å —Ç–µ–∫—Å—Ç–æ–º
    RADAR_SIZE = 100  # –±—ã–ª–æ 120, —É–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
    BAR_CHART_WIDTH = 160
    BAR_CHART_HEIGHT = 80  # –±—ã–ª–æ 60
    
    # –®—Ä–∏—Ñ—Ç—ã (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ Unicode —à—Ä–∏—Ñ—Ç—ã)
    TITLE_FONT = "Times-Bold"
    BODY_FONT = "Times-Roman"
    SMALL_FONT = "Times-Roman"
    
    TITLE_SIZE = 14
    BODY_SIZE = 11  # –±—ã–ª–æ 10, —É–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    SMALL_SIZE = 9   # –±—ã–ª–æ 8


class EnhancedCharts:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –¥–∏–∞–≥—Ä–∞–º–º"""
    
    @staticmethod
    def create_minimalist_radar(labels: List[str], values: List[float], 
                               title: str, out_path: Path) -> Path:
        """–°–æ–∑–¥–∞—ë—Ç –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—É—é —Ä–∞–¥–∞—Ä–Ω—É—é –¥–∏–∞–≥—Ä–∞–º–º—É"""
        return make_radar(labels, values, out_path, title=title, max_value=10)
    
    @staticmethod
    def create_minimalist_bar_chart(labels: List[str], values: List[float],
                                   title: str, out_path: Path) -> Path:
        """–°–æ–∑–¥–∞—ë—Ç –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—É—é —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É"""
        return make_bar_chart(labels, values, out_path, title=title, max_value=10)


class EnhancedPDFReportV2:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω—ã—Ö PDF –æ—Ç—á—ë—Ç–æ–≤ –≤–µ—Ä—Å–∏–∏ 2.0"""
    
    def __init__(self, template_dir: Optional[Path] = None):
        self.template_dir = template_dir or Path.cwd() / "temp_charts"
        self.template_dir.mkdir(exist_ok=True)
        self._setup_fonts()
        
    def _setup_fonts(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —à—Ä–∏—Ñ—Ç—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã Windows —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π
            import os
            windows_fonts = "C:/Windows/Fonts/"
            
            # –°–ø–∏—Å–æ–∫ —à—Ä–∏—Ñ—Ç–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
            font_candidates = [
                ("arial.ttf", "Arial-Regular"),
                ("arialbd.ttf", "Arial-Bold"), 
                ("times.ttf", "Times-Regular"),
                ("timesbd.ttf", "Times-Bold"),
            ]
            
            fonts_registered = {}
            
            for font_file, font_name in font_candidates:
                font_path = os.path.join(windows_fonts, font_file)
                if os.path.exists(font_path):
                    try:
                        pdfmetrics.registerFont(TTFont(font_name, font_path))
                        fonts_registered[font_name] = True
                        print(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —à—Ä–∏—Ñ—Ç: {font_name}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ {font_name}: {e}")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, —á—Ç–æ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å
            if "Arial-Regular" in fonts_registered:
                DesignConfig.BODY_FONT = "Arial-Regular"
                DesignConfig.SMALL_FONT = "Arial-Regular"
                print("üìù –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Arial –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞")
            else:
                DesignConfig.BODY_FONT = "Times-Roman"
                DesignConfig.SMALL_FONT = "Times-Roman"
                print("üìù –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Times-Roman –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞")
            
            if "Arial-Bold" in fonts_registered:
                DesignConfig.TITLE_FONT = "Arial-Bold"
                print("üìù –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Arial-Bold –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤")
            elif "Times-Bold" in fonts_registered:
                DesignConfig.TITLE_FONT = "Times-Bold"
                print("üìù –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Times-Bold –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤")
            else:
                DesignConfig.TITLE_FONT = "Times-Bold"
                print("üìù –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π Times-Bold –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤")
                
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à—Ä–∏—Ñ—Ç–æ–≤: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã
            DesignConfig.TITLE_FONT = "Times-Bold"
            DesignConfig.BODY_FONT = "Times-Roman"
            DesignConfig.SMALL_FONT = "Times-Roman"
            print("üìù –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã Times")
    
    def _add_chart_to_story(self, story, chart_path: Path, width: int = None, height: int = None):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–∏–∞–≥—Ä–∞–º–º—É –≤ –¥–æ–∫—É–º–µ–Ω—Ç —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏"""
        if chart_path.exists():
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã —è–≤–Ω–æ
                if width is None:
                    width = DesignConfig.RADAR_SIZE
                if height is None:
                    height = DesignConfig.RADAR_SIZE
                    
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã –≤ –º–∏–ª–ª–∏–º–µ—Ç—Ä—ã
                img = Image(str(chart_path), width=width*mm, height=height*mm)
                img.hAlign = 'CENTER'
                story.append(img)
                story.append(Spacer(1, 5*mm))
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã {chart_path}: {e}")
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä
                story.append(Paragraph(f"[–î–∏–∞–≥—Ä–∞–º–º–∞: {chart_path.name}]", self._get_custom_styles()['Body']))
                story.append(Spacer(1, 5*mm))
    
    def _generate_dynamic_interpretations(self, paei_scores: Dict[str, float], 
                                        disc_scores: Dict[str, float],
                                        hexaco_scores: Dict[str, float], 
                                        soft_skills_scores: Dict[str, float]) -> Dict[str, str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É—è AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏ *_system_res.txt"""
        interpretations = {}
        
        if AI_AVAILABLE:
            try:
                # –°–æ–∑–¥–∞–µ–º AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä
                ai = get_ai_interpreter()
                if ai:
                    print("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é AI...")
                    
                    # PAEI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Å –ø—Ä–æ–º–ø—Ç–æ–º adizes_system_res.txt
                    interpretations['paei'] = ai.interpret_paei(paei_scores)
                    
                    # Soft Skills –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Å –ø—Ä–æ–º–ø—Ç–æ–º soft_system_res.txt  
                    interpretations['soft_skills'] = ai.interpret_soft_skills(soft_skills_scores)
                    
                    # HEXACO –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Å –ø—Ä–æ–º–ø—Ç–æ–º hexaco_system_res.txt
                    interpretations['hexaco'] = ai.interpret_hexaco(hexaco_scores)
                    
                    # DISC –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Å –ø—Ä–æ–º–ø—Ç–æ–º disk_system_res.txt
                    interpretations['disc'] = ai.interpret_disc(disc_scores)
                    
                    print("‚úÖ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
                    return interpretations
                    
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏: {e}")
        
        print("üìù –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏...")
        # Fallback –∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è–º
        try:
            # PAEI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è
            paei_text = f"""
            –ù–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ê–¥–∏–∑–µ—Å–∞ –ø–æ–ª—É—á–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:
            
            {self._format_scores_detailed(paei_scores)}
            
            –î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —Å—Ç–∏–ª—å: {max(paei_scores, key=paei_scores.get)} ({max(paei_scores.values())} –±–∞–ª–ª–æ–≤)
            
            –ê–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ/–¥–æ–º–∏–Ω–∏—Ä—É—é—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏—Ö —Ä–æ–ª–µ–π —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ 
            {max(paei_scores, key=paei_scores.get).lower()}.
            """
            interpretations['paei'] = paei_text.strip()
            
            # Soft Skills –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è
            top_soft = max(soft_skills_scores, key=soft_skills_scores.get)
            soft_text = f"""
            –ê–Ω–∞–ª–∏–∑ –º—è–≥–∫–∏—Ö –Ω–∞–≤—ã–∫–æ–≤ –≤—ã—è–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å:
            
            {self._format_scores_detailed(soft_skills_scores)}
            
            –ù–∞–∏–±–æ–ª–µ–µ —Ä–∞–∑–≤–∏—Ç—ã–π –Ω–∞–≤—ã–∫: {top_soft} ({soft_skills_scores[top_soft]} –±–∞–ª–ª–æ–≤)
            
            –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∞–∑–≤–∏—Ç–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ {top_soft.lower()}, —á—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –∫–ª—é—á–µ–≤—ã–º 
            –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ–º –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
            """
            interpretations['soft_skills'] = soft_text.strip()
            
            # HEXACO –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è  
            top_hexaco = max(hexaco_scores, key=hexaco_scores.get)
            hexaco_text = f"""
            –ê–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è HEXACO:
            
            {self._format_scores_detailed(hexaco_scores)}
            
            –ù–∞–∏–±–æ–ª–µ–µ –≤—ã—Ä–∞–∂–µ–Ω–Ω–∞—è —á–µ—Ä—Ç–∞: {top_hexaco} ({hexaco_scores[top_hexaco]} –±–∞–ª–ª–æ–≤)
            
            –ü—Ä–æ—Ñ–∏–ª—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç—Å—è –≤—ã—Å–æ–∫–∏–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏ –ø–æ —à–∫–∞–ª–µ {top_hexaco.lower()}, —á—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ 
            —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ª–∏—á–Ω–æ—Å—Ç–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏.
            """
            interpretations['hexaco'] = hexaco_text.strip()
            
            # DISC –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è
            top_disc = max(disc_scores, key=disc_scores.get)
            disc_text = f"""
            –ê–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è DISC:
            
            {self._format_scores_detailed(disc_scores)}
            
            –î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —Å—Ç–∏–ª—å: {top_disc} ({disc_scores[top_disc]} –±–∞–ª–ª–æ–≤)
            
            –ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç—Å—è –ø—Ä–µ–æ–±–ª–∞–¥–∞–Ω–∏–µ–º —Å—Ç–∏–ª—è {top_disc.lower()}, —á—Ç–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç 
            –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∏ —Ä–∞–±–æ—á–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è.
            """
            interpretations['disc'] = disc_text.strip()
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–π: {e}")
            # –ë–∞–∑–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
            interpretations = {
                'paei': '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –ê–¥–∏–∑–µ—Å–∞ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —É–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å.',
                'soft_skills': '–ê–Ω–∞–ª–∏–∑ –º—è–≥–∫–∏—Ö –Ω–∞–≤—ã–∫–æ–≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏.',
                'hexaco': '–õ–∏—á–Ω–æ—Å—Ç–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å HEXACO —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —á–µ—Ä—Ç—ã –ª–∏—á–Ω–æ—Å—Ç–∏.',
                'disc': '–ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å DISC –æ—Ç—Ä–∞–∂–∞–µ—Ç —Å—Ç–∏–ª–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.'
            }
        
        return interpretations

    def _format_scores_detailed(self, scores: Dict[str, float]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É"""
        return "\n".join([f"‚Ä¢ {k}: {v} –±–∞–ª–ª–æ–≤" for k, v in scores.items()])

    def generate_enhanced_report(self, 
                               participant_name: str,
                               test_date: str,
                               paei_scores: Dict[str, float],
                               disc_scores: Dict[str, float], 
                               hexaco_scores: Dict[str, float],
                               soft_skills_scores: Dict[str, float],
                               ai_interpretations: Dict[str, str],
                               out_path: Path) -> Path:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π PDF –æ—Ç—á—ë—Ç —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏"""
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
        dynamic_interpretations = self._generate_dynamic_interpretations(
            paei_scores, disc_scores, hexaco_scores, soft_skills_scores
        )
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –≤–º–µ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö
        ai_interpretations = dynamic_interpretations
        
        # –°–æ–∑–¥–∞–Ω–∏–µ PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞
        doc = SimpleDocTemplate(str(out_path), pagesize=A4,
                              rightMargin=DesignConfig.MARGIN*mm,
                              leftMargin=DesignConfig.MARGIN*mm,
                              topMargin=DesignConfig.MARGIN*mm,
                              bottomMargin=DesignConfig.MARGIN*mm)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–∏–∞–≥—Ä–∞–º–º (—Ä–∞–¥–∞—Ä–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤)
        chart_paths = self._create_all_charts(paei_scores, disc_scores, hexaco_scores, soft_skills_scores)
        
        # –°—Ç–∏–ª–∏
        styles = self._get_custom_styles()
        story = []
        
        # === –ó–ê–ì–û–õ–û–í–û–ö –î–û–ö–£–ú–ï–ù–¢–ê ===
        story.append(Paragraph("–û–¶–ï–ù–ö–ê –ö–û–ú–ê–ù–î–ù–´–• –ù–ê–í–´–ö–û–í", styles['MainTitle']))
        story.append(Spacer(1, 4*mm))  # —É–º–µ–Ω—å—à–µ–Ω –æ—Ç—Å—Ç—É–ø —Å 8–º–º –¥–æ 4–º–º
        
        # === –ò–ú–Ø –£–ß–ê–°–¢–ù–ò–ö–ê (–ü–û –¶–ï–ù–¢–†–£, –£–í–ï–õ–ò–ß–ï–ù–ù–´–ô –®–†–ò–§–¢) ===
        story.append(Paragraph(participant_name, styles['ParticipantName']))
        story.append(Spacer(1, 2*mm))
        
        # === –î–ê–¢–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===
        date_text = f"–î–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {test_date}"
        story.append(Paragraph(date_text, styles['Body']))
        story.append(Spacer(1, 6*mm))  # —É–º–µ–Ω—å—à–µ–Ω –æ—Ç—Å—Ç—É–ø —Å 10–º–º –¥–æ 6–º–º
        
        # === –û–ë–©–ï–ï –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ===
        story.append(Paragraph("–û–ë–©–ï–ï –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò", styles['SectionTitle']))
        story.append(Spacer(1, 3*mm))  # —É–º–µ–Ω—å—à–µ–Ω –æ—Ç—Å—Ç—É–ø —Å 5–º–º –¥–æ 3–º–º
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–µ —á–µ—Ä—Ç—ã –¥–ª—è –∑–∞–∫–ª—é—á–µ–Ω–∏—è
        max_paei = max(paei_scores, key=paei_scores.get)
        max_disc = max(disc_scores, key=disc_scores.get)
        max_hexaco = max(hexaco_scores, key=hexaco_scores.get)
        max_soft = max(soft_skills_scores, key=soft_skills_scores.get)
        
        paei_names = {"P": "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å", "A": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "E": "–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å", "I": "–ò–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä"}
        disc_names = {"D": "–î–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "I": "–í–ª–∏—è–Ω–∏–µ", "S": "–ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ", "C": "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ"}
        
        # –°–∏–Ω—Ç–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        synthesis_text = f"""
        –ù–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ <b>{participant_name}</b> 
        –ø—Ä–æ–≤–µ–¥–µ–Ω –∞–Ω–∞–ª–∏–∑ —É–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–æ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞, –ª–∏—á–Ω–æ—Å—Ç–Ω—ã—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π, –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏—Ö —Å—Ç–∏–ª–µ–π 
        –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∑–≤–æ–ª—è—é—Ç —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ 
        –æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º –ø—Ä–æ—Ñ–∏–ª–µ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–µ —Ä–∞–∑–≤–∏—Ç–∏—è.
        """
        story.append(Paragraph(synthesis_text, styles['Body']))
        story.append(Spacer(1, 3*mm))  # —É–º–µ–Ω—å—à–µ–Ω –æ—Ç—Å—Ç—É–ø —Å 5–º–º –¥–æ 3–º–º
        
        # –°–≤–æ–¥–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º –∏ –º–µ—Ç–æ–¥–∏–∫–∞–º
        story.append(Paragraph("<b>–ö–ª—é—á–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥–∏–∫–∏:</b>", styles['SubTitle']))
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –º–µ—Ç–æ–¥–∏–∫
        results_text = f"""
        <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b><br/>
        ‚Ä¢ <b>–¢–µ—Å—Ç –ê–¥–∏–∑–µ—Å–∞ (PAEI)</b> - –æ—Ü–µ–Ω–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏—Ö —Ä–æ–ª–µ–π –∏ —Å—Ç–∏–ª–µ–π —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ (5 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ 4 —Ç–∏–ø–∞–º). –ü—Ä–µ–æ–±–ª–∞–¥–∞–µ—Ç —Ä–æ–ª—å {paei_names.get(max_paei, max_paei)} - {paei_scores[max_paei]} –±–∞–ª–ª–æ–≤<br/>
        ‚Ä¢ <b>–û—Ü–µ–Ω–∫–∞ Soft Skills</b> - –∞–Ω–∞–ª–∏–∑ –Ω–∞–¥–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π (10 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ 10-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ). –ù–∞–∏–±–æ–ª–µ–µ —Ä–∞–∑–≤–∏—Ç—ã–π –Ω–∞–≤—ã–∫: {max_soft} - {soft_skills_scores[max_soft]} –±–∞–ª–ª–æ–≤<br/>
        ‚Ä¢ <b>HEXACO</b> - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —à–µ—Å—Ç–∏—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –º–æ–¥–µ–ª—å –ª–∏—á–Ω–æ—Å—Ç–∏ (10 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ 5-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ). –í—ã—Ä–∞–∂–µ–Ω–Ω–∞—è –ª–∏—á–Ω–æ—Å—Ç–Ω–∞—è —á–µ—Ä—Ç–∞: {max_hexaco} ({hexaco_scores[max_hexaco]} –±–∞–ª–ª–æ–≤)<br/>
        ‚Ä¢ <b>DISC</b> - –º–µ—Ç–æ–¥–∏–∫–∞ –æ—Ü–µ–Ω–∫–∏ –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –∏ —Å—Ç–∏–ª–µ–π (8 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ 4 —Ç–∏–ø–∞–º). {disc_names.get(max_disc, max_disc)} ({disc_scores[max_disc]} –±–∞–ª–ª–æ–≤)
        """
        story.append(Paragraph(results_text, styles['Body']))
        story.append(Spacer(1, 3*mm))
        
        # –û–ø–∏—Å–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–∏–∫
        story.append(Paragraph("<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥–∏–∫–∏:</b>", styles['SubTitle']))
        methodologies_text = """
        ‚Ä¢ <b>–¢–µ—Å—Ç –ê–¥–∏–∑–µ—Å–∞ (PAEI)</b> - –æ—Ü–µ–Ω–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏—Ö —Ä–æ–ª–µ–π –∏ —Å—Ç–∏–ª–µ–π —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞<br/>
        ‚Ä¢ <b>–û—Ü–µ–Ω–∫–∞ Soft Skills</b> - –∞–Ω–∞–ª–∏–∑ –Ω–∞–¥–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π<br/>
        ‚Ä¢ <b>HEXACO</b> - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –ª–∏—á–Ω–æ—Å—Ç–∏ (Lee & Ashton, 2004)<br/>
        ‚Ä¢ <b>DISC</b> - –º–µ—Ç–æ–¥–∏–∫–∞ –æ—Ü–µ–Ω–∫–∏ –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏—Ö —Å—Ç–∏–ª–µ–π (Marston, 1928)
        """
        story.append(Paragraph(methodologies_text, styles['Body']))
        story.append(Spacer(1, 6*mm))
        
        # –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        story.append(Paragraph("<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º—É —Ä–∞–∑–≤–∏—Ç–∏—é:</b>", styles['SubTitle']))
        
        # 1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω
        story.append(Paragraph("<b>1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω:</b>", styles['Body']))
        story.append(Paragraph(f"‚Ä¢ (PAEI): –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ñ–∏–ª—é {paei_names.get(max_paei, max_paei)}", styles['ListWithIndent']))
        story.append(Paragraph(f"‚Ä¢ (Soft Skills): –†–∞–∑–≤–∏–≤–∞—Ç—å {max_soft.lower()} —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã", styles['ListWithIndent']))
        story.append(Paragraph(f"‚Ä¢ (DISC): –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å {disc_names.get(max_disc, max_disc).lower()} –≤ –∫–æ–º–∞–Ω–¥–Ω–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏", styles['ListWithIndent']))
        story.append(Spacer(1, 2*mm))
        
        # 2. –û–±–ª–∞—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è  
        story.append(Paragraph("<b>2. –û–±–ª–∞—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è:</b>", styles['Body']))
        story.append(Paragraph("‚Ä¢ (PAEI): –†–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ –º–µ–Ω–µ–µ –≤—ã—Ä–∞–∂–µ–Ω–Ω—ã–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏–º–∏ —Ä–æ–ª—è–º–∏", styles['ListWithIndent']))
        story.append(Paragraph("‚Ä¢ (Soft Skills): –†–∞–∑–≤–∏–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ soft skills –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç–∏ [–ø–æ–∏—Å–∫ –∫—É—Ä—Å–æ–≤ –≤ Google]", styles['ListWithIndent']))
        story.append(Paragraph("‚Ä¢ (DISC): –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏—Ç—É–∞—Ü–∏–∏", styles['ListWithIndent']))
        story.append(Spacer(1, 2*mm))
        
        # 3. –ö–∞—Ä—å–µ—Ä–Ω—ã–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã
        story.append(Paragraph("<b>3. –ö–∞—Ä—å–µ—Ä–Ω—ã–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã:</b>", styles['Body']))
        story.append(Paragraph(f"‚Ä¢ (PAEI): –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∑–∏—Ü–∏–∏, —Ç—Ä–µ–±—É—é—â–∏–µ –∫–∞—á–µ—Å—Ç–≤ {paei_names.get(max_paei, max_paei)}", styles['ListWithIndent']))
        story.append(Paragraph("‚Ä¢ (HEXACO): –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–≤–∏—Ç–∏–µ —Å —É—á–µ—Ç–æ–º –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è HEXACO", styles['ListWithIndent']))
        story.append(Paragraph("‚Ä¢ (DISC): –í—ã—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É —Å —É—á–µ—Ç–æ–º –∫–æ–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω—ã—Ö —Ä–æ–ª–µ–π –ø–æ DISC", styles['ListWithIndent']))
        story.append(Spacer(1, 6*mm))  # —É–º–µ–Ω—å—à–µ–Ω –æ—Ç—Å—Ç—É–ø —Å 10–º–º –¥–æ 6–º–º
        
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –¥–µ—Ç–∞–ª—å–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∞–º
        story.append(PageBreak())
        
        # === 1. –¢–ï–°–¢ –ê–î–ò–ó–ï–°–ê (PAEI) ===
        story.append(Paragraph("1. –¢–ï–°–¢ –ê–î–ò–ó–ï–°–ê (PAEI) - –£–ü–†–ê–í–õ–ï–ù–ß–ï–°–ö–ò–ï –†–û–õ–ò", styles['SectionTitle']))
        
        # –û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ –≤ –∫—Ä–∞—Å–Ω–æ–π —Ä–∞–º–∫–µ (–∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ)
        test_description = "–¢–µ—Å—Ç –ê–¥–∏–∑–µ—Å–∞ (PAEI) - –æ—Ü–µ–Ω–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏—Ö —Ä–æ–ª–µ–π –∏ —Å—Ç–∏–ª–µ–π —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ (5 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ 4 —Ç–∏–ø–∞–º)."
        story.append(Paragraph(test_description, styles['Body']))
        story.append(Spacer(1, 3*mm))
        
        # –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ PAEI
        paei_description = """
        <b>–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ PAEI:</b><br/>
        ‚Ä¢ <b>P (Producer - –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å)</b> - –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–π<br/>
        ‚Ä¢ <b>A (Administrator - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)</b> - –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –∫–æ–Ω—Ç—Ä–æ–ª—å, —Å–∏—Å—Ç–µ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã<br/>
        ‚Ä¢ <b>E (Entrepreneur - –ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å)</b> - –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏, —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ, –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å<br/>
        ‚Ä¢ <b>I (Integrator - –ò–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä)</b> - –∫–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞, –º–æ—Ç–∏–≤–∞—Ü–∏—è –ª—é–¥–µ–π, —Å–æ–∑–¥–∞–Ω–∏–µ –µ–¥–∏–Ω—Å—Ç–≤–∞
        """
        story.append(Paragraph(paei_description, styles['Body']))
        story.append(Spacer(1, 5*mm))
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã PAEI
        paei_results = f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b> {self._format_scores(paei_scores)}"
        story.append(Paragraph(paei_results, styles['Body']))
        story.append(Spacer(1, 3*mm))
        
        # –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É PAEI
        if 'paei' in chart_paths:
            self._add_chart_to_story(story, chart_paths['paei'])
        
        # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è PAEI
        if 'paei' in ai_interpretations:
            story.append(Paragraph("<b>–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:</b>", styles['SubTitle']))
            story.append(Paragraph(ai_interpretations['paei'], styles['Body']))
        story.append(Spacer(1, 6*mm))  # —É–º–µ–Ω—å—à–µ–Ω –æ—Ç—Å—Ç—É–ø —Å 8–º–º –¥–æ 6–º–º
        
        # === 2. SOFT SKILLS - –ú–Ø–ì–ö–ò–ï –ù–ê–í–´–ö–ò ===
        story.append(Paragraph("2. SOFT SKILLS - –û–¶–ï–ù–ö–ê –ú–Ø–ì–ö–ò–• –ù–ê–í–´–ö–û–í", styles['SectionTitle']))
        
        # –û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ –≤ –∫—Ä–∞—Å–Ω–æ–π —Ä–∞–º–∫–µ (–∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ)
        test_description = "–û—Ü–µ–Ω–∫–∞ Soft Skills - –∞–Ω–∞–ª–∏–∑ –Ω–∞–¥–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π (10 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ 10-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ)."
        story.append(Paragraph(test_description, styles['Body']))
        story.append(Spacer(1, 3*mm))
        
        soft_description = """
        <b>Soft Skills</b> - —ç—Ç–æ –Ω–∞–¥–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥–∞—é—Ç —Ä–µ—à–∞—Ç—å –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ –∏ —Ä–∞–±–æ—á–∏–µ –∑–∞–¥–∞—á–∏ 
        –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏. –í–∫–ª—é—á–∞—é—Ç –∫–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏, –ª–∏–¥–µ—Ä—Å–∫–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞, –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å, 
        –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å. –≠—Ç–∏ –Ω–∞–≤—ã–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ª—é–¥—å–º–∏ 
        –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º—É —Ä–æ—Å—Ç—É –≤ –ª—é–±–æ–π —Å—Ñ–µ—Ä–µ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
        """
        story.append(Paragraph(soft_description, styles['Body']))
        story.append(Spacer(1, 5*mm))
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã Soft Skills
        soft_results = f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b> {self._format_scores(soft_skills_scores)}"
        story.append(Paragraph(soft_results, styles['Body']))
        story.append(Spacer(1, 3*mm))
        
        # –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É Soft Skills
        if 'soft_skills' in chart_paths:
            self._add_chart_to_story(story, chart_paths['soft_skills'])
        
        # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è Soft Skills (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∏–∑ –ø—Ä–æ–º–ø—Ç–æ–≤)
        if 'soft_skills' in ai_interpretations:
            story.append(Paragraph("<b>–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:</b>", styles['SubTitle']))
            story.append(Paragraph(ai_interpretations['soft_skills'], styles['Body']))
        
        story.append(Spacer(1, 8*mm))
        
        # === 3. –¢–ï–°–¢ HEXACO - –õ–ò–ß–ù–û–°–¢–ù–´–ï –ß–ï–†–¢–´ ===
        story.append(Paragraph("3. –¢–ï–°–¢ HEXACO - –ú–û–î–ï–õ–¨ –õ–ò–ß–ù–û–°–¢–ò", styles['SectionTitle']))
        
        # –û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ –≤ –∫—Ä–∞—Å–Ω–æ–π —Ä–∞–º–∫–µ (–∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ)
        test_description = "HEXACO - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —à–µ—Å—Ç–∏—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –º–æ–¥–µ–ª—å –ª–∏—á–Ω–æ—Å—Ç–∏ (10 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ 5-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ)."
        story.append(Paragraph(test_description, styles['Body']))
        story.append(Spacer(1, 3*mm))
        
        hexaco_description = """
        <b>HEXACO</b> - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —à–µ—Å—Ç–∏—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –º–æ–¥–µ–ª—å –ª–∏—á–Ω–æ—Å—Ç–∏, –≤–∫–ª—é—á–∞—é—â–∞—è –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è:<br/>
        ‚Ä¢ <b>H (Honesty-Humility)</b> - —á–µ—Å—Ç–Ω–æ—Å—Ç—å, —Å–∫—Ä–æ–º–Ω–æ—Å—Ç—å, –∏—Å–∫—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö<br/>
        ‚Ä¢ <b>E (Emotionality)</b> - —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å, —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —ç–º–ø–∞—Ç–∏—è<br/>
        ‚Ä¢ <b>X (eXtraversion)</b> - —ç–∫—Å—Ç—Ä–∞–≤–µ—Ä—Å–∏—è, —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –æ–±—â–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å<br/>
        ‚Ä¢ <b>A (Agreeableness)</b> - –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ, —Ç–µ—Ä–ø–∏–º–æ—Å—Ç—å<br/>
        ‚Ä¢ <b>C (Conscientiousness)</b> - –¥–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω–æ—Å—Ç—å, –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω–æ—Å—Ç—å, –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞<br/>
        ‚Ä¢ <b>O (Openness)</b> - –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å –æ–ø—ã—Ç—É, –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å, –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        """
        story.append(Paragraph(hexaco_description, styles['Body']))
        story.append(Spacer(1, 5*mm))
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã HEXACO
        hexaco_results = f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b> {self._format_scores(hexaco_scores)}"
        story.append(Paragraph(hexaco_results, styles['Body']))
        story.append(Spacer(1, 3*mm))
        
        # –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É HEXACO
        if 'hexaco' in chart_paths:
            self._add_chart_to_story(story, chart_paths['hexaco'])
        
        # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è HEXACO
        if 'hexaco' in ai_interpretations:
            story.append(Paragraph("<b>–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:</b>", styles['SubTitle']))
            story.append(Paragraph(ai_interpretations['hexaco'], styles['Body']))
        story.append(Spacer(1, 8*mm))
        
        # === 4. –¢–ï–°–¢ DISC - –ü–û–í–ï–î–ï–ù–ß–ï–°–ö–ò–ï –°–¢–ò–õ–ò ===
        story.append(Paragraph("4. –¢–ï–°–¢ DISC - –ú–û–î–ï–õ–¨ –ü–û–í–ï–î–ï–ù–ò–Ø", styles['SectionTitle']))
        
        # –û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ –≤ –∫—Ä–∞—Å–Ω–æ–π —Ä–∞–º–∫–µ (–∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ)
        test_description = "DISC - –º–µ—Ç–æ–¥–∏–∫–∞ –æ—Ü–µ–Ω–∫–∏ –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –∏ —Å—Ç–∏–ª–µ–π (8 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ 4 —Ç–∏–ø–∞–º)."
        story.append(Paragraph(test_description, styles['Body']))
        story.append(Spacer(1, 3*mm))
        
        disc_description = """
        <b>DISC</b> - –º–µ—Ç–æ–¥–∏–∫–∞ –æ—Ü–µ–Ω–∫–∏ –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –∏ —Å—Ç–∏–ª–µ–π –æ–±—â–µ–Ω–∏—è:<br/>
        ‚Ä¢ <b>D (Dominance)</b> - –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø—Ä—è–º–æ—Ç–∞, —Ä–µ—à–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç<br/>
        ‚Ä¢ <b>I (Influence)</b> - –≤–ª–∏—è–Ω–∏–µ, –æ–±—â–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –æ–ø—Ç–∏–º–∏–∑–º, –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –Ω–∞ –ª—é–¥–µ–π<br/>
        ‚Ä¢ <b>S (Steadiness)</b> - –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ, —Ç–µ—Ä–ø–µ–Ω–∏–µ, –∫–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞, —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å<br/>
        ‚Ä¢ <b>C (Compliance)</b> - —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º, –∞–Ω–∞–ª–∏—Ç–∏—á–Ω–æ—Å—Ç—å, —Ç–æ—á–Ω–æ—Å—Ç—å, –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å
        """
        story.append(Paragraph(disc_description, styles['Body']))
        story.append(Spacer(1, 5*mm))
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã DISC
        disc_results = f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b> {self._format_scores(disc_scores)}"
        story.append(Paragraph(disc_results, styles['Body']))
        story.append(Spacer(1, 3*mm))
        
        # –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É DISC
        if 'disc' in chart_paths:
            self._add_chart_to_story(story, chart_paths['disc'])
        
        # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è DISC
        if 'disc' in ai_interpretations:
            story.append(Paragraph("<b>–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:</b>", styles['SubTitle']))
            story.append(Paragraph(ai_interpretations['disc'], styles['Body']))
        story.append(Spacer(1, 8*mm))
        
        # === –ü–ï–†–ï–•–û–î –ù–ê –ù–û–í–£–Æ –°–¢–†–ê–ù–ò–¶–£ ===
        
        # –°–±–æ—Ä–∫–∞ PDF —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü –≤ –≤–µ—Ä—Ö–Ω–µ–º –ø—Ä–∞–≤–æ–º —É–≥–ª—É
        # –î–≤—É—Ö—ç—Ç–∞–ø–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å: —Å–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü, –ø–æ—Ç–æ–º –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π
        
        # –≠—Ç–∞–ø 1: –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü (–±–µ–∑ –Ω—É–º–µ—Ä–∞—Ü–∏–∏)
        temp_buffer = BytesIO()
        temp_doc = SimpleDocTemplate(temp_buffer, pagesize=A4, 
                                   rightMargin=DesignConfig.MARGIN*mm, 
                                   leftMargin=DesignConfig.MARGIN*mm,
                                   topMargin=DesignConfig.MARGIN*mm, 
                                   bottomMargin=DesignConfig.MARGIN*mm)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π —Å–±–æ—Ä–∫–∏
        from copy import deepcopy
        temp_story = deepcopy(story)
        temp_doc.build(temp_story)
        total_pages = temp_doc.page
        
        # –≠—Ç–∞–ø 2: –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π
        def add_page_number_with_total(canvas, doc):
            """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –≤–µ—Ä—Ö–Ω–∏–π –ø—Ä–∞–≤—ã–π —É–≥–æ–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–°—Ç—Ä. X –∏–∑ N'"""
            canvas.saveState()
            canvas.setFont('Arial-Regular', 10)
            page_num = canvas.getPageNumber()
            text = f"–°—Ç—Ä. {page_num} –∏–∑ {total_pages}"
            # –ü–æ–∑–∏—Ü–∏—è –≤ –≤–µ—Ä—Ö–Ω–µ–º –ø—Ä–∞–≤–æ–º —É–≥–ª—É (–æ—Ç—Å—Ç—É–ø 20–º–º –æ—Ç –∫—Ä–∞–µ–≤)
            canvas.drawRightString(A4[0] - DesignConfig.MARGIN*mm, 
                                 A4[1] - DesignConfig.MARGIN*mm + 5, 
                                 text)
            canvas.restoreState()
        
        doc.build(story, onFirstPage=add_page_number_with_total, onLaterPages=add_page_number_with_total)
        
        # –°–û–•–†–ê–ù–ï–ù–ò–ï –¢–û–õ–¨–ö–û –í GOOGLE DRIVE (–ë–ï–ó –õ–û–ö–ê–õ–¨–ù–´–• –ö–û–ü–ò–ô)
        print("üì§ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ PDF —Ç–æ–ª—å–∫–æ –≤ Google Drive...")
        try:
            from oauth_google_drive import upload_to_google_drive_oauth
            import os
            
            drive_link = upload_to_google_drive_oauth(str(out_path), "PsychTest Reports")
            if drive_link:
                print(f"‚úÖ PDF —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Google Drive!")
                print(f"üîó –°—Å—ã–ª–∫–∞: {drive_link}")
                
                # –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
                try:
                    os.remove(str(out_path))
                    print(f"üóëÔ∏è –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {out_path.name}")
                except Exception as e:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {e}")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ Google Drive –≤–º–µ—Å—Ç–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏
                return drive_link
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Google Drive - —Ñ–∞–π–ª –æ—Å—Ç–∞–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ")
                return out_path
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Google Drive: {e}")
            print("üìÑ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ")
            return out_path
    
    def _create_all_charts(self, paei_scores: Dict, disc_scores: Dict, 
                         hexaco_scores: Dict, soft_skills_scores: Dict) -> Dict[str, Path]:
        """–°–æ–∑–¥–∞—ë—Ç –≤—Å–µ —Ä–∞–¥–∞—Ä–Ω—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –¥–ª—è –æ—Ç—á–µ—Ç–∞"""
        charts = {}
        
        # PAEI –¥–∏–∞–≥—Ä–∞–º–º–∞ (—Ä–∞–¥–∞—Ä–Ω–∞—è)
        paei_labels = list(paei_scores.keys())
        paei_values = list(paei_scores.values())
        paei_path = self.template_dir / "paei_radar.png"
        EnhancedCharts.create_minimalist_radar(paei_labels, paei_values, 
                                             "PAEI (–ê–¥–∏–∑–µ—Å)", paei_path)
        charts['paei'] = paei_path
        
        # Soft Skills –¥–∏–∞–≥—Ä–∞–º–º–∞ (—Ä–∞–¥–∞—Ä–Ω–∞—è)
        soft_labels = list(soft_skills_scores.keys())
        soft_values = list(soft_skills_scores.values())
        soft_radar_path = self.template_dir / "soft_skills_radar.png"
        EnhancedCharts.create_minimalist_radar(soft_labels, soft_values,
                                             "Soft Skills", soft_radar_path)
        charts['soft_skills'] = soft_radar_path
        
        # HEXACO –¥–∏–∞–≥—Ä–∞–º–º–∞ (—Ä–∞–¥–∞—Ä–Ω–∞—è)
        hexaco_labels = list(hexaco_scores.keys())
        hexaco_values = list(hexaco_scores.values())
        hexaco_path = self.template_dir / "hexaco_radar.png"
        EnhancedCharts.create_minimalist_radar(hexaco_labels, hexaco_values,
                                             "HEXACO", hexaco_path)
        charts['hexaco'] = hexaco_path
        
        # DISC –¥–∏–∞–≥—Ä–∞–º–º–∞ (—Ä–∞–¥–∞—Ä–Ω–∞—è)  
        disc_labels = list(disc_scores.keys())
        disc_values = list(disc_scores.values())
        disc_path = self.template_dir / "disc_radar.png"
        EnhancedCharts.create_minimalist_radar(disc_labels, disc_values,
                                             "DISC", disc_path)
        charts['disc'] = disc_path
        
        return charts
    
    def _get_custom_styles(self):
        """–°–æ–∑–¥–∞—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å—Ç–∏–ª–∏"""
        styles = getSampleStyleSheet()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        styles.add(ParagraphStyle(
            name='MainTitle',
            parent=styles['Title'],
            fontSize=DesignConfig.TITLE_SIZE,
            fontName=DesignConfig.TITLE_FONT,
            textColor=DesignConfig.PRIMARY_COLOR,
            alignment=1,  # CENTER
            spaceAfter=6,
        ))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
        styles.add(ParagraphStyle(
            name='SectionTitle',
            parent=styles['Heading2'],
            fontSize=12,
            fontName=DesignConfig.TITLE_FONT,
            textColor=DesignConfig.PRIMARY_COLOR,
            spaceBefore=6,
            spaceAfter=3,
        ))
        
        # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
        styles.add(ParagraphStyle(
            name='SubTitle',
            parent=styles['Heading3'],
            fontSize=11,
            fontName=DesignConfig.TITLE_FONT,
            textColor=DesignConfig.PRIMARY_COLOR,
            spaceBefore=4,
            spaceAfter=2,
        ))
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
        styles.add(ParagraphStyle(
            name='Body',
            parent=styles['Normal'],
            fontSize=DesignConfig.BODY_SIZE,
            fontName=DesignConfig.BODY_FONT,
            textColor=DesignConfig.TEXT_COLOR,
            spaceAfter=4,
            leading=14,  # –±—ã–ª–æ 12, —É–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        ))
        
        # –ò–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ (—É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç, –ø–æ —Ü–µ–Ω—Ç—Ä—É)
        styles.add(ParagraphStyle(
            name='ParticipantName',
            parent=styles['Normal'],
            fontSize=14,  # —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç
            fontName=DesignConfig.TITLE_FONT,
            textColor=DesignConfig.PRIMARY_COLOR,
            alignment=1,  # CENTER
            spaceAfter=2,
            spaceBefore=2,
        ))
        
        # –°—Ç–∏–ª—å –¥–ª—è —Å–ø–∏—Å–∫–æ–≤ —Å –æ—Ç—Å—Ç—É–ø–æ–º (–∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ)
        styles.add(ParagraphStyle(
            name='ListWithIndent',
            parent=styles['Normal'],
            fontSize=DesignConfig.BODY_SIZE,
            fontName=DesignConfig.BODY_FONT,
            textColor=DesignConfig.TEXT_COLOR,
            leftIndent=15,  # –æ—Ç—Å—Ç—É–ø —Å–ª–µ–≤–∞ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞
            spaceAfter=2,
            leading=14,
        ))
        
        return styles
    
    def _format_scores(self, scores: Dict[str, float]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —á–∏—Ç–∞–µ–º—É—é —Å—Ç—Ä–æ–∫—É"""
        return ", ".join([f"{k}: {v}" for k, v in scores.items()])
    
    def upload_to_google_drive(self, file_path: Path, participant_name: str = None) -> Optional[str]:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ PDF –≤ Google Drive (–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å oauth_google_drive.py)
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            participant_name: –ò–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
            
        Returns:
            Optional[str]: –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª –≤ Google Drive –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            from oauth_google_drive import upload_to_google_drive_oauth
            
            print(f"üì§ –ó–∞–≥—Ä—É–∑–∫–∞ PDF –æ—Ç—á–µ—Ç–∞ –≤ Google Drive: {participant_name or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å –º–µ—Å—è—á–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –ø–∞–ø–æ–∫: PsychTest Reports/2025/10-October
            web_link = upload_to_google_drive_oauth(
                file_path=str(file_path),
                folder_name="PsychTest Reports",
                use_monthly_structure=True
            )
            
            if web_link:
                print(f"üéâ PDF —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Google Drive!")
                print(f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {web_link}")
                return web_link
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å PDF –≤ Google Drive")
                return None
                
        except ImportError:
            print("‚ö†Ô∏è Google Drive –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç oauth_google_drive)")
            return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Google Drive: {e}")
            return None
    
    def generate_enhanced_report_with_gdrive(self, 
                                           participant_name: str,
                                           test_date: str,
                                           paei_scores: Dict[str, float],
                                           disc_scores: Dict[str, float], 
                                           hexaco_scores: Dict[str, float],
                                           soft_skills_scores: Dict[str, float],
                                           ai_interpretations: Dict[str, str],
                                           out_path: Path,
                                           upload_to_gdrive: bool = True) -> Tuple[Path, Optional[str]]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PDF –æ—Ç—á—ë—Ç –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤ Google Drive
        
        Returns:
            Tuple[Path, Optional[str]]: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ Google Drive (–µ—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω)
        """
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–π –æ—Ç—á–µ—Ç
        pdf_path = self.generate_enhanced_report(
            participant_name, test_date, paei_scores, disc_scores,
            hexaco_scores, soft_skills_scores, ai_interpretations, out_path
        )
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Google Drive –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        gdrive_link = None
        if upload_to_gdrive:
            gdrive_link = self.upload_to_google_drive(pdf_path, participant_name)
        
        return pdf_path, gdrive_link