#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
"""

import sys
sys.path.append('.')

from enhanced_pdf_report_v2 import EnhancedPDFReportV2
from scale_normalizer import ScaleNormalizer
from datetime import datetime
from pathlib import Path

def create_demo_normalized_report():
    """–°–æ–∑–¥–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç —Å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏"""
    print("üìä –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –î–û –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
    original_data = {
        "paei": {"P": 1, "A": 5, "E": 2, "I": 0},  # –ú–∞–∫—Å–∏–º—É–º A=5
        "disc": {"D": 6, "I": 1, "S": 2, "C": 0},  # –ú–∞–∫—Å–∏–º—É–º D=6
        "hexaco": {"H": 2.3, "E": 4.7, "X": 1.9, "A": 3.6, "C": 2.1, "O": 4.4},  # –®–∫–∞–ª–∞ 1-5
        "soft_skills": {"–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è": 7.8, "–õ–∏–¥–µ—Ä—Å—Ç–≤–æ": 6.3, "–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å": 8.9, "–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å": 5.4}  # –®–∫–∞–ª–∞ 1-10
    }
    
    print("üìà –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    for test_type, scores in original_data.items():
        print(f"   {test_type.upper()}: {scores}")
    
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
    print("\nüîÑ –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é...")
    normalized_data = {}
    normalization_info = {}
    
    for test_type, scores in original_data.items():
        norm_scores, method = ScaleNormalizer.auto_normalize(test_type.upper(), scores)
        normalized_data[test_type] = norm_scores
        normalization_info[test_type] = method
        print(f"   {test_type.upper()}: {norm_scores} ({method})")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    print("\nüìÑ –°–æ–∑–¥–∞–Ω–∏–µ PDF –æ—Ç—á–µ—Ç–∞...")
    
    try:
        generator = EnhancedPDFReportV2()
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
        participant_info = {
            "name": "–î–µ–º–æ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
            "age": 30,
            "position": "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é",
            "department": "IT –æ—Ç–¥–µ–ª",
            "test_date": datetime.now().strftime("%d.%m.%Y"),
            "interpretation_type": "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏"
        }
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç —Å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        filename = f"demo_normalized_report_{timestamp}.pdf"
        out_path = Path(filename)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ (–∑–∞–≥–ª—É—à–∫–∏)
        ai_interpretations = {
            "paei": "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è PAEI —Å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏",
            "disc": "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è DISC —Å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏", 
            "hexaco": "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è HEXACO —Å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏",
            "soft_skills": "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è Soft Skills —Å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏"
        }
        
        pdf_path = generator.generate_enhanced_report(
            participant_name=participant_info["name"],
            test_date=participant_info["test_date"],
            paei_scores=normalized_data["paei"],
            disc_scores=normalized_data["disc"],
            hexaco_scores=normalized_data["hexaco"],
            soft_skills_scores=normalized_data["soft_skills"],
            ai_interpretations=ai_interpretations,
            out_path=out_path
        )
        
        print(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {pdf_path}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ –æ—Ç—á–µ—Ç
        print("\nüìã –ü—Ä–∏–º–µ–Ω–µ–Ω–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è:")
        for test_type, method in normalization_info.items():
            print(f"   {test_type.upper()}: {method}")
        
        return pdf_path
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
        return None

def demo_rounding_comparison():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–æ –∏ –ø–æ—Å–ª–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è"""
    print("\nüîç –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è:")
    print("=" * 60)
    
    # –ü—Ä–∏–º–µ—Ä—ã —Å –≤—ã—Å–æ–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
    test_cases = [
        ("PAEI", {"P": 1, "A": 2, "E": 1, "I": 1}),  # 1/5=0.2 -> 2.0, 2/5=0.4 -> 4.0
        ("DISC", {"D": 1, "I": 2, "S": 0, "C": 5}),  # 1/6=0.1666... -> 1.7, 2/6=0.3333... -> 3.3
        ("HEXACO", {"H": 1.33, "E": 2.67, "X": 3.14, "A": 4.99, "C": 1.01, "O": 4.44}),
    ]
    
    for test_type, scores in test_cases:
        print(f"\n{test_type} –ø—Ä–∏–º–µ—Ä:")
        print(f"  –ò—Å—Ö–æ–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {scores}")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç –±–µ–∑ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
        if test_type == "PAEI":
            max_questions = 5
            raw_normalized = {k: (v / max_questions) * 10 for k, v in scores.items()}
        elif test_type == "DISC":
            max_questions = 6
            raw_normalized = {k: (v / max_questions) * 10 for k, v in scores.items()}
        elif test_type == "HEXACO":
            raw_normalized = {k: ((v - 1) / 4) * 10 for k, v in scores.items()}
        
        print(f"  –ë–µ–∑ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è:   {raw_normalized}")
        
        # –° –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º
        normalized, method = ScaleNormalizer.auto_normalize(test_type, scores)
        print(f"  –° –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º:    {normalized}")
        print(f"  –£–ª—É—á—à–µ–Ω–∏–µ:        –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ 1 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π ‚úÖ")

if __name__ == "__main__":
    demo_rounding_comparison()
    
    print("\n" + "="*60)
    pdf_path = create_demo_normalized_report()
    
    if pdf_path:
        print(f"\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!")
        print(f"üìÅ –§–∞–π–ª: {pdf_path}")
        print(f"üìä –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –¥–∏–∞–≥—Ä–∞–º–º–∞—Ö –æ–∫—Ä—É–≥–ª–µ–Ω—ã –¥–æ 1 –¥–µ—Å—è—Ç–∏—á–Ω–æ–≥–æ –∑–Ω–∞–∫–∞")
        print(f"üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —à–∫–∞–ª")