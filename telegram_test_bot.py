#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Telegram –±–æ—Ç –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è v1.0
–ì–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ
"""

# pyright: reportOptionalMemberAccess=false
# pyright: reportGeneralTypeIssues=false
# pyright: reportOptionalSubscript=false
# pylance: disable=reportOptionalMemberAccess,reportGeneralTypeIssues

import logging
import asyncio
import tempfile
import shutil
import os
import re
from pathlib import Path
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from enhanced_pdf_report_v2 import EnhancedPDFReportV2
from interpretation_utils import generate_interpretations_from_prompt
from src.psytest.ai_interpreter import get_ai_interpreter
from report_archiver import save_report_copy
from scale_normalizer import ScaleNormalizer
from bot_integration_example import UserAnswersCollector

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
(WAITING_START, WAITING_NAME, PAEI_TESTING, DISC_TESTING, HEXACO_TESTING, SOFT_SKILLS_TESTING) = range(6)

# === –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ===
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# === –•–†–ê–ù–ò–õ–ò–©–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===
user_sessions = {}

class UserSession:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    def __init__(self, user_id: int):
        self.user_id = user_id
        self.name = ""
        self.phone = ""
        self.paei_scores = {"P": 0, "A": 0, "E": 0, "I": 0}
        self.disc_scores = {"D": 0, "I": 0, "S": 0, "C": 0}
        self.hexaco_scores = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ HEXACO (—à–∫–∞–ª–∞ 1-5)
        self.soft_skills_scores = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ Soft Skills (—à–∫–∞–ª–∞ 1-10)
        self.current_test = ""
        self.current_question = 0
        self.started_at = datetime.now()
        
        # –ù–æ–≤–æ–µ: –∫–æ–ª–ª–µ–∫—Ç–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –≤ –æ—Ç—á–µ—Ç–µ
        self.answers_collector = UserAnswersCollector()

# === –§–£–ù–ö–¶–ò–ò –ü–ê–†–°–ò–ù–ì–ê –í–û–ü–†–û–°–û–í ===

def parse_adizes_questions(filepath="data/prompts/adizes_user.txt"):
    """–ü–∞—Ä—Å–∏—Ç –≤–æ–ø—Ä–æ—Å—ã PAEI/Adizes –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        questions = []
        with open(filepath, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–ª–æ–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ (–∏—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω —Å –Ω–æ–º–µ—Ä–æ–º)
        question_blocks = re.split(r'\n(?=\d+\.)', content)
        
        for block in question_blocks:
            if not block.strip() or not re.match(r'^\d+\.', block.strip()):
                continue
                
            lines = block.strip().split('\n')
            question_text = lines[0].strip()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∞–º –≤–æ–ø—Ä–æ—Å (—É–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä)
            question_text = re.sub(r'^\d+\.\s*', '', question_text)
            
            answers = {}
            for line in lines[1:]:
                line = line.strip()
                if re.match(r'^[PAEI]\.', line):
                    code = line[0]  # P, A, E, –∏–ª–∏ I
                    answer_text = re.sub(r'^[PAEI]\.\s*', '', line)
                    answers[code] = answer_text
            
            if question_text and len(answers) == 4:  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 4 –æ—Ç–≤–µ—Ç–∞
                questions.append({
                    "question": question_text,
                    "answers": answers
                })
        
        logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(questions)} PAEI –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ {filepath}")
        return questions
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ PAEI –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
        return []

def parse_disc_questions(filepath="data/prompts/disc_user.txt"):
    """–ü–∞—Ä—Å–∏—Ç –≤–æ–ø—Ä–æ—Å—ã DISC –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        questions = []
        with open(filepath, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–ª–æ–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–î–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –í–ª–∏—è–Ω–∏–µ, –£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å, –ü–æ–¥—á–∏–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞–º)
        category_blocks = re.split(r'\n(?=\d+\.)', content)
        
        disc_categories = {
            1: "D",  # –î–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            2: "I",  # –í–ª–∏—è–Ω–∏–µ  
            3: "S",  # –£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å (Steadiness)
            4: "C"   # –ü–æ–¥—á–∏–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞–º (Compliance)
        }
        
        for block in category_blocks:
            if not block.strip():
                continue
                
            lines = block.strip().split('\n')
            if not lines:
                continue
                
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –Ω–æ–º–µ—Ä
            first_line = lines[0].strip()
            category_match = re.match(r'^(\d+)\.\s*(.+?):', first_line)
            if not category_match:
                continue
                
            category_num = int(category_match.group(1))
            category_name = category_match.group(2)
            
            if category_num not in disc_categories:
                continue
                
            disc_code = disc_categories[category_num]
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–¥–≤–æ–ø—Ä–æ—Å—ã
            for line in lines[1:]:
                line = line.strip()
                if re.match(r'^\d+\.\d+', line):  # –§–æ—Ä–º–∞—Ç 1.1, 1.2 –∏ —Ç.–¥.
                    # –£–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä –∏ —Å–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å
                    question_text = re.sub(r'^\d+\.\d+\s*', '', line)
                    
                    if question_text:
                        # –°–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ —à–∫–∞–ª—ã 1-5 –≤–º–µ—Å—Ç–æ D/I/S/C
                        questions.append({
                            "question": question_text,
                            "category": disc_code,
                            "category_name": category_name
                        })
        
        logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(questions)} DISC –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ {filepath}")
        return questions
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DISC –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
        return []

def parse_soft_skills_questions(filepath="data/prompts/soft_user.txt"):
    """–ü–∞—Ä—Å–∏–Ω–≥ –≤–æ–ø—Ä–æ—Å–æ–≤ Soft Skills –∏–∑ —Ñ–∞–π–ª–∞ –ø—Ä–æ–º–ø—Ç–æ–≤"""
    try:
        with open(filepath, 'r', encoding='utf-8-sig') as file:  # utf-8-sig —É–±–∏—Ä–∞–µ—Ç BOM
            content = file.read()
    except FileNotFoundError:
        logger.error(f"‚ùå –§–∞–π–ª {filepath} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return []
    
    lines = content.strip().split('\n')
    questions = []
    current_question = None
    collecting_answers = False
    answers = []
    
    # –ù–æ–≤—ã–π mapping –Ω–∞–≤—ã–∫–æ–≤ –Ω–∞ –Ω–æ–º–µ—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ soft skills)
    skills_mapping = {
        1: "–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è",
        2: "–†–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ",
        3: "–õ–∏–¥–µ—Ä—Å—Ç–≤–æ",
        4: "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ",
        5: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–µ–º",
        6: "–°—Ç—Ä–µ—Å—Å–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å",
        7: "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç",
        8: "–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å",
        9: "–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º",
        10: "–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å"
    }
    
    for i, line in enumerate(lines):
        original_line = line
        line = line.strip()
        if not line:
            continue
            
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
        if (line.startswith('–í–æ—Ç —Å–ø–∏—Å–æ–∫') or line.startswith('1 =') or line.startswith('2 =') or 
            line.startswith('3 =') or line.startswith('4 =') or line.startswith('5 =') or 
            line.startswith('–ó–∞–¥–∞–≤–∞–π') or line.startswith('–≥–¥–µ:') or line.endswith('–≥–¥–µ:')):
            continue
            
        # –ò—â–µ–º –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ –û–°–ù–û–í–ù–û–ì–û –≤–æ–ø—Ä–æ—Å–∞ (–±–µ–∑ –æ—Ç—Å—Ç—É–ø–∞ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏)
        if (not original_line.startswith('  ') and  # –ù–ï–¢ –æ—Ç—Å—Ç—É–ø–∞ –≤ 2 –ø—Ä–æ–±–µ–ª–∞
            line and line[0].isdigit() and '. ' in line):
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å
            if current_question and answers:
                question_num = len(questions) + 1
                skill = skills_mapping.get(question_num, "–û–±—â–∏–µ –Ω–∞–≤—ã–∫–∏")
                questions.append({
                    'question': current_question,
                    'scale': "1-5",
                    'skill': skill,
                    'answers': answers.copy()
                })
                answers = []
            
            # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
            parts = line.split('. ', 1)
            if len(parts) == 2:
                current_question = parts[1]
                collecting_answers = True
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ (–Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å "  1.", "  2." –∏ —Ç.–¥.)
        elif (collecting_answers and 
              original_line.startswith('  ') and  # –ï–°–¢–¨ –æ—Ç—Å—Ç—É–ø –≤ 2 –ø—Ä–æ–±–µ–ª–∞
              len(original_line) > 2):
            
            clean_line = original_line[2:]  # –£–±–∏—Ä–∞–µ–º –¥–≤–∞ –ø—Ä–æ–±–µ–ª–∞
            if clean_line and clean_line[0].isdigit() and '. ' in clean_line:
                answer_parts = clean_line.split('. ', 1)
                if len(answer_parts) == 2:
                    try:
                        answer_num = int(answer_parts[0])
                        answer_text = answer_parts[1]
                        answers.append({'value': answer_num, 'text': answer_text})
                    except ValueError:
                        continue
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å
    if current_question and answers:
        question_num = len(questions) + 1
        skill = skills_mapping.get(question_num, "–û–±—â–∏–µ –Ω–∞–≤—ã–∫–∏")
        questions.append({
            'question': current_question,
            'scale': "1-5",
            'skill': skill,
            'answers': answers.copy()
        })
    
    if questions:
        logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(questions)} Soft Skills –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ {filepath}")
    else:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å Soft Skills –≤–æ–ø—Ä–æ—Å—ã –∏–∑ {filepath}")
    
    return questions

# === –¢–ï–°–¢–û–í–´–ï –î–ê–ù–ù–´–ï ===
# –ó–∞–≥—Ä—É–∂–∞–µ–º PAEI –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ
PAEI_QUESTIONS = parse_adizes_questions()
if not PAEI_QUESTIONS:
    # –†–µ–∑–µ—Ä–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    PAEI_QUESTIONS = [
        {
            "question": "–í —Ä–∞–±–æ—Ç–µ –≤—ã –±–æ–ª—å—à–µ —Å–∫–ª–æ–Ω–Ω—ã:",
            "answers": {
                "A": "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã",
                "P": "–î–æ—Å—Ç–∏–≥–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", 
                "E": "–ò—Å–∫–∞—Ç—å –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏",
                "I": "–û–±—ä–µ–¥–∏–Ω—è—Ç—å –ª—é–¥–µ–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã"
            }
        }
    ]

# –ó–∞–≥—Ä—É–∂–∞–µ–º DISC –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —Ñ–∞–π–ª–∞
DISC_QUESTIONS = parse_disc_questions()
if not DISC_QUESTIONS:
    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å DISC –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —Ñ–∞–π–ª–∞!")
    # –†–µ–∑–µ—Ä–≤–Ω—ã–µ DISC –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    DISC_QUESTIONS = [
        {
            "question": "–í —Å–ª–æ–∂–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –≤—ã:",
            "answers": {
                "D": "–ë–µ—Ä–µ—Ç–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É –∏ –¥–µ–π—Å—Ç–≤—É–µ—Ç–µ —Ä–µ—à–∏—Ç–µ–ª—å–Ω–æ",
                "I": "–í–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç–µ –¥—Ä—É–≥–∏—Ö –Ω–∞ —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è",
                "S": "–°–æ—Ö—Ä–∞–Ω—è–µ—Ç–µ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç–µ –∫–æ–º–∞–Ω–¥—É",
                "C": "–¢—â–∞—Ç–µ–ª—å–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é"
            }
        }
    ]

HEXACO_QUESTIONS = [
    {
        "question": "–Ø –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é –≥–æ–≤–æ—Ä–∏—Ç—å –ø—Ä–∞–≤–¥—É, –¥–∞–∂–µ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ—É–¥–æ–±–Ω–æ",
        "scale": "1-5",
        "dimension": "H"  # Honesty-Humility
    },
    {
        "question": "–Ø —á–∞—Å—Ç–æ —á—É–≤—Å—Ç–≤—É—é –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ –æ –±—É–¥—É—â–µ–º",
        "scale": "1-5", 
        "dimension": "E"  # Emotionality
    },
    {
        "question": "–Ø –ª—é–±–ª—é –±—ã—Ç—å –≤ —Ü–µ–Ω—Ç—Ä–µ –≤–Ω–∏–º–∞–Ω–∏—è",
        "scale": "1-5",
        "dimension": "X"  # eXtraversion
    },
    {
        "question": "–Ø —Å—Ç–∞—Ä–∞—é—Å—å —Å–ª–µ–¥–æ–≤–∞—Ç—å —Å–≤–æ–∏–º –ø–ª–∞–Ω–∞–º, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ —Å–ª–æ–∂–Ω—ã–µ",
        "scale": "1-5",
        "dimension": "A"  # Agreeableness
    },
    {
        "question": "–ú–Ω–µ –ª–µ–≥–∫–æ –Ω–∞–π—Ç–∏ –æ–±—â–∏–π —è–∑—ã–∫ —Å –¥—Ä—É–≥–∏–º–∏ –ª—é–¥—å–º–∏",
        "scale": "1-5",
        "dimension": "C"  # Conscientiousness
    },
    {
        "question": "–Ø –Ω–∞—Å–ª–∞–∂–¥–∞—é—Å—å –∏–∑—É—á–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö –∏–¥–µ–π –∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏–π",
        "scale": "1-5",
        "dimension": "O"  # Openness to experience
    }
]

# –ó–∞–≥—Ä—É–∂–∞–µ–º Soft Skills –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —Ñ–∞–π–ª–∞
def get_soft_skills_names() -> list[str]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤ –∏–∑ SOFT_SKILLS_QUESTIONS"""
    try:
        return [question.get("skill", f"–ù–∞–≤—ã–∫ {i+1}") for i, question in enumerate(SOFT_SKILLS_QUESTIONS)]
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏–π –Ω–∞–≤—ã–∫–æ–≤: {e}")
        # Fallback –Ω–∞ –±–∞–∑–æ–≤—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        return ["–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è", "–õ–∏–¥–µ—Ä—Å—Ç–≤–æ", "–†–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ", "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ",
                "–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º", "–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–µ–º", "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç",
                "–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å", "–°—Ç—Ä–µ—Å—Å–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å"]

SOFT_SKILLS_QUESTIONS = parse_soft_skills_questions()
if not SOFT_SKILLS_QUESTIONS:
    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å Soft Skills –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —Ñ–∞–π–ª–∞!")
    # –†–µ–∑–µ—Ä–≤–Ω—ã–µ Soft Skills –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    SOFT_SKILLS_QUESTIONS = [
        {
            "question": "–ù–∞—Å–∫–æ–ª—å–∫–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—ä—è—Å–Ω–∏—Ç—å —Å–ª–æ–∂–Ω—ã–µ –∏–¥–µ–∏ –¥—Ä—É–≥–∏–º?",
            "scale": "1-5",
            "skill": "–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è"
        },
        {
            "question": "–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã –±–µ—Ä–µ—Ç–µ –Ω–∞ —Å–µ–±—è –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö?",
            "scale": "1-5",
            "skill": "–õ–∏–¥–µ—Ä—Å—Ç–≤–æ"
        }
    ]

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ë–û–¢–ê ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"""
    if not update.effective_user or not update.message:
        return ConversationHandler.END
        
    user_id = update.effective_user.id
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    logger.info(f"üöÄ –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    welcome_text = """
üéØ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –æ—Ü–µ–Ω–∫–∏ –∫–æ–º–∞–Ω–¥–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤!</b>

–Ø –ø—Ä–æ–≤–µ–¥—É —Å –≤–∞–º–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –º–µ—Ç–æ–¥–∏–∫–∞–º:
‚Ä¢ üìä PAEI (–ê–¥–∏–∑–µ—Å) - —É–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏–µ —Ä–æ–ª–∏
‚Ä¢ üé≠ DISC - –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ —Å—Ç–∏–ª–∏  
‚Ä¢ üß† HEXACO - –ª–∏—á–Ω–æ—Å—Ç–Ω—ã–µ —á–µ—Ä—Ç—ã
‚Ä¢ üí° Soft Skills - –Ω–∞–¥–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏

üìã <b>–ü—Ä–æ—Ü–µ—Å—Å:</b>
1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –§–ò–û)
2. –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ (~10 –º–∏–Ω—É—Ç)
3. –ü–æ–ª—É—á–µ–Ω–∏–µ PDF –æ—Ç—á–µ—Ç–∞

–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?
    """
    
    keyboard = [["‚úÖ –î–∞, –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"], ["‚ùå –ù–µ—Ç, –Ω–µ —Å–µ–π—á–∞—Å"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    
    await update.message.reply_text(
        welcome_text, 
        parse_mode='HTML',
        reply_markup=reply_markup
    )
    
    return WAITING_START

async def handle_start_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞—á–∞–ª–∞"""
    text = update.message.text
    
    if "–î–∞" in text:
        await update.message.reply_text(
            "üìù –û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ <b>–§–∞–º–∏–ª–∏—é –∏ –ò–º—è</b>:",
            parse_mode='HTML',
            reply_markup=ReplyKeyboardRemove()
        )
        return WAITING_NAME
    else:
        await update.message.reply_text(
            "–•–æ—Ä–æ—à–æ! –ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã, –Ω–∞–ø–∏—à–∏—Ç–µ /start",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

async def handle_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏"""
    user_id = update.effective_user.id
    name = update.message.text.strip()
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_sessions[user_id] = UserSession(user_id)
    user_sessions[user_id].name = name
    user_sessions[user_id].phone = ""  # –ü—É—Å—Ç–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, <b>{name}</b>! –°–µ–π—á–∞—Å –Ω–∞—á–Ω—ë–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.\n",
        parse_mode='HTML',
        reply_markup=ReplyKeyboardRemove()
    )
    return await start_paei_test(update, context)

async def start_paei_test(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ç–µ—Å—Ç PAEI"""
    user_id = update.effective_user.id
    session = user_sessions[user_id]
    session.current_test = "PAEI"
    session.current_question = 0
    
    return await ask_paei_question(update, context)

async def ask_paei_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å PAEI"""
    user_id = update.effective_user.id
    session = user_sessions[user_id]
    
    if session.current_question >= len(PAEI_QUESTIONS):
        return await start_soft_skills_test(update, context)
    
    question_data = PAEI_QUESTIONS[session.current_question]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    keyboard = []
    for key, answer in question_data["answers"].items():
        keyboard.append([f"{key}. {answer}"])
    
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    
    await update.message.reply_text(
        f"üìä <b>PAEI - –í–æ–ø—Ä–æ—Å {session.current_question + 1}/{len(PAEI_QUESTIONS)}</b>\n\n"
        f"{question_data['question']}",
        parse_mode='HTML',
        reply_markup=reply_markup
    )
    
    return PAEI_TESTING

async def handle_paei_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç PAEI"""
    user_id = update.effective_user.id
    session = user_sessions[user_id]
    answer_text = update.message.text
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞ (P, A, E, I)
    answer_code = answer_text[0] if answer_text else ""
    
    if answer_code in ["P", "A", "E", "I"]:
        # –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –±–∞–ª–ª–æ–≤
        session.paei_scores[answer_code] += 1
        
        # –ù–û–í–û–ï: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
        session.answers_collector.add_paei_answer(
            question_index=session.current_question,
            selected_option=answer_code
        )
        
        session.current_question += 1
        return await ask_paei_question(update, context)
    else:
        await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        return PAEI_TESTING

async def start_disc_test(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ç–µ—Å—Ç DISC"""
    user_id = update.effective_user.id
    session = user_sessions[user_id]
    session.current_test = "DISC"
    session.current_question = 0
    
    await update.message.reply_text(
        f"‚úÖ <b>PAEI –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
        f"üé≠ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç–µ—Å—Ç—É DISC (–ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ —Å—Ç–∏–ª–∏)\n"
        f"–í–æ–ø—Ä–æ—Å 1 –∏–∑ {len(DISC_QUESTIONS)}:",
        parse_mode='HTML'
    )
    
    return await ask_disc_question(update, context)

async def ask_disc_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å DISC"""
    user_id = update.effective_user.id
    session = user_sessions[user_id]
    
    logger.info(f"üìã ask_disc_question: current_question={session.current_question}, len={len(DISC_QUESTIONS)}")
    
    if session.current_question >= len(DISC_QUESTIONS):
        logger.info(f"üéØ DISC –∑–∞–≤–µ—Ä—à–µ–Ω! –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        return await complete_testing(update, context)
    
    question_data = DISC_QUESTIONS[session.current_question]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —à–∫–∞–ª—ã 1-5
    keyboard = [
        ["1 - –°–æ–≤—Å–µ–º –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω"],
        ["2 - –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω"],
        ["3 - –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ"],
        ["4 - –°–æ–≥–ª–∞—Å–µ–Ω"],
        ["5 - –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–µ–Ω"],
        ["‚ùå –í—ã–π—Ç–∏"]
    ]
    
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    
    logger.info(f"‚ùì –û—Ç–ø—Ä–∞–≤–ª—è–µ–º DISC –≤–æ–ø—Ä–æ—Å {session.current_question + 1}/{len(DISC_QUESTIONS)}")
    
    # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è DISC
    await update.message.reply_text(
        f"üíº <b>DISC - –í–æ–ø—Ä–æ—Å {session.current_question + 1}/{len(DISC_QUESTIONS)}</b>\n\n"
        f"{question_data['question']}",
        parse_mode='HTML',
        reply_markup=reply_markup
    )
    return DISC_TESTING

async def handle_disc_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç DISC (—à–∫–∞–ª–∞ 1-5)"""
    user_id = update.effective_user.id
    session = user_sessions[user_id]
    answer_text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É –≤—ã—Ö–æ–¥–∞
    if answer_text and ("‚ùå" in answer_text or answer_text.lower() in ["/exit", "/cancel", "–≤—ã–π—Ç–∏", "–æ—Ç–º–µ–Ω–∞"]):
        return await cancel(update, context)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logger.info(f"üìù DISC –æ—Ç–≤–µ—Ç –æ—Ç {user_id}: '{answer_text}'")
    logger.info(f"üìä –¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å: {session.current_question + 1}/{len(DISC_QUESTIONS)}")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5 –∏–∑ –æ—Ç–≤–µ—Ç–∞
    score = None
    if answer_text and len(answer_text) > 0:
        if answer_text[0].isdigit():
            score = int(answer_text[0])
    
    logger.info(f"ÔøΩ –ë–∞–ª–ª: {score}")
    
    if score and 1 <= score <= 5:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        question_data = DISC_QUESTIONS[session.current_question]
        category = question_data['category']  # D, I, S, C
        
        # –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤
        session.disc_scores[category] += score
        
        # –ù–û–í–û–ï: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
        session.answers_collector.add_disc_answer(
            question_index=session.current_question,
            rating=score
        )
        
        session.current_question += 1
        
        logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç. –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}, –ë–∞–ª–ª: {score}")
        logger.info(f"‚úÖ –ù–æ–≤—ã–π current_question: {session.current_question}")
        logger.info(f"üìà –°—á–µ—Ç DISC: {session.disc_scores}")
        
        if session.current_question >= len(DISC_QUESTIONS):
            logger.info(f"üéØ DISC –∑–∞–≤–µ—Ä—à–µ–Ω! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ HEXACO")
        
        return await ask_disc_question(update, context)
    else:
        logger.warning(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç DISC: '{answer_text}' -> –±–∞–ª–ª: {score}")
        await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5")
        return DISC_TESTING

async def start_hexaco_test(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ç–µ—Å—Ç HEXACO"""
    user_id = update.effective_user.id
    session = user_sessions[user_id]
    
    logger.info(f"üß† –ù–∞—á–∏–Ω–∞–µ–º HEXACO —Ç–µ—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    logger.info(f"üìä –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã DISC: {session.disc_scores}")
    
    session.current_test = "HEXACO"
    session.current_question = 0
    
    await update.message.reply_text(
        "üß† <b>–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç HEXACO</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –¥–ª—è –≤–∞—Å –æ—Ç–≤–µ—Ç:",
        parse_mode='HTML'
    )
    logger.info(f"üìù –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–µ—Ä–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É HEXACO")
    return await ask_hexaco_question(update, context)

async def ask_hexaco_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å HEXACO"""
    user_id = update.effective_user.id
    session = user_sessions[user_id]
    
    if session.current_question >= len(HEXACO_QUESTIONS):
        return await start_disc_test(update, context)
    
    question_data = HEXACO_QUESTIONS[session.current_question]
    
    keyboard = [
        ["1", "2", "3", "4", "5"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    
    await update.message.reply_text(
        f"üß† <b>HEXACO - –í–æ–ø—Ä–æ—Å {session.current_question + 1}/{len(HEXACO_QUESTIONS)}</b>\n\n"
        f"{question_data['question']}",
        parse_mode='HTML',
        reply_markup=reply_markup
    )
    
    return HEXACO_TESTING

async def handle_hexaco_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç HEXACO"""
    user_id = update.effective_user.id
    session = user_sessions[user_id]
    answer_text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤—ã—Ö–æ–¥
    if answer_text == "‚ùå –í—ã–π—Ç–∏":
        return await cancel(update, context)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤–æ–π –æ—Ç–≤–µ—Ç (1-5)
    try:
        score = None
        for i in range(1, 6):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–∏—Ñ—Ä—ã 1-5
            if answer_text.startswith(str(i)):
                score = i
                break
                
        if score is not None:
            # –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            session.hexaco_scores.append(score)
            
            # –ù–û–í–û–ï: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
            session.answers_collector.add_hexaco_answer(
                question_index=session.current_question,
                rating=score
            )
            
            session.current_question += 1
            return await ask_hexaco_question(update, context)
        else:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞")
            
    except (ValueError, IndexError):
        await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (1-5)")
        return HEXACO_TESTING

async def start_soft_skills_test(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ç–µ—Å—Ç Soft Skills"""
    user_id = update.effective_user.id
    session = user_sessions[user_id]
    session.current_test = "SOFT_SKILLS"
    session.current_question = 0
    
    await update.message.reply_text(
        "üí™ <b>–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç Soft Skills</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –¥–ª—è –≤–∞—Å –æ—Ç–≤–µ—Ç:",
        parse_mode='HTML'
    )
    
    return await ask_soft_skills_question(update, context)

async def ask_soft_skills_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å Soft Skills"""
    user_id = update.effective_user.id
    session = user_sessions[user_id]
    
    if session.current_question >= len(SOFT_SKILLS_QUESTIONS):
        return await start_hexaco_test(update, context)
    
    question_data = SOFT_SKILLS_QUESTIONS[session.current_question]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ –±–∞–∑–æ–≤—É—é —à–∫–∞–ª—É 1-5
    keyboard = []
    if 'answers' in question_data and question_data['answers']:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
        for answer in question_data['answers']:
            keyboard.append([f"{answer['value']}. {answer['text']}"])
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é —à–∫–∞–ª—É 1-5
        keyboard = [
            ["1", "2", "3", "4", "5"]
        ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞
    keyboard.append(["‚ùå –í—ã–π—Ç–∏"])
    
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    
    skill_info = f" ({question_data['skill']})" if 'skill' in question_data else ""
    
    await update.message.reply_text(
        f"üí™ <b>Soft Skills - –í–æ–ø—Ä–æ—Å {session.current_question + 1}/{len(SOFT_SKILLS_QUESTIONS)}</b>{skill_info}\n\n"
        f"{question_data['question']}",
        parse_mode='HTML',
        reply_markup=reply_markup
    )
    
    return SOFT_SKILLS_TESTING

async def handle_soft_skills_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç Soft Skills"""
    user_id = update.effective_user.id
    session = user_sessions[user_id]
    answer_text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤—ã—Ö–æ–¥
    if answer_text and ("‚ùå" in answer_text or answer_text.lower() in ["/exit", "/cancel", "–≤—ã–π—Ç–∏", "–æ—Ç–º–µ–Ω–∞"]):
        return await cancel(update, context)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤–æ–π –æ—Ç–≤–µ—Ç (1-5)
    try:
        score = None
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ "1. –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞"
        if answer_text and answer_text[0].isdigit():
            score = int(answer_text[0])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω 1-5
        if score and 1 <= score <= 5:
            # –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            session.soft_skills_scores.append(score)
            
            # –ù–û–í–û–ï: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
            session.answers_collector.add_soft_skills_answer(
                question_index=session.current_question,
                rating=score
            )
            
            logger.info(f"üìù Soft Skills –æ—Ç–≤–µ—Ç –æ—Ç {user_id}: –±–∞–ª–ª {score}")
            logger.info(f"üìä –¢–µ–∫—É—â–∏–π —Å—á–µ—Ç: {session.soft_skills_scores}")
            
            session.current_question += 1
            return await ask_soft_skills_question(update, context)
        else:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –æ—Ç–≤–µ—Ç–∞")
            
    except (ValueError, IndexError):
        logger.warning(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç Soft Skills: '{answer_text}'")
        await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (1-5)")
        return SOFT_SKILLS_TESTING

async def complete_testing(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç"""
    user_id = update.effective_user.id
    session = user_sessions[user_id]
    
    await update.message.reply_text(
        "üéâ <b>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n"
        "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç...\n"
        "–≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
        parse_mode='HTML',
        reply_markup=ReplyKeyboardRemove()
    )
    
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –º–µ—Ç–æ–¥–∏–∫–∞–º
        # PAEI: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –±–∞–ª–ª—ã —Å–æ–≥–ª–∞—Å–Ω–æ –º–µ—Ç–æ–¥–∏–∫–µ –ê–¥–∏–∑–µ—Å–∞
        # (1 –±–∞–ª–ª –∑–∞ –∫–∞–∂–¥—ã–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç, —Å—É–º–º–∞ = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤)
        # session.paei_scores –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π - —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!
        
        # DISC: –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –≤ –±–∞–ª–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏—Ö —Å—Ç–∏–ª–µ–π
        total_disc = sum(session.disc_scores.values()) or 1
        session.disc_scores = {
            "D": round(1 + (session.disc_scores["D"] / total_disc) * 9, 1),
            "I": round(1 + (session.disc_scores["I"] / total_disc) * 9, 1),
            "S": round(1 + (session.disc_scores["S"] / total_disc) * 9, 1),
            "C": round(1 + (session.disc_scores["C"] / total_disc) * 9, 1)
        }
        
        # HEXACO: –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Å—Ä–µ–¥–Ω–∏–µ –±–∞–ª–ª—ã –ø–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è–º
        # –£ –Ω–∞—Å 6 –≤–æ–ø—Ä–æ—Å–æ–≤ (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ –∫–∞–∂–¥–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ HEXACO)
        hexaco_dimensions = ["H", "E", "X", "A", "C", "O"]
        if len(session.hexaco_scores) == 6:
            hexaco_dict = {}
            for i, dimension in enumerate(hexaco_dimensions):
                score = session.hexaco_scores[i]  # –û—Ü–µ–Ω–∫–∞ 1-5
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —à–∫–∞–ª—É 1-10
                hexaco_dict[dimension] = round((score / 5.0) * 10.0, 1)
            session.hexaco_scores = hexaco_dict
        else:
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            session.hexaco_scores = {dim: 5.0 for dim in hexaco_dimensions}
        
        # Soft Skills: –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä—å –Ω–∞–≤—ã–∫–æ–≤
        soft_skills_names = get_soft_skills_names()
        if len(session.soft_skills_scores) == len(soft_skills_names):
            soft_skills_dict = {}
            for i, skill_name in enumerate(soft_skills_names):
                soft_skills_dict[skill_name] = session.soft_skills_scores[i]  # –£–∂–µ –≤ —à–∫–∞–ª–µ 1-10
            session.soft_skills_scores = soft_skills_dict
        else:
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            session.soft_skills_scores = {skill: 5.0 for skill in soft_skills_names}
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–≤–∞ PDF –æ—Ç—á–µ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        pdf_path_user, pdf_path_gdrive = await asyncio.to_thread(generate_user_report, session)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¢–û–õ–¨–ö–û –µ–≥–æ –æ—Ç—á–µ—Ç (–±–µ–∑ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤)
        with open(pdf_path_user, 'rb') as pdf_file:
            await update.message.reply_document(
                document=pdf_file,
                filename=f"–û—Ç—á–µ—Ç_{session.name.replace(' ', '_')}.pdf",
                caption=f"üìä <b>–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!</b>\n\n"
                       f"üë§ {session.name}\n"
                       f"üìÖ {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                       f"üìã –û—Ç—á–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –≤—Å–µ–º –º–µ—Ç–æ–¥–∏–∫–∞–º.\n"
                       f"üîí –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π –≤–æ–ø—Ä–æ—Å–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.",
                parse_mode='HTML'
            )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ
        import os
        for pdf_path in [pdf_path_user, pdf_path_gdrive]:
            if os.path.exists(pdf_path):
                try:
                    os.unlink(pdf_path)
                except Exception as del_err:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π PDF-—Ñ–∞–π–ª {pdf_path}: {del_err}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        await update.message.reply_text(
            "‚úÖ <b>–ì–æ—Ç–æ–≤–æ!</b>\n\n"
            "üìÑ –í–∞—à –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—ã—à–µ.\n"
            "üí° –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è! üéØ",
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )
    # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
    if user_id in user_sessions:
        del user_sessions[user_id]
    return ConversationHandler.END

def generate_user_report(session: UserSession) -> tuple[str, str]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–≤–∞ PDF –æ—Ç—á–µ—Ç–∞: –æ–¥–∏–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ –≤–æ–ø—Ä–æ—Å–æ–≤), –¥—Ä—É–≥–æ–π –¥–ª—è Google Drive (—Å –≤–æ–ø—Ä–æ—Å–∞–º–∏)"""
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º
    temp_dir = tempfile.mkdtemp()
    temp_charts_dir = Path(temp_dir) / "charts"
    temp_charts_dir.mkdir(exist_ok=True)
    
    try:
        # –í—Å–µ–≥–¥–∞ —Å–æ–±–∏—Ä–∞–µ–º –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç—á–µ—Ç–∞ –≤ Google Drive
        user_answers = session.answers_collector.get_answers_dict()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä PDF –ë–ï–ó —Ä–∞–∑–¥–µ–ª–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        pdf_generator_user = EnhancedPDFReportV2(
            template_dir=temp_charts_dir,
            include_questions_section=False  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç—á–µ—Ç –±–µ–∑ –≤–æ–ø—Ä–æ—Å–æ–≤
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä PDF –° —Ä–∞–∑–¥–µ–ª–æ–º –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è Google Drive
        pdf_generator_gdrive = EnhancedPDFReportV2(
            template_dir=temp_charts_dir,
            include_questions_section=True   # –í Google Drive –æ—Ç—á–µ—Ç —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
        )
    
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä
        ai_interpreter = get_ai_interpreter()
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é AI –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ
        interpretations = {}
        
        if ai_interpreter:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º AI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–π
            try:
                interpretations["paei"] = ai_interpreter.interpret_paei(session.paei_scores)
                interpretations["disc"] = ai_interpreter.interpret_disc(session.disc_scores)
                interpretations["hexaco"] = ai_interpreter.interpret_hexaco(session.hexaco_scores)
                interpretations["soft_skills"] = ai_interpreter.interpret_soft_skills(session.soft_skills_scores)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏: {e}")
                # Fallback –Ω–∞ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Ñ–æ—Ä–º–∞—Ç—É general_system_res.txt
                interpretations = generate_interpretations_from_prompt(
                    session.paei_scores, session.disc_scores, 
                    session.hexaco_scores, session.soft_skills_scores
                )
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Å–æ–≥–ª–∞—Å–Ω–æ general_system_res.txt
            interpretations = generate_interpretations_from_prompt(
                session.paei_scores, session.disc_scores, 
                session.hexaco_scores, session.soft_skills_scores
            )
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è PDF
        docs_dir = Path("docs")
        docs_dir.mkdir(exist_ok=True)
        
        timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        base_filename = f"{timestamp}_{session.name.replace(' ', '_') if session.name else 'TelegramUser'}_tg_{str(session.user_id)[-4:]}"
        
        # –ü—É—Ç–∏ –¥–ª—è –¥–≤—É—Ö –æ—Ç—á–µ—Ç–æ–≤
        pdf_path_user = docs_dir / f"{base_filename}_user.pdf"      # –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ –≤–æ–ø—Ä–æ—Å–æ–≤)
        pdf_path_gdrive = docs_dir / f"{base_filename}_full.pdf"    # –î–ª—è Google Drive (—Å –≤–æ–ø—Ä–æ—Å–∞–º–∏)
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –±–∞–ª–ª—ã –∫ –µ–¥–∏–Ω–æ–π —à–∫–∞–ª–µ 0-10
        paei_normalized, paei_method = ScaleNormalizer.auto_normalize("PAEI", session.paei_scores)
        disc_normalized, disc_method = ScaleNormalizer.auto_normalize("DISC", session.disc_scores)
        hexaco_normalized, hexaco_method = ScaleNormalizer.auto_normalize("HEXACO", session.hexaco_scores)
        soft_skills_normalized, soft_skills_method = ScaleNormalizer.auto_normalize("SOFT_SKILLS", session.soft_skills_scores)
        
        logger.info(f"üìè –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —à–∫–∞–ª:")
        logger.info(f"  {paei_method}")
        logger.info(f"  {disc_method}")
        logger.info(f"  {hexaco_method}")
        logger.info(f"  {soft_skills_method}")
        
        test_date = datetime.now().strftime("%Y-%m-%d %H:%M")
        
        # 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –ë–ï–ó –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.info("üìÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤)...")
        pdf_generator_user.generate_enhanced_report(
            participant_name=session.name,
            test_date=test_date,
            paei_scores=paei_normalized,
            disc_scores=disc_normalized,
            hexaco_scores=hexaco_normalized,
            soft_skills_scores=soft_skills_normalized,
            ai_interpretations=interpretations,
            out_path=pdf_path_user,
            user_answers=None  # –ù–µ –ø–µ—Ä–µ–¥–∞–µ–º –æ—Ç–≤–µ—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        )
        
        # 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –° –≤–æ–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è Google Drive
        logger.info("üìÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è Google Drive (—Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π –≤–æ–ø—Ä–æ—Å–æ–≤)...")
        result = pdf_generator_gdrive.generate_enhanced_report_with_gdrive(
            participant_name=session.name,
            test_date=test_date,
            paei_scores=paei_normalized,
            disc_scores=disc_normalized,
            hexaco_scores=hexaco_normalized,
            soft_skills_scores=soft_skills_normalized,
            ai_interpretations=interpretations,
            out_path=pdf_path_gdrive,
            upload_to_gdrive=True,
            user_answers=user_answers  # üîë –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç Google Drive –∑–∞–≥—Ä—É–∑–∫–∏
        if result and len(result) == 2:
            local_path, gdrive_link = result
            logger.info(f"üìÅ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ—Ç—á–µ—Ç: {pdf_path_user.name}")
            logger.info(f"üìÅ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {pdf_path_gdrive.name}")
            if gdrive_link:
                logger.info(f"‚òÅÔ∏è Google Drive: {gdrive_link}")
            else:
                logger.info("‚ö†Ô∏è Google Drive –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")
        else:
            logger.info(f"üìÅ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ—Ç—á–µ—Ç: {pdf_path_user.name}")
            logger.info(f"üìÅ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {pdf_path_gdrive.name}")
            logger.warning("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å Google Drive –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç–∏ –∫ –æ–±–æ–∏–º –æ—Ç—á–µ—Ç–∞–º
        return str(pdf_path_user), str(pdf_path_gdrive)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        raise e
    finally:
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
        try:
            shutil.rmtree(temp_dir, ignore_errors=True)
            logger.debug(f"–í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ {temp_dir} —É–¥–∞–ª–µ–Ω–∞")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É {temp_dir}: {e}")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    user_id = update.effective_user.id
    
    if user_id in user_sessions:
        del user_sessions[user_id]
    
    await update.message.reply_text(
        "‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–ø–∏—à–∏—Ç–µ /start",
        reply_markup=ReplyKeyboardRemove()
    )
    
    return ConversationHandler.END

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–º–æ—â—å"""
    help_text = """
ü§ñ <b>–ë–æ—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–æ–º–∞–Ω–¥–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤</b>

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ  
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

<b>–û —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:</b>
‚Ä¢ –í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: ~10 –º–∏–Ω—É—Ç
‚Ä¢ –ú–µ—Ç–æ–¥–∏–∫–∏: PAEI, DISC, HEXACO, Soft Skills
‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç: –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π PDF –æ—Ç—á–µ—Ç

<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @your_support_contact
    """
    
    await update.message.reply_text(help_text, parse_mode='HTML')

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –°–æ–∑–¥–∞–µ–º ConversationHandler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            WAITING_START: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_start_confirmation)],
            WAITING_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_name)],
            PAEI_TESTING: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_paei_answer)],
            DISC_TESTING: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_disc_answer)],
            HEXACO_TESTING: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_hexaco_answer)],
            SOFT_SKILLS_TESTING: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_soft_skills_answer)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("help", help_command))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    logger.info("üì± Telegram: @psychtestteambot")
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ú–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ Telegram: @psychtestteambot")
    
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()