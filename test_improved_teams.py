#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∫–æ–º–∞–Ω–¥–µ —Å –Ω–æ–≤—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
"""

import sys
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, os.path.join(os.path.dirname(os.path.abspath(__file__)), 'src'))

from src.psytest.ai_interpreter import AIInterpreter

def test_team_recommendations_with_improvements():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ"""
    
    print("üß™ –¢–ï–°–¢ –£–õ–£–ß–®–ï–ù–ù–´–• –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô –ü–û –ö–û–ú–ê–ù–î–ï")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ - —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å —è–≤–Ω—ã–º–∏ —Å–ª–∞–±—ã–º–∏ –º–µ—Å—Ç–∞–º–∏
    test_scores = {
        'paei': {'P': 1, 'A': 4, 'E': 1, 'I': 2},  # –°–∏–ª—å–Ω—ã–π –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, —Å–ª–∞–±—ã–µ P –∏ E
        'disc': {'D': 4.0, 'I': 2.0, 'S': 2.5, 'C': 3.5},  # –°–∏–ª—å–Ω–æ–µ –î–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, —Å–ª–∞–±–æ–µ –í–ª–∏—è–Ω–∏–µ
        'hexaco': {'H': 4, 'E': 2, 'X': 2, 'A': 5, 'C': 4, 'O': 3},  # –°–ª–∞–±—ã–µ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏ –≠–∫—Å—Ç—Ä–∞–≤–µ—Ä—Å–∏—è
        'soft_skills': {'leadership': 4, 'emotional_intelligence': 2, 'communication': 3, 'critical_thinking': 2, 'time_management': 4, 'conflict_resolution': 3, 'adaptability': 3, 'employee_development': 2}  # –°–ª–∞–±—ã–µ: –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç, –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ, –ù–∞–≤—ã–∫–∏ —Ä–∞–∑–≤–∏—Ç–∏—è
    }
    
    print("üìä –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å (—Å —è–≤–Ω—ã–º–∏ —Å–ª–∞–±—ã–º–∏ –º–µ—Å—Ç–∞–º–∏):")
    print(f"   PAEI: P=1, A=4, E=1, I=2 (—Å–ª–∞–±—ã–µ: P, E)")
    print(f"   DISC: D=4.0, I=2.0, S=2.5, C=3.5 (—Å–ª–∞–±–æ–µ: I)")
    print(f"   HEXACO: —Å–ª–∞–±—ã–µ E=2, X=2")
    print(f"   Soft Skills: —Å–ª–∞–±—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (—ç–º–æ—Ü. –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç, –∫—Ä–∏—Ç–∏—á. –º—ã—à–ª–µ–Ω–∏–µ, —Ä–∞–∑–≤–∏—Ç–∏–µ)")
    
    try:
        ai_interpreter = AIInterpreter()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—â–µ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ
        general_interpretation = ai_interpreter.interpret_general_conclusion(test_scores)
        
        if general_interpretation:
            print(f"\n‚úÖ AI —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é ({len(general_interpretation)} —Å–∏–º–≤–æ–ª–æ–≤)")
            
            # –ò—â–µ–º —Ä–∞–∑–¥–µ–ª —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∫–æ–º–∞–Ω–¥–µ
            lines = general_interpretation.split('\n')
            team_section_found = False
            team_content = []
            
            for line in lines:
                if '—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–¥–±–æ—Ä—É' in line.lower():
                    team_section_found = True
                    print(f"\nüéØ –ù–ê–ô–î–ï–ù –†–ê–ó–î–ï–õ: {line}")
                    continue
                    
                if team_section_found:
                    if line.startswith('- ') or line.startswith('‚Ä¢ '):
                        team_content.append(line)
                    elif line.strip() and not any(marker in line.lower() for marker in ['—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', '–∑–∞–∫–ª—é—á–µ–Ω–∏–µ', '–≤—ã–≤–æ–¥']):
                        if '–ø–æ–ª—É—á–µ–Ω–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç' not in line.lower():
                            team_content.append(line)
                    elif any(marker in line.lower() for marker in ['—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', '–∑–∞–∫–ª—é—á–µ–Ω–∏–µ']):
                        break
            
            if team_content:
                print(f"\nüìã –°–û–î–ï–†–ñ–ò–ú–û–ï –†–ê–ó–î–ï–õ–ê –ö–û–ú–ê–ù–î–´ ({len(team_content)} —Å—Ç—Ä–æ–∫):")
                for i, line in enumerate(team_content, 1):
                    print(f"   {i}. {line}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
                all_content = '\n'.join(team_content)
                
                print(f"\nüîç –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê:")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä
                abbreviations = ['(S)', '(E)', '(X)', '(P)', '(I)', '(D)', '(C)']
                expansions = ['–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å', '–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å', '–≠–∫—Å—Ç—Ä–∞–≤–µ—Ä—Å–∏—è', '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å', '–í–ª–∏—è–Ω–∏–µ', '–î–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', '–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ']
                
                found_abbrev = [abbr for abbr in abbreviations if abbr in all_content]
                found_expansions = [exp for exp in expansions if exp.lower() in all_content.lower()]
                
                print(f"   üìù –ù–∞–π–¥–µ–Ω–æ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä: {found_abbrev}")
                print(f"   üìñ –ù–∞–π–¥–µ–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–æ–∫: {found_expansions}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–π —Ñ—Ä–∞–∑—ã
                forbidden_phrase = "–ø–æ–ª—É—á–µ–Ω–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç"
                if forbidden_phrase in all_content.lower():
                    print(f"   ‚ùå –ù–ê–ô–î–ï–ù–ê –ó–ê–ü–†–ï–©–ï–ù–ù–ê–Ø –§–†–ê–ó–ê: '{forbidden_phrase}'")
                else:
                    print(f"   ‚úÖ –ó–∞–ø—Ä–µ—â–µ–Ω–Ω–∞—è —Ñ—Ä–∞–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
                disc_mentions = sum(1 for line in team_content if 'disc' in line.lower())
                paei_mentions = sum(1 for line in team_content if 'paei' in line.lower())
                hexaco_mentions = sum(1 for line in team_content if 'hexaco' in line.lower())
                soft_mentions = sum(1 for line in team_content if 'soft' in line.lower())
                
                print(f"   üìä –£–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤: DISC={disc_mentions}, PAEI={paei_mentions}, HEXACO={hexaco_mentions}, Soft={soft_mentions}")
                
                if all([disc_mentions, paei_mentions, hexaco_mentions, soft_mentions]):
                    print(f"   ‚úÖ –í—Å–µ 4 —Ç–µ—Å—Ç–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö")
                else:
                    print(f"   ‚ö†Ô∏è  –ù–µ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã")
                
                return True
            else:
                print(f"   ‚ùå –†–∞–∑–¥–µ–ª —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∫–æ–º–∞–Ω–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º")
                return False
        else:
            print("‚ùå AI –Ω–µ —Å–º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    success = test_team_recommendations_with_improvements()
    
    if success:
        print(f"\nüéä –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    else:
        print(f"\n‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù: –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")