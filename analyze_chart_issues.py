#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–Ω–∞–ª–∏–∑ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é –¥–∏–∞–≥—Ä–∞–º–º
"""
import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from pathlib import Path
import matplotlib.pyplot as plt
import numpy as np
from src.psytest.charts import make_radar, make_bar_chart

def analyze_diagram_issues():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–∏–∞–≥—Ä–∞–º–º–∞–º–∏"""
    print("üîç –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú –° –î–ò–ê–ì–†–ê–ú–ú–ê–ú–ò")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–∞–ø–∫–∏
    test_dir = Path("test_charts_analysis")
    test_dir.mkdir(exist_ok=True)
    
    # –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–∞—à–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
    test_cases = [
        {
            "name": "PAEI - –ù–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π (A –¥–æ–º–∏–Ω–∏—Ä—É–µ—Ç)",
            "type": "paei",
            "labels": ["P", "A", "E", "I"],
            "values": [1.0, 10.0, 1.0, 1.0],
            "issues": ["–ö—Ä–∞–π–Ω–µ –Ω–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è", "–û–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ 10 —Ä–∞–∑ –±–æ–ª—å—à–µ –¥—Ä—É–≥–∏—Ö"]
        },
        {
            "name": "DISC - –î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π D",
            "type": "disc", 
            "labels": ["D", "I", "S", "C"],
            "values": [7.8, 1.0, 3.2, 1.0],
            "issues": ["D —Å–∏–ª—å–Ω–æ –¥–æ–º–∏–Ω–∏—Ä—É–µ—Ç", "–ë–æ–ª—å—à–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –º–∞–∫—Å–∏–º—É–º–æ–º –∏ –º–∏–Ω–∏–º—É–º–æ–º"]
        },
        {
            "name": "DISC - –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π",
            "type": "disc",
            "labels": ["D", "I", "S", "C"], 
            "values": [6.0, 7.0, 5.0, 6.0],
            "issues": ["–•–æ—Ä–æ—à–æ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å"]
        },
        {
            "name": "PAEI - –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π",
            "type": "paei",
            "labels": ["P", "A", "E", "I"],
            "values": [6.0, 7.0, 5.0, 6.0], 
            "issues": ["–•–æ—Ä–æ—à–æ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å"]
        }
    ]
    
    problems_found = []
    
    for i, case in enumerate(test_cases):
        print(f"\nüìä –ê–Ω–∞–ª–∏–∑: {case['name']}")
        print(f"–ó–Ω–∞—á–µ–Ω–∏—è: {case['values']}")
        print(f"–ü—Ä–æ–±–ª–µ–º—ã: {', '.join(case['issues'])}")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–≥—Ä–∞–º–º—ã
        radar_path = test_dir / f"radar_{i+1}_{case['type']}.png"
        bar_path = test_dir / f"bar_{i+1}_{case['type']}.png"
        
        try:
            # –†–∞–¥–∞—Ä–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞
            make_radar(case['labels'], case['values'], radar_path, 
                      title=f"{case['name']} (–†–∞–¥–∞—Ä)", max_value=10)
            
            # –°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞
            make_bar_chart(case['labels'], case['values'], bar_path,
                          title=f"{case['name']} (–°—Ç–æ–ª–±—Ü—ã)", max_value=10)
            
            print(f"‚úÖ –î–∏–∞–≥—Ä–∞–º–º—ã —Å–æ–∑–¥–∞–Ω—ã: {radar_path.name}, {bar_path.name}")
            
            # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
            max_val = max(case['values'])
            min_val = min(case['values'])
            ratio = max_val / min_val if min_val > 0 else float('inf')
            
            print(f"üìè –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –º–∞–∫—Å/–º–∏–Ω: {ratio:.1f}")
            
            if ratio > 5:
                problem = f"–í—ã—Å–æ–∫–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ {ratio:.1f}:1 –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—ã–π –¥–∏—Å–±–∞–ª–∞–Ω—Å"
                problems_found.append({
                    "case": case['name'],
                    "problem": problem,
                    "ratio": ratio,
                    "suggestion": "–õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è"
                })
                print(f"‚ö†Ô∏è  {problem}")
            
            if max_val == 10.0 and min_val == 1.0:
                problem = "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—Ä–∞–π–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π —à–∫–∞–ª—ã (1 –∏ 10)"
                problems_found.append({
                    "case": case['name'], 
                    "problem": problem,
                    "suggestion": "–ü–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–¥—Å—á–µ—Ç–∞ –±–∞–ª–ª–æ–≤"
                })
                print(f"‚ö†Ô∏è  {problem}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º: {e}")
    
    # –í—ã–≤–æ–¥–∏–º –æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑
    print(f"\nüìã –û–ë–©–ò–ô –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú:")
    print(f"–í—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º –Ω–∞–π–¥–µ–Ω–æ: {len(problems_found)}")
    
    for problem in problems_found:
        print(f"\nüî∏ {problem['case']}")
        print(f"  –ü—Ä–æ–±–ª–µ–º–∞: {problem['problem']}")
        print(f"  –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {problem['suggestion']}")
    
    return problems_found, test_dir

def suggest_improvements():
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º"""
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ:")
    print("=" * 50)
    
    suggestions = [
        {
            "issue": "–ö—Ä–∞–π–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è (1 –∏ 10)",
            "solutions": [
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –º—è–≥–∫–∏–µ –ø—Ä–µ–¥–µ–ª—ã (2-8)",
                "–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫ —Å—Ä–µ–¥–Ω–µ–º—É –∑–Ω–∞—á–µ–Ω–∏—é",
                "–ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –¥–∞–Ω–Ω—ã–º"
            ]
        },
        {
            "issue": "–í—ã—Å–æ–∫–∏–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è (>5:1)",
            "solutions": [
                "–õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ",
                "–ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ—Ä–µ–Ω—å –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π",
                "–ü—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è"
            ]
        },
        {
            "issue": "–í–∏–∑—É–∞–ª—å–Ω—ã–π –¥–∏—Å–±–∞–ª–∞–Ω—Å",
            "solutions": [
                "–ò–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É",
                "–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ–Ω–æ–≤—ã–µ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—á–µ—Å–∫–∏–µ –∫—Ä—É–≥–∏",
                "–£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ –æ—Å–µ–π"
            ]
        },
        {
            "issue": "–†–∞–¥–∞—Ä–Ω—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã",
            "solutions": [
                "–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞",
                "–†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Å–µ–π",
                "–£–ª—É—á—à–µ–Ω–Ω–∞—è —á–∏—Ç–∞–µ–º–æ—Å—Ç—å –º–µ—Ç–æ–∫"
            ]
        }
    ]
    
    for suggestion in suggestions:
        print(f"\nüéØ {suggestion['issue']}:")
        for i, solution in enumerate(suggestion['solutions'], 1):
            print(f"  {i}. {solution}")
    
    return suggestions

if __name__ == "__main__":
    print("üîß –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú –° –ü–†–û–ü–û–†–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨–Æ –î–ò–ê–ì–†–ê–ú–ú")
    print("=" * 70)
    
    try:
        problems, test_dir = analyze_diagram_issues()
        suggestions = suggest_improvements()
        
        print(f"\nüìÅ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {test_dir}")
        print(f"\nüéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –ù–∞–π–¥–µ–Ω–æ {len(problems)} –ø—Ä–æ–±–ª–µ–º.")
        print("–ò–∑—É—á–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()