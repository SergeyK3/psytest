"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ—Ç—á—ë—Ç–æ–≤ –ø–æ –≤—Å–µ–º —Å—Ü–µ–Ω–∞—Ä–∏—è–º
–°–æ–∑–¥–∞—ë—Ç –ø–æ–ª–Ω—ã–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–æ—Ä—Ç—Ä–µ—Ç—ã —Å AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è–º–∏
"""

import os
import sys
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, str(Path(__file__).parent / "src"))

from test_scenarios import TEST_SCENARIOS, convert_hexaco_scores, convert_disc_scores
from psytest.ai_interpreter import get_ai_interpreter
from psytest.portrait import combine_blocks, save_text

def load_env_vars():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞"""
    env_path = Path(__file__).parent / ".env"
    if env_path.exists():
        with open(env_path, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    os.environ[key.strip()] = value.strip()

def generate_scenario_report(scenario_name: str, scenario_data: dict, ai_interpreter):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
    
    print(f"\nüîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –æ—Ç—á—ë—Ç –¥–ª—è: {scenario_data['name']}")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è –±–µ–∑ —Ç–∏–ø–∞–∂–∞ –≤ —Å–∫–æ–±–∫–∞—Ö
    full_name = scenario_data['name']
    if '(' in full_name and ')' in full_name:
        clean_name = full_name.split('(')[0].strip()
    else:
        clean_name = full_name
    
    # –ë–ª–æ–∫ –æ–±—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    general_block = f"""–û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ

–ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {clean_name}
–û–ø–∏—Å–∞–Ω–∏–µ: {scenario_data['description']}
–î–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M')}"""

    # –ë–ª–æ–∫ PAEI (–ê–¥–∏–∑–µ—Å)
    print("  üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ PAEI...")
    paei_interpretation = ai_interpreter.interpret_paei(
        scenario_data['paei_scores'], 
        scenario_data['dialog_context']
    )
    
    # –ë–ª–æ–∫ DISC
    print("  üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ DISC...")
    disc_scores_full = convert_disc_scores(scenario_data['disc_scores'])
    disc_interpretation = ai_interpreter.interpret_disc(
        disc_scores_full,
        scenario_data['dialog_context']
    )
    
    # –ë–ª–æ–∫ HEXACO
    print("  üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ HEXACO...")
    hexaco_scores_full = convert_hexaco_scores(scenario_data['hexaco_scores'])
    hexaco_interpretation = ai_interpreter.interpret_hexaco(
        hexaco_scores_full,
        scenario_data['dialog_context']
    )
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –±–ª–æ–∫–∏
    full_report = combine_blocks([
        general_block,
        paei_interpretation,
        disc_interpretation,
        hexaco_interpretation
    ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± AI
    full_report += "\n\n" + "="*50
    full_report += "\nü§ñ –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å –ø–æ–º–æ—â—å—é OpenAI GPT-3.5"
    full_report += "\nPowered by OpenAI (https://openai.com)"
    full_report += "\n" + "="*50
    
    return full_report

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –æ—Ç—á—ë—Ç–æ–≤"""
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ—Ç—á—ë—Ç–æ–≤...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_env_vars()
    
    # –°–æ–∑–¥–∞—ë–º AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä
    ai_interpreter = get_ai_interpreter()
    if not ai_interpreter:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OPENAI_API_KEY –≤ .env —Ñ–∞–π–ª–µ")
        return
    
    print(f"‚úÖ AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä –≥–æ—Ç–æ–≤. –ú–æ–¥–µ–ª—å: {ai_interpreter.model}")
    
    # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤
    reports_dir = Path(__file__).parent / "test_reports"
    reports_dir.mkdir(exist_ok=True)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç—ã –¥–ª—è –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    for scenario_name, scenario_data in TEST_SCENARIOS.items():
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
            report_content = generate_scenario_report(scenario_name, scenario_data, ai_interpreter)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç
            report_filename = f"report_{scenario_name}.txt"
            report_path = reports_dir / report_filename
            save_text(report_content, report_path)
            
            print(f"  ‚úÖ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {report_path}")
            
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞ –¥–ª—è {scenario_name}: {e}")
    
    print(f"\nüéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—Ç—á—ë—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ: {reports_dir}")
    print(f"üìù –í—Å–µ–≥–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –æ—Ç—á—ë—Ç–æ–≤: {len(TEST_SCENARIOS)}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    print("\nüìÇ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
    for report_file in sorted(reports_dir.glob("*.txt")):
        print(f"  ‚Ä¢ {report_file.name}")

if __name__ == "__main__":
    main()