#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è HEXACO
"""

from interpretation_formatter import parse_hexaco_sections

def test_hexaco_formatting():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HEXACO"""
    
    # –ü—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏ "–û—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å –∫ –æ–ø—ã—Ç—É"
    sample_text = """
–ß–µ—Å—Ç–Ω–æ—Å—Ç—å-–°–∫—Ä–æ–º–Ω–æ—Å—Ç—å: 5 (–æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å)
–ß–µ–ª–æ–≤–µ–∫ –æ–±–ª–∞–¥–∞–µ—Ç –≤—ã—Å–æ–∫–æ–π —á–µ—Å—Ç–Ω–æ—Å—Ç—å—é, —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å—é –∏ —Å–∫—Ä–æ–º–Ω–æ—Å—Ç—å—é. –°–∫–ª–æ–Ω–µ–Ω –∏–∑–±–µ–≥–∞—Ç—å –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π –∏ –∫–æ—Ä—ã—Å—Ç–Ω—ã—Ö –ø–æ—Å—Ç—É–ø–∫–æ–≤.

–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: 1 (–æ—á–µ–Ω—å –Ω–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å)
–ß–µ–ª–æ–≤–µ–∫ —Å–∫–ª–æ–Ω–µ–Ω –∫ —Å–¥–µ—Ä–∂–∞–Ω–Ω–æ—Å—Ç–∏ –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏ —ç–º–æ—Ü–∏–π. –í–µ—Ä–æ—è—Ç–Ω–æ, –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –≤ –ø–æ–Ω–∏–º–∞–Ω–∏–∏ –∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Å–≤–æ–∏—Ö —á—É–≤—Å—Ç–≤.

–≠–∫—Å—Ç—Ä–∞–≤–µ—Ä—Å–∏—è: 3 (—Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å)
–û–±—â–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —ç–Ω–µ—Ä–≥–∏—á–Ω–æ—Å—Ç—å –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞ —Å—Ä–µ–¥–Ω–µ–º —É—Ä–æ–≤–Ω–µ. –ß–µ–ª–æ–≤–µ–∫ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ —á—É–≤—Å—Ç–≤—É–µ—Ç —Å–µ–±—è –∫–∞–∫ –≤ –æ–±—â–µ—Å—Ç–≤–µ, —Ç–∞–∫ –∏ –≤ –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–µ.

–î—Ä—É–∂–µ–ª—é–±–∏–µ: 4 (–≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å)
–ß–µ–ª–æ–≤–µ–∫ –æ–±–ª–∞–¥–∞–µ—Ç —Ö–æ—Ä–æ—à–∏–º —É–º–µ–Ω–∏–µ–º –Ω–∞–ª–∞–∂–∏–≤–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã. –°–∫–ª–æ–Ω–µ–Ω –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –æ–∫—Ä—É–∂–∞—é—â–∏—Ö.

–°–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 2 (–Ω–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å)
–ß–µ–ª–æ–≤–µ–∫ –º–æ–∂–µ—Ç –∏—Å–ø—ã—Ç—ã–≤–∞—Ç—å —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π. –°–∫–ª–æ–Ω–µ–Ω –∫ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏.

–û—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å –∫ –æ–ø—ã—Ç—É: 2 (–Ω–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å)
–ß–µ–ª–æ–≤–µ–∫ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –∏–∑–±–µ–≥–∞—Ç—å –Ω–æ–≤—ã—Ö –∏–¥–µ–π –∏ –æ–ø—ã—Ç–∞. –°–∫–ª–æ–Ω–µ–Ω –∫ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–º –≤–∑–≥–ª—è–¥–∞–º –∏ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–º –º–µ—Ç–æ–¥–∞–º.

–û—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å –∫ –æ–ø—ã—Ç—É: 2 (–Ω–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å)
–ß–µ–ª–æ–≤–µ–∫ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –∏–∑–±–µ–≥–∞—Ç—å –Ω–æ–≤—ã—Ö –∏–¥–µ–π –∏ –æ–ø—ã—Ç–∞. –°–∫–ª–æ–Ω–µ–Ω –∫ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–º –≤–∑–≥–ª—è–¥–∞–º –∏ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–º –º–µ—Ç–æ–¥–∞–º.

–û–±—â–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç –ª–∏—á–Ω–æ—Å—Ç–∏:
–û–±—â–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ —á–µ–ª–æ–≤–µ–∫–∞...

–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∞:
–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è...
"""
    
    print("üß™ –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è HEXACO:")
    
    # –ü–∞—Ä—Å–∏–º —Å–µ–∫—Ü–∏–∏
    sections = parse_hexaco_sections(sample_text)
    
    print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ —Å–µ–∫—Ü–∏–π: {len(sections)}")
    for key in sections:
        print(f"  - {key}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    openness_count = sample_text.count("–û—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å –∫ –æ–ø—ã—Ç—É:")
    parsed_openness = "–û—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å –∫ –æ–ø—ã—Ç—É" in sections
    
    print(f"\nüîç –ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:")
    print(f"  –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç '–û—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å –∫ –æ–ø—ã—Ç—É:' {openness_count} —Ä–∞–∑(–∞)")
    print(f"  –í –ø–∞—Ä—Å–µ—Ä–µ –Ω–∞–π–¥–µ–Ω–∞ —Å–µ–∫—Ü–∏—è '–û—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å –∫ –æ–ø—ã—Ç—É': {parsed_openness}")
    
    if parsed_openness:
        openness_text = sections["–û—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å –∫ –æ–ø—ã—Ç—É"]
        parsed_count = openness_text.count("–û—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å –∫ –æ–ø—ã—Ç—É:")
        print(f"  –í –ø–∞—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–µ–∫—Ü–∏–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {parsed_count}")
        
        if parsed_count == 1:
            print("  ‚úÖ –î—É–±–ª–∏–∫–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã!")
        else:
            print("  ‚ùå –î—É–±–ª–∏–∫–∞—Ç—ã –æ—Å—Ç–∞–ª–∏—Å—å!")
    
    return len(sections)

if __name__ == "__main__":
    test_hexaco_formatting()