#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏ –ø—Ä–∏ –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º —Ä–µ–∂–∏–º–µ
"""

import sys
import psutil
import os
import tracemalloc
from pathlib import Path
import tempfile
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append('.')

def get_memory_usage():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–º"""
    process = psutil.Process(os.getpid())
    memory_info = process.memory_info()
    return {
        'rss': memory_info.rss / 1024 / 1024,  # MB
        'vms': memory_info.vms / 1024 / 1024,  # MB
        'percent': process.memory_percent()
    }

def analyze_user_session_memory():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –æ–¥–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å–µ—Å—Å–∏–∏"""
    
    print("üîç –ê–Ω–∞–ª–∏–∑ –ø–∞–º—è—Ç–∏ –¥–ª—è UserSession...")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
    from telegram_test_bot import UserSession
    
    tracemalloc.start()
    initial_memory = get_memory_usage()
    
    # –°–æ–∑–¥–∞–µ–º –æ–¥–Ω—É —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = 1001
    session = UserSession(user_id)
    session.name = "–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∞–º—è—Ç–∏"
    session.phone = "+7-999-123-45-67"
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏ –∫–∞–∫ –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    session.disc_scores = {"D": 5, "I": 3, "S": 2, "C": 4}
    session.hexaco_scores = [4, 3, 5, 2, 4, 3, 5, 4, 2, 3, 4, 5]  # 12 –æ—Ç–≤–µ—Ç–æ–≤
    session.soft_skills_scores = [7, 8, 6, 9, 5]  # 5 –æ—Ç–≤–µ—Ç–æ–≤
    session.current_test = "COMPLETED"
    session.current_question = 8
    
    after_session_memory = get_memory_usage()
    
    # –ò–∑–º–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Å tracemalloc
    current, peak = tracemalloc.get_traced_memory()
    tracemalloc.stop()
    
    session_memory = after_session_memory['rss'] - initial_memory['rss']
    
    print(f"üìä –û–¥–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Å–µ—Å—Å–∏—è:")
    print(f"   üíæ –ü–∞–º—è—Ç—å RSS: ~{session_memory:.3f} MB")
    print(f"   üìà –¢–æ—á–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: {current / 1024 / 1024:.3f} MB")
    print(f"   üîù –ü–∏–∫–æ–≤–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: {peak / 1024 / 1024:.3f} MB")
    
    return session_memory

def analyze_pdf_generation_memory():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF"""
    
    print("\nüìÑ –ê–Ω–∞–ª–∏–∑ –ø–∞–º—è—Ç–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF...")
    
    tracemalloc.start()
    initial_memory = get_memory_usage()
    
    try:
        from enhanced_pdf_report_v2 import EnhancedPDFReportV2
        from datetime import datetime
        from pathlib import Path
        
        # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä PDF
        pdf_generator = EnhancedPDFReportV2()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è PDF
        test_data = {
            'participant_name': '–¢–µ—Å—Ç –ü–∞–º—è—Ç–∏',
            'test_date': datetime.now().strftime("%Y-%m-%d"),
            'paei_scores': {
                '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å': 7,
                '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä': 5,
                '–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å': 8,
                '–ò–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä': 6
            },
            'disc_scores': {
                'D (–î–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)': 6,
                'I (–í–ª–∏—è–Ω–∏–µ)': 4,
                'S (–ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ)': 3,
                'C (–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ)': 5
            },
            'hexaco_scores': {
                '–ß–µ—Å—Ç–Ω–æ—Å—Ç—å-–°–º–∏—Ä–µ–Ω–∏–µ': 7,
                '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å': 6,
                '–≠–∫—Å—Ç—Ä–∞–≤–µ—Ä—Å–∏—è': 8,
                '–ü—Ä–∏—è—Ç–Ω–æ—Å—Ç—å': 5,
                '–°–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å': 7,
                '–û—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å –æ–ø—ã—Ç—É': 6
            },
            'soft_skills_scores': {
                '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è': 8,
                '–õ–∏–¥–µ—Ä—Å—Ç–≤–æ': 7,
                '–ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞': 6,
                '–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å': 9,
                '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ': 5
            },
            'ai_interpretations': {
                'overall': '–¢–µ—Å—Ç–æ–≤–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∞–º—è—Ç–∏ ' * 10,
                'disc': 'DISC –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è ' * 20,
                'paei': 'PAEI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è ' * 15,
                'hexaco': 'HEXACO –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è ' * 25,
                'soft_skills': 'Soft skills –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è ' * 18
            },
            'out_path': Path("memory_test_report.pdf")
        }
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
        pdf_path = pdf_generator.generate_enhanced_report(**test_data)
        
        after_pdf_memory = get_memory_usage()
        current, peak = tracemalloc.get_traced_memory()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        file_size = 0
        if pdf_path and os.path.exists(pdf_path):
            file_size = os.path.getsize(pdf_path) / 1024 / 1024  # MB
            os.unlink(pdf_path)  # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        
        tracemalloc.stop()
        
        pdf_memory = after_pdf_memory['rss'] - initial_memory['rss']
        
        print(f"üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ PDF:")
        print(f"   üíæ –ü–∞–º—è—Ç—å RSS: ~{pdf_memory:.3f} MB")
        print(f"   üìà –¢–æ—á–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: {current / 1024 / 1024:.3f} MB")
        print(f"   üîù –ü–∏–∫–æ–≤–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: {peak / 1024 / 1024:.3f} MB")
        print(f"   üìÑ –†–∞–∑–º–µ—Ä PDF —Ñ–∞–π–ª–∞: {file_size:.3f} MB")
        
        return pdf_memory
        
    except Exception as e:
        tracemalloc.stop()
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ PDF: {e}")
        return 0

def analyze_concurrent_memory():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø—Ä–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    print("\nüë• –ê–Ω–∞–ª–∏–∑ –ø–∞–º—è—Ç–∏ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π...")
    
    from telegram_test_bot import UserSession
    
    tracemalloc.start()
    initial_memory = get_memory_usage()
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π
    sessions = {}
    user_count = 5
    
    for i in range(1, user_count + 1):
        user_id = 2000 + i
        sessions[user_id] = UserSession(user_id)
        sessions[user_id].name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_{i}"
        sessions[user_id].phone = f"+7-999-{i:03d}-45-67"
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏
        sessions[user_id].disc_scores = {"D": i, "I": i+1, "S": i+2, "C": i+3}
        sessions[user_id].hexaco_scores = [i % 5 + 1] * 12
        sessions[user_id].soft_skills_scores = [(i % 10) + 1] * 5
    
    after_sessions_memory = get_memory_usage()
    current, peak = tracemalloc.get_traced_memory()
    tracemalloc.stop()
    
    total_memory = after_sessions_memory['rss'] - initial_memory['rss']
    memory_per_user = total_memory / user_count
    
    print(f"üìä {user_count} –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π:")
    print(f"   üíæ –û–±—â–∞—è –ø–∞–º—è—Ç—å: {total_memory:.3f} MB")
    print(f"   üë§ –ù–∞ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {memory_per_user:.3f} MB")
    print(f"   üìà –¢–æ—á–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: {current / 1024 / 1024:.3f} MB")
    print(f"   üîù –ü–∏–∫–æ–≤–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: {peak / 1024 / 1024:.3f} MB")
    
    return memory_per_user

def calculate_load_scenarios():
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–∞–≥—Ä—É–∑–∫—É –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
    
    print("\nüéØ –†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤...")
    
    # –ë–∞–∑–æ–≤—ã–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è
    session_memory = analyze_user_session_memory()
    pdf_memory = analyze_pdf_generation_memory()
    concurrent_memory_per_user = analyze_concurrent_memory()
    
    # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    total_ram = psutil.virtual_memory().total / 1024 / 1024 / 1024  # GB
    available_ram = psutil.virtual_memory().available / 1024 / 1024  # MB
    
    print(f"\nüíª –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
    print(f"   üñ•Ô∏è –û–±—â–∞—è RAM: {total_ram:.1f} GB")
    print(f"   üíæ –î–æ—Å—Ç—É–ø–Ω–∞—è RAM: {available_ram:.0f} MB")
    
    # –û—Ü–µ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    scenarios = [3, 5, 10, 20, 50, 100]
    
    print(f"\nüìà –û—Ü–µ–Ω–∫–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏:")
    print(f"{'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π':<12} {'–°–µ—Å—Å–∏–∏ (MB)':<15} {'PDF Gen (MB)':<15} {'–û–±—â–∞—è (MB)':<15} {'% –æ—Ç RAM':<10}")
    print("-" * 75)
    
    for users in scenarios:
        session_total = concurrent_memory_per_user * users
        pdf_total = pdf_memory * (users * 0.2)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 20% –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç PDF
        total_estimated = session_total + pdf_total
        ram_percent = (total_estimated / available_ram) * 100
        
        print(f"{users:<12} {session_total:<15.1f} {pdf_total:<15.1f} {total_estimated:<15.1f} {ram_percent:<10.1f}%")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    
    safe_users = int(available_ram * 0.3 / (concurrent_memory_per_user + pdf_memory * 0.2))
    optimal_users = int(available_ram * 0.5 / (concurrent_memory_per_user + pdf_memory * 0.2))
    max_users = int(available_ram * 0.8 / (concurrent_memory_per_user + pdf_memory * 0.2))
    
    print(f"   üü¢ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ (30% RAM): {safe_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print(f"   üü° –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ (50% RAM): {optimal_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π") 
    print(f"   üî¥ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ (80% RAM): {max_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞"""
    
    print("üî¨ –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏")
    print("=" * 60)
    
    # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    initial_memory = get_memory_usage()
    print(f"üìä –ù–∞—á–∞–ª—å–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏: {initial_memory['rss']:.1f} MB ({initial_memory['percent']:.1f}%)")
    
    # –ü—Ä–æ–≤–æ–¥–∏–º –∞–Ω–∞–ª–∏–∑
    calculate_load_scenarios()
    
    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    final_memory = get_memory_usage()
    print(f"\nüìä –§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏: {final_memory['rss']:.1f} MB ({final_memory['percent']:.1f}%)")
    print(f"üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {final_memory['rss'] - initial_memory['rss']:.1f} MB")

if __name__ == "__main__":
    main()