#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∫–æ–º–∞–Ω–¥–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∞
"""

import os
import sys
from pathlib import Path

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
try:
    from dotenv import load_dotenv
    load_dotenv()
    print("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ .env")
except ImportError:
    print("‚ö†Ô∏è  python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å .env –≤—Ä—É—á–Ω—É—é")
    env_file = Path('.env')
    if env_file.exists():
        with open(env_file, 'r') as f:
            for line in f:
                if '=' in line and not line.strip().startswith('#'):
                    key, value = line.strip().split('=', 1)
                    os.environ[key] = value
        print("‚úÖ .env —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤—Ä—É—á–Ω—É—é")

sys.path.append('src')

from src.psytest.ai_interpreter import get_ai_interpreter

def test_ai_team_recommendations():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç–æ—è—â—É—é AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∫–æ–º–∞–Ω–¥–µ"""
    
    print("ü§ñ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ AI –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô –ü–û –ö–û–ú–ê–ù–î–ï")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        print("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        return False
    
    print(f"‚úÖ OpenAI API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {api_key[:10]}...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä
    try:
        ai_interpreter = get_ai_interpreter()
        if not ai_interpreter:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä")
            return False
        print("‚úÖ AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∞: {e}")
        return False
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ —Å–ª–∞–±—ã–º–∏ –æ–±–ª–∞—Å—Ç—è–º–∏ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∫–æ–º–∞–Ω–¥–µ
    test_scores = {
        'paei': {'P': 1, 'A': 1, 'E': 5, 'I': 4},  # P –∏ A –æ—á–µ–Ω—å —Å–ª–∞–±—ã–µ
        'disc': {'D': 5.0, 'I': 4.0, 'S': 1.0, 'C': 2.0},  # S –∏ C —Å–ª–∞–±—ã–µ
        'hexaco': {
            'honesty_humility': 4.0,
            'emotionality': 1.5,      # –û—á–µ–Ω—å —Å–ª–∞–±–∞—è
            'extraversion': 1.2,      # –û—á–µ–Ω—å —Å–ª–∞–±–∞—è  
            'agreeableness': 2.0,     # –°–ª–∞–±–∞—è
            'conscientiousness': 4.5,
            'openness': 3.8
        },
        'soft_skills': {
            'leadership': 5,
            'emotional_intelligence': 5, 
            'communication': 4,
            'critical_thinking': 1,   # –û—á–µ–Ω—å —Å–ª–∞–±—ã–π
            'time_management': 4,
            'conflict_resolution': 5,
            'adaptability': 2,        # –°–ª–∞–±—ã–π
            'employee_development': 5,
            'teamwork': 2,            # –°–ª–∞–±—ã–π
            'creativity': 1           # –û—á–µ–Ω—å —Å–ª–∞–±—ã–π
        }
    }
    
    print("\nüìä –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å (—ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ —Å–ª–∞–±—ã–µ –æ–±–ª–∞—Å—Ç–∏):")
    print(f"PAEI —Å–ª–∞–±—ã–µ: P={test_scores['paei']['P']}, A={test_scores['paei']['A']}")
    print(f"DISC —Å–ª–∞–±—ã–µ: S={test_scores['disc']['S']}, C={test_scores['disc']['C']}")
    print(f"HEXACO —Å–ª–∞–±—ã–µ: emotionality={test_scores['hexaco']['emotionality']}, extraversion={test_scores['hexaco']['extraversion']}")
    print(f"Soft Skills —Å–ª–∞–±—ã–µ: critical_thinking={test_scores['soft_skills']['critical_thinking']}, creativity={test_scores['soft_skills']['creativity']}")
    print()
    
    try:
        print("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—â–µ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ —á–µ—Ä–µ–∑ AI...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—â–µ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ
        general_interpretation = ai_interpreter.interpret_general_conclusion(test_scores)
        
        print("‚úÖ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print()
        print("üìÑ –†–ï–ó–£–õ–¨–¢–ê–¢ AI –ì–ï–ù–ï–†–ê–¶–ò–ò:")
        print("=" * 60)
        print(general_interpretation)
        print("=" * 60)
        print()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∫–æ–º–∞–Ω–¥–µ
        content_lower = general_interpretation.lower()
        
        team_keywords = [
            '—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–¥–±–æ—Ä—É', '–∫–æ–º–∞–Ω–¥—É', '–∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤', '–ø–æ–¥–±–æ—Ä',
            'disc-–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è', 'paei-–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ', 'hexaco-–±–∞–ª–∞–Ω—Å', 'soft skills-—Å–∏–Ω–µ—Ä–≥–∏—è',
            '—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã', '–±–∞–ª–∞–Ω—Å –∫–æ–º–∞–Ω–¥—ã', '–∫–æ–º–ø–µ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å', '–¥–æ–ø–æ–ª–Ω–∏—Ç—å'
        ]
        
        print("üîç –ê–ù–ê–õ–ò–ó –°–û–î–ï–†–ñ–ê–ù–ò–Ø:")
        found_keywords = []
        for keyword in team_keywords:
            if keyword in content_lower:
                found_keywords.append(keyword)
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ: '{keyword}'")
        
        if not found_keywords:
            print("   ‚ö†Ô∏è  –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∫–æ–º–∞–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Å–ª–∞–±—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π
        print("\nüéØ –ü–†–û–í–ï–†–ö–ê –°–ü–ï–¶–ò–§–ò–ß–ï–°–ö–ò–• –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô:")
        
        specific_checks = [
            ('P (–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å)', ['–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å', '–∑–∞–¥–∞—á', '—Ä–µ–∑—É–ª—å—Ç–∞—Ç']),
            ('A (–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)', ['–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', '—Å–∏—Å—Ç–µ–º', '–ø—Ä–æ—Ü–µ—Å—Å']),
            ('S (–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å)', ['—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç', '–ø–æ–¥–¥–µ—Ä–∂–∫', '–∫–æ–º–∞–Ω–¥']),
            ('C (–¢–æ—á–Ω–æ—Å—Ç—å)', ['—Ç–æ—á–Ω–æ—Å—Ç', '–∞–Ω–∞–ª–∏—Ç–∏', '–¥–µ—Ç–∞–ª—å']),
            ('–∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ', ['–∫—Ä–∏—Ç–∏—á–µ—Å–∫', '–∞–Ω–∞–ª–∏–∑', '–º—ã—à–ª–µ–Ω']),
            ('–∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å', ['–∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç', '—Ç–≤–æ—Ä—á–µ—Å–∫', '–∏–Ω–Ω–æ–≤–∞—Ü'])
        ]
        
        for area, keywords in specific_checks:
            found = any(kw in content_lower for kw in keywords)
            if found:
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è {area}")
            else:
                print(f"   ‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è {area} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        if len(found_keywords) >= 3:
            print(f"\nüéâ –£–°–ü–ï–•! –ù–∞–π–¥–µ–Ω–æ {len(found_keywords)} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∫–æ–º–∞–Ω–¥")
            print("   –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∫–æ–º–∞–Ω–¥–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            return True
        else:
            print(f"\n‚ö†Ô∏è  –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•: –ù–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ {len(found_keywords)} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
            print("   –í–æ–∑–º–æ–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–ø—Ç–∞")
            return True  # –í—Å–µ —Ä–∞–≤–Ω–æ —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º, –µ—Å–ª–∏ AI –æ—Ç–≤–µ—á–∞–µ—Ç
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        return False

if __name__ == "__main__":
    success = test_ai_team_recommendations()
    if success:
        print("\nüéä –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç!")
    else:
        print("\nüí• –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")