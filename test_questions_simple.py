#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –º–æ–¥—É–ª—è questions_answers_section.py –±–µ–∑ ReportLab –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent))

from questions_answers_section import QuestionAnswerSection, get_all_questions

def test_questions_loading():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤"""
    print("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤...")
    
    questions = get_all_questions()
    
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:")
    print(f"  ‚Ä¢ PAEI: {len(questions['paei'])} –≤–æ–ø—Ä–æ—Å–æ–≤")
    print(f"  ‚Ä¢ DISC: {len(questions['disc'])} –≤–æ–ø—Ä–æ—Å–æ–≤")
    print(f"  ‚Ä¢ Soft Skills: {len(questions['soft_skills'])} –≤–æ–ø—Ä–æ—Å–æ–≤")
    print(f"  ‚Ä¢ HEXACO: {len(questions['hexaco'])} –≤–æ–ø—Ä–æ—Å–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º PAEI –≤–æ–ø—Ä–æ—Å—ã
    if questions['paei']:
        first_question = questions['paei'][0]
        print(f"\nüéØ –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å PAEI:")
        print(f"‚ùì {first_question['question']}")
        print(f"üìù –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:")
        for key, answer in first_question['answers'].items():
            print(f"   {key}. {answer}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å
        expected_start = "–ö–æ–≥–¥–∞ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç —Å–ª–æ–∂–Ω–∞—è –∑–∞–¥–∞—á–∞"
        if first_question['question'].startswith(expected_start):
            print(f"‚úÖ PAEI –≤–æ–ø—Ä–æ—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ PAEI –≤–æ–ø—Ä–æ—Å–∞—Ö!")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º DISC –≤–æ–ø—Ä–æ—Å—ã
    if questions['disc']:
        print(f"\nüéØ –ü–µ—Ä–≤—ã–µ 3 –≤–æ–ø—Ä–æ—Å–∞ DISC:")
        for i, question in enumerate(questions['disc'][:3]):
            print(f"  {i+1}. {question['question']} (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {question.get('category', 'N/A')})")
        print(f"‚úÖ DISC –≤–æ–ø—Ä–æ—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Soft Skills –≤–æ–ø—Ä–æ—Å—ã
    if questions['soft_skills']:
        print(f"\nüéØ –ü–µ—Ä–≤—ã–µ 3 –≤–æ–ø—Ä–æ—Å–∞ Soft Skills:")
        for i, question in enumerate(questions['soft_skills'][:3]):
            print(f"  {i+1}. {question['question']} (–Ω–∞–≤—ã–∫: {question.get('skill', 'N/A')})")
        print(f"‚úÖ Soft Skills –≤–æ–ø—Ä–æ—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º HEXACO –≤–æ–ø—Ä–æ—Å—ã
    if questions['hexaco']:
        print(f"\nüéØ –í—Å–µ HEXACO –≤–æ–ø—Ä–æ—Å—ã:")
        for i, question in enumerate(questions['hexaco']):
            dimension_full = {
                'H': '–ß–µ—Å—Ç–Ω–æ—Å—Ç—å-–°–∫—Ä–æ–º–Ω–æ—Å—Ç—å',
                'E': '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å', 
                'X': '–≠–∫—Å—Ç—Ä–∞–≤–µ—Ä—Å–∏—è',
                'A': '–î–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
                'C': '–î–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω–æ—Å—Ç—å',
                'O': '–û—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å –æ–ø—ã—Ç—É'
            }.get(question.get('dimension', 'N/A'), '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            
            print(f"  {i+1}. {question['question']} ({dimension_full})")
        print(f"‚úÖ HEXACO –≤–æ–ø—Ä–æ—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")

def test_data_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å PDF –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º"""
    print(f"\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö...")
    
    qa_section = QuestionAnswerSection()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    print(f"üìä –û–±—ä–µ–∫—Ç QuestionAnswerSection —Å–æ–∑–¥–∞–Ω:")
    print(f"  ‚Ä¢ PAEI: {len(qa_section.paei_questions)} –≤–æ–ø—Ä–æ—Å–æ–≤")
    print(f"  ‚Ä¢ DISC: {len(qa_section.disc_questions)} –≤–æ–ø—Ä–æ—Å–æ–≤") 
    print(f"  ‚Ä¢ Soft Skills: {len(qa_section.soft_skills_questions)} –≤–æ–ø—Ä–æ—Å–æ–≤")
    print(f"  ‚Ä¢ HEXACO: {len(qa_section.hexaco_questions)} –≤–æ–ø—Ä–æ—Å–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤–æ–ø—Ä–æ—Å–∞ PAEI
    if qa_section.paei_questions:
        question = qa_section.paei_questions[0]
        required_keys = ['question', 'answers']
        has_all_keys = all(key in question for key in required_keys)
        print(f"‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ PAEI –≤–æ–ø—Ä–æ—Å–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞: {has_all_keys}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        answers = question['answers']
        expected_options = ['P', 'A', 'E', 'I']
        has_all_options = all(option in answers for option in expected_options)
        print(f"‚úÖ –í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ PAEI –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç: {has_all_options}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ü–†–û–°–¢–û–ô –¢–ï–°–¢ –ú–û–î–£–õ–Ø QUESTIONS_ANSWERS_SECTION")
    print("=" * 60)
    
    test_questions_loading()
    test_data_structure()
    
    print("\n" + "=" * 60)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ú–æ–¥—É–ª—å –≥–æ—Ç–æ–≤ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å PDF –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º")

if __name__ == "__main__":
    main()