#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è PDF –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
"""

from pathlib import Path
from src.psytest.enhanced_pdf_report import EnhancedPDFReport
from test_scenarios import TEST_SCENARIOS
import time

def test_all_scenarios():
    """–°–æ–∑–¥–∞–µ—Ç PDF –æ—Ç—á–µ—Ç—ã –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    output_dir = Path("comprehensive_test_reports")
    output_dir.mkdir(exist_ok=True)
    
    print("üéØ –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PDF –æ—Ç—á–µ—Ç–æ–≤")
    print(f"üìÇ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_dir}")
    print(f"üìä –¢–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è {len(TEST_SCENARIOS)} —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤
    pdf_generator = EnhancedPDFReport(template_dir=output_dir / "temp_charts")
    
    total_size = 0
    successful_reports = 0
    
    for scenario_key, scenario_data in TEST_SCENARIOS.items():
        print(f"\nüìã –°—Ü–µ–Ω–∞—Ä–∏–π: {scenario_key}")
        print(f"üë§ –£—á–∞—Å—Ç–Ω–∏–∫: {scenario_data['name']}")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        participant_name = scenario_data["name"].split(" (")[0]  # –£–±–∏—Ä–∞–µ–º —Ç–∏–ø–∞–∂
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ soft skills –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è
        soft_skills = {
            "–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è": scenario_data["disc_scores"]["I"],
            "–õ–∏–¥–µ—Ä—Å—Ç–≤–æ": scenario_data["paei_scores"]["E"], 
            "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ": scenario_data["paei_scores"]["A"],
            "–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å": scenario_data["hexaco_scores"]["O"],
            "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞": scenario_data["disc_scores"]["C"],
            "–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ": scenario_data["hexaco_scores"]["X"]
        }
        
        # –ë–∞–∑–æ–≤—ã–µ AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
        ai_interpretations = {
            "paei": f"–ê–Ω–∞–ª–∏–∑ PAEI –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç {scenario_data['description']}. " +
                   f"–ü—Ä–µ–æ–±–ª–∞–¥–∞—é—â–∏–µ —Ä–æ–ª–∏: {max(scenario_data['paei_scores'], key=scenario_data['paei_scores'].get)}",
            "disc": f"DISC –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º: {scenario_data['dialog_context'][:100]}...",
            "hexaco": f"–õ–∏—á–Ω–æ—Å—Ç–Ω—ã–µ —á–µ—Ä—Ç—ã HEXACO –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—Ç —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å —Å –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è–º–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è."
        }
        
        # –°–æ–∑–¥–∞–µ–º PDF –æ—Ç—á–µ—Ç
        output_path = output_dir / f"report_{scenario_key}.pdf"
        
        try:
            start_time = time.time()
            
            pdf_generator.generate_enhanced_report(
                participant_name=participant_name,
                test_date="2025-01-25",
                paei_scores=scenario_data["paei_scores"],
                disc_scores=scenario_data["disc_scores"],
                hexaco_scores=scenario_data["hexaco_scores"],
                soft_skills_scores=soft_skills,
                ai_interpretations=ai_interpretations,
                out_path=output_path
            )
            
            generation_time = time.time() - start_time
            
            if output_path.exists():
                file_size = output_path.stat().st_size / 1024
                total_size += file_size
                successful_reports += 1
                
                print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω: {output_path.name}")
                print(f"   üìä –†–∞–∑–º–µ—Ä: {file_size:.1f} KB")
                print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è: {generation_time:.2f} —Å–µ–∫")
            else:
                print(f"   ‚ùå –§–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –æ—Ç—á–µ—Ç–æ–≤: {successful_reports}/{len(TEST_SCENARIOS)}")
    print(f"üì¶ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤: {total_size:.1f} KB")
    print(f"üìà –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –æ—Ç—á–µ—Ç–∞: {total_size/successful_reports:.1f} KB")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã
    temp_charts_dir = output_dir / "temp_charts"
    if temp_charts_dir.exists():
        chart_files = list(temp_charts_dir.glob("*.png"))
        chart_size = sum(f.stat().st_size for f in chart_files) / 1024
        print(f"üé® –°–æ–∑–¥–∞–Ω–æ –¥–∏–∞–≥—Ä–∞–º–º: {len(chart_files)}")
        print(f"üñºÔ∏è  –†–∞–∑–º–µ—Ä –¥–∏–∞–≥—Ä–∞–º–º: {chart_size:.1f} KB")
    
    print(f"\nüí° –í—Å–µ –æ—Ç—á–µ—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ø–∞–ø–∫–µ: {output_dir}")
    print("üñ®Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –ø–µ—á–∞—Ç–∏ –Ω–∞ –æ–¥–Ω–æ–º –∏–∑ —Ñ–∞–π–ª–æ–≤")

if __name__ == "__main__":
    test_all_scenarios()