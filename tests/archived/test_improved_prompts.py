#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è DISC –∏ ADIZES
–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–π —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è–º–∏ –±–∞–ª–ª–æ–≤
"""
import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from psytest.ai_interpreter import AIInterpreter

def test_disc_interpretations():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ DISC"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–†–ü–†–ï–¢–ê–¶–ò–ô DISC")
    print("=" * 50)
    
    ai_interpreter = AIInterpreter()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ DISC
    test_cases = [
        {
            "name": "–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å",
            "data": {
                "1.1": 3, "1.2": 3,  # D=6
                "2.1": 4, "2.2": 3,  # I=7 
                "3.1": 2, "3.2": 3,  # S=5
                "4.1": 3, "4.2": 3   # C=6
            }
        },
        {
            "name": "–î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π D (–∫–∞–∫ –Ω–∞ –¥–∏–∞–≥—Ä–∞–º–º–µ)",
            "data": {
                "1.1": 4, "1.2": 4,  # D=8
                "2.1": 1, "2.2": 1,  # I=2
                "3.1": 2, "3.2": 2,  # S=4
                "4.1": 1, "4.2": 1   # C=2
            }
        },
        {
            "name": "–î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π I (–≤–ª–∏—è–Ω–∏–µ)",
            "data": {
                "1.1": 2, "1.2": 1,  # D=3
                "2.1": 5, "2.2": 4,  # I=9
                "3.1": 2, "3.2": 2,  # S=4
                "4.1": 3, "4.2": 2   # C=5
            }
        },
        {
            "name": "–î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π S (—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å)",
            "data": {
                "1.1": 2, "1.2": 2,  # D=4
                "2.1": 2, "2.2": 2,  # I=4
                "3.1": 4, "3.2": 5,  # S=9
                "4.1": 3, "4.2": 3   # C=6
            }
        },
        {
            "name": "–î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π C (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ)",
            "data": {
                "1.1": 2, "1.2": 1,  # D=3
                "2.1": 2, "2.2": 2,  # I=4
                "3.1": 3, "3.2": 2,  # S=5
                "4.1": 5, "4.2": 4   # C=9
            }
        }
    ]
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\nüîç –¢–µ—Å—Ç {i}: {test_case['name']}")
        print("-" * 30)
        
        try:
            interpretation = ai_interpreter.interpret_disc(test_case['data'])
            print(f"‚úÖ –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ (–¥–ª–∏–Ω–∞: {len(interpretation)} —Å–∏–º–≤–æ–ª–æ–≤)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            required_elements = [
                "–°—É–º–º–∞ –±–∞–ª–ª–æ–≤ –ø–æ –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—é",
                "–°—É–º–º–∞ –±–∞–ª–ª–æ–≤ –ø–æ –≤–ª–∏—è–Ω–∏—é", 
                "–°—É–º–º–∞ –±–∞–ª–ª–æ–≤ –ø–æ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏",
                "–°—É–º–º–∞ –±–∞–ª–ª–æ–≤ –ø–æ –ø–æ–¥—á–∏–Ω–µ–Ω–∏—é –ø—Ä–∞–≤–∏–ª–∞–º",
                "–û–±—â–∏–π –≤—ã–≤–æ–¥"
            ]
            
            missing_elements = []
            for element in required_elements:
                if element not in interpretation:
                    missing_elements.append(element)
            
            if missing_elements:
                print(f"‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —ç–ª–µ–º–µ–Ω—Ç—ã: {missing_elements}")
            else:
                print("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—Ä—ã–≤–æ–∫
            preview = interpretation[:200] + "..." if len(interpretation) > 200 else interpretation
            print(f"üìù –ü—Ä–µ–≤—å—é: {preview}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def test_adizes_interpretations():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ ADIZES"""
    print("\n\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–†–ü–†–ï–¢–ê–¶–ò–ô ADIZES")
    print("=" * 50)
    
    ai_interpreter = AIInterpreter()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ ADIZES
    test_cases = [
        {
            "name": "–î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π I (–∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä)",
            "choices": ["I", "I", "I", "P"]
        },
        {
            "name": "–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å",
            "choices": ["P", "A", "E", "I"]
        },
        {
            "name": "–î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π A (–∫–∞–∫ –Ω–∞ –¥–∏–∞–≥—Ä–∞–º–º–µ)",
            "choices": ["A", "A", "A", "P"]
        },
        {
            "name": "–î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π E (–ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å)",
            "choices": ["E", "E", "E", "A"]
        },
        {
            "name": "–î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π P (–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å)",
            "choices": ["P", "P", "P", "I"]
        }
    ]
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\nüîç –¢–µ—Å—Ç {i}: {test_case['name']}")
        print("-" * 30)
        print(f"–í—ã–±–æ—Ä—ã: {test_case['choices']}")
        
        try:
            interpretation = ai_interpreter.interpret_adizes(test_case['choices'])
            print(f"‚úÖ –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ (–¥–ª–∏–Ω–∞: {len(interpretation)} —Å–∏–º–≤–æ–ª–æ–≤)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            required_elements = [
                "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –ê–¥–∏–∑–µ—Å—É",
                "–û–±—â–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç",
                "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∞",
                "–ò–¥–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏"
            ]
            
            missing_elements = []
            for element in required_elements:
                if element not in interpretation:
                    missing_elements.append(element)
            
            if missing_elements:
                print(f"‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —ç–ª–µ–º–µ–Ω—Ç—ã: {missing_elements}")
            else:
                print("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—Ä—ã–≤–æ–∫
            preview = interpretation[:200] + "..." if len(interpretation) > 200 else interpretation
            print(f"üìù –ü—Ä–µ–≤—å—é: {preview}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –£–õ–£–ß–®–ï–ù–ù–´–• –ü–†–û–ú–ü–¢–û–í")
    print("=" * 60)
    
    try:
        test_disc_interpretations()
        test_adizes_interpretations()
        
        print("\n\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–π –≤—ã—à–µ.")
        
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()