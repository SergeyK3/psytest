#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ soft_user.txt
"""

import sys
import os
import re
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.psytest.prompts import load_prompt

def debug_soft_parsing():
    """–û—Ç–ª–∞–∂–∏–≤–∞–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ soft_user.txt"""
    
    print("üîç –û—Ç–ª–∞–¥–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ soft_user.txt...")
    
    try:
        content = load_prompt("soft_user.txt")
        print(f"üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª–∏–Ω–æ–π {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        lines = content.split('\n')
        print(f"üìã –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {len(lines)}")
        
        print("\n--- –ü–ï–†–í–´–ï 20 –°–¢–†–û–ö ---")
        for i, line in enumerate(lines[:20]):
            if line.strip():
                print(f"{i+1:2d}: '{line}'")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
                if re.match(r'^\d+\.\s+[–ê-–Ø]', line.strip()):
                    print(f"    ‚úÖ –ù–ê–ô–î–ï–ù –í–û–ü–†–û–°: {line.strip()[:30]}...")
                
                if re.match(r'^\s+[1-5]\.\s*', line):
                    print(f"    ‚úÖ –ù–ê–ô–î–ï–ù –û–¢–í–ï–¢: {line[:30]}...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
        print("\n--- –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ê–†–°–ò–ù–ì–ê ---")
        current_question = None
        current_answers = {}
        questions = []
        
        for line_num, line in enumerate(lines, 1):
            line_original = line
            line = line.strip()
            
            if not line or line.startswith('–í–æ—Ç —Å–ø–∏—Å–æ–∫') or line.startswith('–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å') or line.startswith('–ù–∏ –≤ –∫–æ–µ–º'):
                continue
            
            # –ò—â–µ–º –Ω–∞—á–∞–ª–æ –≤–æ–ø—Ä–æ—Å–∞
            if re.match(r'^\d+\.\s+[–ê-–Ø]', line):
                print(f"–°—Ç—Ä–æ–∫–∞ {line_num}: –ù–ê–ô–î–ï–ù –í–û–ü–†–û–° - {line[:50]}...")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å
                if current_question and current_answers:
                    questions.append({
                        "question": current_question,
                        "answers": current_answers.copy()
                    })
                    print(f"  üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å —Å {len(current_answers)} –æ—Ç–≤–µ—Ç–∞–º–∏")
                    current_answers.clear()
                
                # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
                current_question = re.sub(r'^\d+\.\s+', '', line)
                print(f"  üìù –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å: {current_question[:30]}...")
                
            # –ò—â–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
            elif re.match(r'^\s+[1-5]\.\s*', line_original):
                answer_match = re.match(r'^\s+([1-5])\.\s*(.*)', line_original)
                if answer_match:
                    answer_key = answer_match.group(1)
                    answer_text = answer_match.group(2).strip()
                    current_answers[answer_key] = answer_text
                    print(f"–°—Ç—Ä–æ–∫–∞ {line_num}: –û–¢–í–ï–¢ {answer_key} - {answer_text[:30]}...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å
        if current_question and current_answers:
            questions.append({
                "question": current_question,
                "answers": current_answers.copy()
            })
            print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å —Å {len(current_answers)} –æ—Ç–≤–µ—Ç–∞–º–∏")
        
        print(f"\nüìä –ò–¢–û–ì–û –ù–ê–ô–î–ï–ù–û: {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤")
        
        for i, q in enumerate(questions):
            print(f"–í–æ–ø—Ä–æ—Å {i+1}: {q['question'][:50]}... ({len(q['answers'])} –æ—Ç–≤–µ—Ç–æ–≤)")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    debug_soft_parsing()