#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è —à–∫–∞–ª —Ç–µ—Å—Ç–æ–≤
"""
from typing import Dict, Tuple
import math

class TestScaleNormalizer:
    """–ö–ª–∞—Å—Å –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —à–∫–∞–ª —Ä–∞–∑–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –±–∞–ª–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
    TEST_MAXIMUMS = {
        "PAEI": 5,    # 5 –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º –≤—ã–±–æ—Ä–æ–º
        "DISC": 6,    # 6 –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º –≤—ã–±–æ—Ä–æ–º  
        "HEXACO": 5,  # –ö–∞–∂–¥—ã–π —Ñ–∞–∫—Ç–æ—Ä –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è –ø–æ —à–∫–∞–ª–µ 1-5
        "SOFT_SKILLS": 10  # –ö–∞–∂–¥—ã–π –Ω–∞–≤—ã–∫ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è –ø–æ —à–∫–∞–ª–µ 1-10
    }
    
    TARGET_SCALE = 10  # –¶–µ–ª–µ–≤–∞—è —à–∫–∞–ª–∞ –¥–ª—è –≤—Å–µ—Ö –¥–∏–∞–≥—Ä–∞–º–º
    
    @classmethod
    def normalize_paei_scores(cls, scores: Dict[str, float]) -> Dict[str, float]:
        """
        –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –±–∞–ª–ª—ã PAEI –∫ —à–∫–∞–ª–µ 0-10
        
        Args:
            scores: –ò—Å—Ö–æ–¥–Ω—ã–µ –±–∞–ª–ª—ã PAEI {"P": count, "A": count, "E": count, "I": count}
            
        Returns:
            –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –±–∞–ª–ª—ã –∫ —à–∫–∞–ª–µ 0-10
        """
        max_possible = cls.TEST_MAXIMUMS["PAEI"]
        normalized = {}
        
        for key, value in scores.items():
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ —à–∫–∞–ª–µ 0-10
            normalized[key] = (value / max_possible) * cls.TARGET_SCALE
            
        return normalized
    
    @classmethod
    def normalize_disc_scores(cls, scores: Dict[str, float]) -> Dict[str, float]:
        """
        –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –±–∞–ª–ª—ã DISC –∫ —à–∫–∞–ª–µ 0-10
        
        Args:
            scores: –ò—Å—Ö–æ–¥–Ω—ã–µ –±–∞–ª–ª—ã DISC {"D": count, "I": count, "S": count, "C": count}
            
        Returns:
            –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –±–∞–ª–ª—ã –∫ —à–∫–∞–ª–µ 0-10
        """
        max_possible = cls.TEST_MAXIMUMS["DISC"]
        normalized = {}
        
        for key, value in scores.items():
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ —à–∫–∞–ª–µ 0-10
            normalized[key] = (value / max_possible) * cls.TARGET_SCALE
            
        return normalized
    
    @classmethod
    def normalize_hexaco_scores(cls, scores: Dict[str, float]) -> Dict[str, float]:
        """
        –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –±–∞–ª–ª—ã HEXACO –∫ —à–∫–∞–ª–µ 0-10
        
        Args:
            scores: –ò—Å—Ö–æ–¥–Ω—ã–µ –±–∞–ª–ª—ã HEXACO –ø–æ —à–∫–∞–ª–µ 1-5
            
        Returns:
            –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –±–∞–ª–ª—ã –∫ —à–∫–∞–ª–µ 0-10
        """
        normalized = {}
        
        for key, value in scores.items():
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∏–∑ —à–∫–∞–ª—ã 1-5 –≤ —à–∫–∞–ª—É 0-10
            # (value - 1) –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ 0-4, –∑–∞—Ç–µ–º * 2.5 –¥–∞–µ—Ç 0-10
            normalized[key] = ((value - 1) / 4) * cls.TARGET_SCALE
            
        return normalized
    
    @classmethod
    def normalize_soft_skills_scores(cls, scores: Dict[str, float]) -> Dict[str, float]:
        """
        –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –±–∞–ª–ª—ã Soft Skills –∫ —à–∫–∞–ª–µ 0-10
        
        Args:
            scores: –ò—Å—Ö–æ–¥–Ω—ã–µ –±–∞–ª–ª—ã Soft Skills –ø–æ —à–∫–∞–ª–µ 1-10
            
        Returns:
            –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –±–∞–ª–ª—ã –∫ —à–∫–∞–ª–µ 0-10
        """
        normalized = {}
        
        for key, value in scores.items():
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∏–∑ —à–∫–∞–ª—ã 1-10 –≤ —à–∫–∞–ª—É 0-10
            normalized[key] = value - 1
            
        return normalized
    
    @classmethod
    def auto_normalize(cls, test_type: str, scores: Dict[str, float]) -> Tuple[Dict[str, float], str]:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –±–∞–ª–ª—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç–µ—Å—Ç–∞
        
        Args:
            test_type: –¢–∏–ø —Ç–µ—Å—Ç–∞ ("PAEI", "DISC", "HEXACO", "SOFT_SKILLS")
            scores: –ò—Å—Ö–æ–¥–Ω—ã–µ –±–∞–ª–ª—ã
            
        Returns:
            Tuple –∏–∑ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –∏ –æ–ø–∏—Å–∞–Ω–∏—è –º–µ—Ç–æ–¥–∞
        """
        test_type = test_type.upper()
        
        if test_type == "PAEI":
            normalized = cls.normalize_paei_scores(scores)
            method = f"PAEI: –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è {cls.TEST_MAXIMUMS['PAEI']} –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Üí —à–∫–∞–ª–∞ 0-10"
        elif test_type == "DISC":
            normalized = cls.normalize_disc_scores(scores)
            method = f"DISC: –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è {cls.TEST_MAXIMUMS['DISC']} –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Üí —à–∫–∞–ª–∞ 0-10"
        elif test_type == "HEXACO":
            normalized = cls.normalize_hexaco_scores(scores)
            method = "HEXACO: —à–∫–∞–ª–∞ 1-5 ‚Üí —à–∫–∞–ª–∞ 0-10"
        elif test_type == "SOFT_SKILLS":
            normalized = cls.normalize_soft_skills_scores(scores)
            method = "Soft Skills: —à–∫–∞–ª–∞ 1-10 ‚Üí —à–∫–∞–ª–∞ 0-10"
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            normalized = scores.copy()
            method = f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø {test_type}: –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π"
        
        return normalized, method
    
    @classmethod
    def get_test_info(cls, test_type: str) -> Dict[str, any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ
        
        Args:
            test_type: –¢–∏–ø —Ç–µ—Å—Ç–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ—Å—Ç–µ
        """
        test_type = test_type.upper()
        
        if test_type in cls.TEST_MAXIMUMS:
            return {
                "max_score": cls.TEST_MAXIMUMS[test_type],
                "target_scale": cls.TARGET_SCALE,
                "scale_type": "–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä" if test_type in ["PAEI", "DISC"] else "–ø—Ä—è–º–∞—è –æ—Ü–µ–Ω–∫–∞"
            }
        else:
            return {
                "max_score": "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                "target_scale": cls.TARGET_SCALE,
                "scale_type": "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            }

def test_scale_normalization():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —à–∫–∞–ª"""
    print("üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–ò –®–ö–ê–õ")
    print("=" * 60)
    
    normalizer = TestScaleNormalizer()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
    test_cases = [
        {
            "test_type": "PAEI",
            "description": "–ü—Ä–æ–±–ª–µ–º–Ω—ã–π —Å–ª—É—á–∞–π - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π A",
            "scores": {"P": 1, "A": 5, "E": 0, "I": 0}  # –ú–∞–∫—Å–∏–º—É–º 5 –±–∞–ª–ª–æ–≤ –∑–∞ 5 –≤–æ–ø—Ä–æ—Å–æ–≤
        },
        {
            "test_type": "DISC", 
            "description": "–ü—Ä–æ–±–ª–µ–º–Ω—ã–π —Å–ª—É—á–∞–π - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π D",
            "scores": {"D": 6, "I": 0, "S": 1, "C": 0}  # –ú–∞–∫—Å–∏–º—É–º 6 –±–∞–ª–ª–æ–≤ –∑–∞ 6 –≤–æ–ø—Ä–æ—Å–æ–≤
        },
        {
            "test_type": "HEXACO",
            "description": "–°—Ä–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ HEXACO",
            "scores": {"H": 3.5, "E": 4.2, "X": 2.8, "A": 4.0, "C": 3.1, "O": 4.5}
        },
        {
            "test_type": "SOFT_SKILLS",
            "description": "–í—ã—Å–æ–∫–∏–µ soft skills",
            "scores": {"–õ–∏–¥–µ—Ä—Å—Ç–≤–æ": 9, "–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è": 8, "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ": 7}
        }
    ]
    
    for i, case in enumerate(test_cases, 1):
        print(f"\nüìä –¢–µ—Å—Ç {i}: {case['description']}")
        print(f"–¢–∏–ø: {case['test_type']}")
        print(f"–ò—Å—Ö–æ–¥–Ω—ã–µ –±–∞–ª–ª—ã: {case['scores']}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ
        test_info = normalizer.get_test_info(case['test_type'])
        print(f"–ú–∞–∫—Å. –≤–æ–∑–º–æ–∂–Ω—ã–π –±–∞–ª–ª: {test_info['max_score']}")
        print(f"–¢–∏–ø —à–∫–∞–ª—ã: {test_info['scale_type']}")
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º
        normalized, method = normalizer.auto_normalize(case['test_type'], case['scores'])
        print(f"–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –±–∞–ª–ª—ã: {normalized}")
        print(f"–ú–µ—Ç–æ–¥: {method}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è
        if case['scores']:
            orig_max = max(case['scores'].values())
            orig_min = min(v for v in case['scores'].values() if v > 0)
            orig_ratio = orig_max / orig_min if orig_min > 0 else float('inf')
            
            norm_max = max(normalized.values())
            norm_min = min(v for v in normalized.values() if v > 0)  
            norm_ratio = norm_max / norm_min if norm_min > 0 else float('inf')
            
            print(f"–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –¥–æ: {orig_ratio:.2f}")
            print(f"–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø–æ—Å–ª–µ: {norm_ratio:.2f}")
    
    print(f"\n‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print(f"–¢–µ–ø–µ—Ä—å –≤—Å–µ —Ç–µ—Å—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –µ–¥–∏–Ω—É—é —à–∫–∞–ª—É 0-10 —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏—è–º–∏!")

if __name__ == "__main__":
    print("üöÄ –°–ò–°–¢–ï–ú–ê –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–ò –®–ö–ê–õ –¢–ï–°–¢–û–í")
    print("=" * 70)
    
    try:
        test_scale_normalization()
        
        print(f"\nüí° –ö–õ–Æ–ß–ï–í–´–ï –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:")
        print(f"1. –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –∫ –µ–¥–∏–Ω–æ–π —à–∫–∞–ª–µ 0-10")
        print(f"2. –£—á—Ç–µ–Ω—ã –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –≤ PAEI/DISC")
        print(f"3. –ü—Ä–æ–ø–æ—Ä—Ü–∏–∏ –º–µ–∂–¥—É —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        print(f"4. –î–∏–∞–≥—Ä–∞–º–º—ã —Å—Ç–∞–ª–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–∏–º—ã–º–∏ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()