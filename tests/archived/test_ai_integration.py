#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–π —Å –Ω–æ–≤—ã–º–∏ –æ–±—Ä–∞–∑—Ü–∞–º–∏
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_ai_interpreter():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä —Å –Ω–æ–≤—ã–º–∏ –æ–±—Ä–∞–∑—Ü–∞–º–∏"""
    
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∞ —Å –Ω–æ–≤—ã–º–∏ –æ–±—Ä–∞–∑—Ü–∞–º–∏")
    print("=" * 60)
    
    try:
        from src.psytest.ai_interpreter import get_ai_interpreter
        
        # –ü–æ–ª—É—á–∞–µ–º AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä
        ai_interpreter = get_ai_interpreter()
        
        if not ai_interpreter:
            print("‚ö†Ô∏è AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–µ—Ç OPENAI_API_KEY)")
            print("   –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–æ–º–ø—Ç–æ–≤...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –Ω–æ–≤—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
            from src.psytest.prompts import load_prompt
            
            try:
                adizes_prompt = load_prompt("adizes_system_res.txt")
                print("‚úÖ –ü—Ä–æ–º–ø—Ç adizes_system_res.txt –∑–∞–≥—Ä—É–∂–µ–Ω")
                print(f"   –†–∞–∑–º–µ—Ä: {len(adizes_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                disc_prompt = load_prompt("disk_system_res.txt") 
                print("‚úÖ –ü—Ä–æ–º–ø—Ç disk_system_res.txt –∑–∞–≥—Ä—É–∂–µ–Ω")
                print(f"   –†–∞–∑–º–µ—Ä: {len(disc_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                hexaco_prompt = load_prompt("hexaco_system_res.txt")
                print("‚úÖ –ü—Ä–æ–º–ø—Ç hexaco_system_res.txt –∑–∞–≥—Ä—É–∂–µ–Ω") 
                print(f"   –†–∞–∑–º–µ—Ä: {len(hexaco_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                soft_prompt = load_prompt("soft_system_res.txt")
                print("‚úÖ –ü—Ä–æ–º–ø—Ç soft_system_res.txt –∑–∞–≥—Ä—É–∂–µ–Ω")
                print(f"   –†–∞–∑–º–µ—Ä: {len(soft_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                return True
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤: {e}")
                return False
        
        print("‚úÖ AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_paei = {"P": 7.5, "A": 6.0, "E": 4.2, "I": 8.1}
        test_disc = {"D": 6.8, "I": 5.4, "S": 7.2, "C": 8.0}
        test_hexaco = {"H": 7.8, "E": 5.2, "X": 6.4, "A": 8.1, "C": 7.5, "O": 4.9}
        test_soft_skills = {
            "–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è": 7.5, "–õ–∏–¥–µ—Ä—Å—Ç–≤–æ": 6.8, "–†–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ": 8.2,
            "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ": 7.1, "–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º": 7.8, "–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å": 6.5,
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–µ–º": 7.0, "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç": 8.5, 
            "–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å": 6.2, "–°—Ç—Ä–µ—Å—Å–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å": 7.4
        }
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
        print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–π:")
        
        try:
            paei_interp = ai_interpreter.interpret_paei(test_paei)
            print(f"‚úÖ PAEI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ ({len(paei_interp)} —Å–∏–º–≤–æ–ª–æ–≤)")
            
            disc_interp = ai_interpreter.interpret_disc(test_disc)
            print(f"‚úÖ DISC –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ ({len(disc_interp)} —Å–∏–º–≤–æ–ª–æ–≤)")
            
            hexaco_interp = ai_interpreter.interpret_hexaco(test_hexaco)
            print(f"‚úÖ HEXACO –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ ({len(hexaco_interp)} —Å–∏–º–≤–æ–ª–æ–≤)")
            
            soft_interp = ai_interpreter.interpret_soft_skills(test_soft_skills)
            print(f"‚úÖ Soft Skills –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ ({len(soft_interp)} —Å–∏–º–≤–æ–ª–æ–≤)")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–π: {e}")
            return False
            
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def test_telegram_bot_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é AI –≤ Telegram –±–æ—Ç"""
    
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ AI –≤ Telegram –±–æ—Ç")
    print("=" * 50)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –±–æ—Ç–∞
        import telegram_test_bot
        from src.psytest.ai_interpreter import get_ai_interpreter
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ
        if hasattr(telegram_test_bot, 'get_ai_interpreter'):
            print("‚úÖ AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ Telegram –±–æ—Ç")
        else:
            print("‚ùå AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä –ù–ï –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ Telegram –±–æ—Ç")
            return False
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Å—Å–∏—é
        session = telegram_test_bot.UserSession("–¢–µ—Å—Ç –Æ–∑–µ—Ä")
        session.paei_scores = {"P": 7.5, "A": 6.0, "E": 4.2, "I": 8.1}
        session.disc_scores = {"D": 6.8, "I": 5.4, "S": 7.2, "C": 8.0}
        session.hexaco_scores = {"H": 7.8, "E": 5.2, "X": 6.4, "A": 8.1, "C": 7.5, "O": 4.9}
        session.soft_skills_scores = {
            "–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è": 7.5, "–õ–∏–¥–µ—Ä—Å—Ç–≤–æ": 6.8, "–†–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ": 8.2,
            "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ": 7.1, "–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º": 7.8, "–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å": 6.5,
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–µ–º": 7.0, "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç": 8.5, 
            "–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å": 6.2, "–°—Ç—Ä–µ—Å—Å–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å": 7.4
        }
        session.user_id = 12345
        session.name = "–¢–µ—Å—Ç –Æ–∑–µ—Ä"
        
        print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_pdf_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é PDF —Å –Ω–æ–≤—ã–º–∏ AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è–º–∏"""
    
    print("\nüìÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF —Å AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è–º–∏")
    print("=" * 55)
    
    try:
        from enhanced_pdf_report_v2 import EnhancedPDFReportV2
        from src.psytest.ai_interpreter import get_ai_interpreter
        from pathlib import Path
        from datetime import datetime
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_data = {
            "paei_scores": {"P": 7.5, "A": 6.0, "E": 4.2, "I": 8.1},
            "disc_scores": {"D": 6.8, "I": 5.4, "S": 7.2, "C": 8.0},
            "hexaco_scores": {"H": 7.8, "E": 5.2, "X": 6.4, "A": 8.1, "C": 7.5, "O": 4.9},
            "soft_skills_scores": {
                "–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è": 7.5, "–õ–∏–¥–µ—Ä—Å—Ç–≤–æ": 6.8, "–†–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ": 8.2,
                "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ": 7.1, "–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º": 7.8, "–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å": 6.5,
                "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–µ–º": 7.0, "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç": 8.5, 
                "–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å": 6.2, "–°—Ç—Ä–µ—Å—Å–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å": 7.4
            }
        }
        
        # –ü–æ–ª—É—á–∞–µ–º AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä  
        ai_interpreter = get_ai_interpreter()
        
        if ai_interpreter:
            print("‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏...")
            try:
                interpretations = {
                    "paei": ai_interpreter.interpret_paei(test_data["paei_scores"]),
                    "disc": ai_interpreter.interpret_disc(test_data["disc_scores"]),
                    "hexaco": ai_interpreter.interpret_hexaco(test_data["hexaco_scores"]),
                    "soft_skills": ai_interpreter.interpret_soft_skills(test_data["soft_skills_scores"])
                }
                print("‚úÖ AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ AI, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏: {e}")
                interpretations = {
                    "paei": "–ë–∞–∑–æ–≤–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è PAEI",
                    "disc": "–ë–∞–∑–æ–≤–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è DISC", 
                    "hexaco": "–ë–∞–∑–æ–≤–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è HEXACO",
                    "soft_skills": "–ë–∞–∑–æ–≤–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è Soft Skills"
                }
        else:
            print("‚ö†Ô∏è AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏")
            interpretations = {
                "paei": "–ë–∞–∑–æ–≤–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è PAEI",
                "disc": "–ë–∞–∑–æ–≤–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è DISC",
                "hexaco": "–ë–∞–∑–æ–≤–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è HEXACO", 
                "soft_skills": "–ë–∞–∑–æ–≤–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è Soft Skills"
            }
        
        # –°–æ–∑–¥–∞–µ–º PDF –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        pdf_generator = EnhancedPDFReportV2()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
        output_path = Path("test_ai_interpretation_report.pdf")
        
        pdf_generator.generate_enhanced_report(
            participant_name="–¢–µ—Å—Ç –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏",
            test_date=datetime.now().strftime("%d.%m.%Y"),
            paei_scores=test_data["paei_scores"],
            disc_scores=test_data["disc_scores"],
            hexaco_scores=test_data["hexaco_scores"],
            soft_skills_scores=test_data["soft_skills_scores"],
            ai_interpretations=interpretations,
            out_path=output_path
        )
        
        if output_path.exists():
            file_size = output_path.stat().st_size / 1024
            print(f"‚úÖ PDF –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {output_path}")
            print(f"   –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size:.1f} KB")
            return True
        else:
            print("‚ùå PDF —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF: {e}")
        return False

if __name__ == "__main__":
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–ù–û–í–õ–ï–ù–ù–´–• AI –ò–ù–¢–ï–†–ü–†–ï–¢–ê–¶–ò–ô")
    print("=" * 60)
    print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä
    ai_ok = test_ai_interpreter()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –≤ Telegram –±–æ—Ç
    bot_ok = test_telegram_bot_integration()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é PDF
    pdf_ok = test_pdf_generation()
    
    print()
    print("üìã –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"   AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä: {'‚úÖ –û–ö' if ai_ok else '‚ùå –û–®–ò–ë–ö–ê'}")
    print(f"   –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ –±–æ—Ç: {'‚úÖ –û–ö' if bot_ok else '‚ùå –û–®–ò–ë–ö–ê'}")
    print(f"   –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF: {'‚úÖ –û–ö' if pdf_ok else '‚ùå –û–®–ò–ë–ö–ê'}")
    
    if ai_ok and bot_ok and pdf_ok:
        print()
        print("üéØ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("   –ù–æ–≤—ã–µ AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    else:
        print()
        print("‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´!")
        print("   –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏.")