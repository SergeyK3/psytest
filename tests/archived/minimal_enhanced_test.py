#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ô –¢–ï–°–¢ enhanced_pdf_report_v2.py
–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —à–∞–≥–∞–º
"""

from pathlib import Path
from datetime import datetime
from enhanced_pdf_report_v2 import EnhancedPDFReportV2
import traceback
import sys

def minimal_test():
    """
    –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å –ø–µ—Ä–µ—Ö–≤–∞—Ç–æ–º –≤—Å–µ—Ö –æ—à–∏–±–æ–∫
    """
    print("üîç –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ô –¢–ï–°–¢ ENHANCED PDF")
    print("=" * 50)
    
    try:
        print("1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞...")
        generator = EnhancedPDFReportV2()
        print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω")
        
        print("2Ô∏è‚É£ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        participant_name = "Test User"
        test_date = "2025-10-05"
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        paei_scores = {"P": 5, "A": 5, "E": 5, "I": 5}
        disc_scores = {"D": 5, "I": 5, "S": 5, "C": 5}
        hexaco_scores = {"H": 3, "E": 3, "X": 3, "A": 3, "C": 3, "O": 3}
        soft_skills_scores = {"–õ–∏–¥–µ—Ä—Å—Ç–≤–æ": 5, "–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è": 5}
        
        ai_interpretations = {
            "PAEI": "Test PAEI interpretation",
            "DISC": "Test DISC interpretation",
            "HEXACO": "Test HEXACO interpretation", 
            "SOFT_SKILLS": "Test soft skills interpretation"
        }
        print("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã")
        
        print("3Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ PDF...")
        out_path = Path("minimal_test.pdf")
        
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –æ—à–∏–±–∫–∏ –≤ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        with open("debug_log.txt", "w", encoding="utf-8") as log_file:
            original_stderr = sys.stderr
            sys.stderr = log_file
            
            try:
                pdf_path = generator.generate_enhanced_report(
                    participant_name=participant_name,
                    test_date=test_date,
                    paei_scores=paei_scores,
                    disc_scores=disc_scores,
                    hexaco_scores=hexaco_scores,
                    soft_skills_scores=soft_skills_scores,
                    ai_interpretations=ai_interpretations,
                    out_path=out_path
                )
            finally:
                sys.stderr = original_stderr
        
        print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        print("4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
        if out_path.exists():
            size = out_path.stat().st_size
            print(f"‚úÖ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: {out_path}")
            print(f"üìä –†–∞–∑–º–µ—Ä: {size} –±–∞–π—Ç")
            
            # –ß–∏—Ç–∞–µ–º –ª–æ–≥ –æ—à–∏–±–æ–∫
            if Path("debug_log.txt").exists():
                with open("debug_log.txt", "r", encoding="utf-8") as f:
                    log_content = f.read()
                    if log_content.strip():
                        print("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è/–æ—à–∏–±–∫–∏:")
                        print(log_content)
                    else:
                        print("‚úÖ –û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        else:
            print("‚ùå –§–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω")
            
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        traceback.print_exc()

if __name__ == "__main__":
    minimal_test()