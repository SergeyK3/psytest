#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ —Ñ–∞–π–ª–æ–≤ "_user.txt"
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from telegram_test_bot import parse_paei_questions, parse_disc_questions, parse_hexaco_questions, parse_soft_skills_questions

def test_question_loading():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤"""
    
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –ø—Ä–æ–º–ø—Ç–æ–≤...")
    
    # –¢–µ—Å—Ç PAEI
    print("\n--- –¢–ï–°–¢ PAEI ---")
    paei_questions = parse_paei_questions()
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ PAEI: {len(paei_questions)}")
    
    if paei_questions:
        first_q = paei_questions[0]
        print(f"–ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å: {first_q['question'][:50]}...")
        print(f"–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤: {list(first_q['answers'].keys())}")
    
    # –¢–µ—Å—Ç DISC  
    print("\n--- –¢–ï–°–¢ DISC ---")
    disc_questions = parse_disc_questions()
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ DISC: {len(disc_questions)}")
    
    if disc_questions:
        first_q = disc_questions[0]
        print(f"–ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å: {first_q['question'][:50]}...")
        print(f"–®–∫–∞–ª–∞: {first_q.get('scale', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}")
    
    # –¢–µ—Å—Ç HEXACO
    print("\n--- –¢–ï–°–¢ HEXACO ---")
    hexaco_questions = parse_hexaco_questions()
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ HEXACO: {len(hexaco_questions)}")
    
    if hexaco_questions:
        first_q = hexaco_questions[0]
        print(f"–ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å: {first_q['question'][:50]}...")
        print(f"–®–∫–∞–ª–∞: {first_q.get('scale', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}")
    
    # –¢–µ—Å—Ç Soft Skills
    print("\n--- –¢–ï–°–¢ SOFT SKILLS ---")
    soft_questions = parse_soft_skills_questions()
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ Soft Skills: {len(soft_questions)}")
    
    if soft_questions:
        first_q = soft_questions[0]
        print(f"–ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å: {first_q['question'][:50]}...")
        if 'answers' in first_q:
            print(f"–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤: {list(first_q['answers'].keys())}")
        else:
            print("–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤: —à–∫–∞–ª–∞ 1-5")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print(f"\nüìä –ò–¢–û–ì–û:")
    print(f"PAEI: {len(paei_questions)} –≤–æ–ø—Ä–æ—Å–æ–≤")
    print(f"DISC: {len(disc_questions)} –≤–æ–ø—Ä–æ—Å–æ–≤") 
    print(f"HEXACO: {len(hexaco_questions)} –≤–æ–ø—Ä–æ—Å–æ–≤")
    print(f"Soft Skills: {len(soft_questions)} –≤–æ–ø—Ä–æ—Å–æ–≤")
    
    total_questions = len(paei_questions) + len(disc_questions) + len(hexaco_questions) + len(soft_questions)
    print(f"–í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {total_questions} –≤–æ–ø—Ä–æ—Å–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏
    success = True
    
    if len(paei_questions) == 0:
        print("‚ùå PAEI: –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        success = False
    
    if len(disc_questions) == 0:
        print("‚ùå DISC: –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        success = False
        
    if len(hexaco_questions) == 0:
        print("‚ùå HEXACO: –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        success = False
        
    if len(soft_questions) == 0:
        print("‚ùå Soft Skills: –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        success = False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤ PAEI
    if paei_questions:
        for i, q in enumerate(paei_questions):
            if 'question' not in q or 'answers' not in q:
                print(f"‚ùå PAEI –≤–æ–ø—Ä–æ—Å {i+1}: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
                success = False
            elif not all(k in q['answers'] for k in ['P', 'A', 'E', 'I']):
                print(f"‚ùå PAEI –≤–æ–ø—Ä–æ—Å {i+1}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã P/A/E/I")
                success = False
    
    if success:
        print("\n‚úÖ –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –≤–æ–ø—Ä–æ—Å–æ–≤!")
    
    return success

def test_question_samples():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
    
    print("\nüîç –ü—Ä–∏–º–µ—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:")
    
    paei_questions = parse_paei_questions()
    if paei_questions:
        print(f"\n--- –ü–†–ò–ú–ï–† PAEI ---")
        q = paei_questions[0]
        print(f"–í–æ–ø—Ä–æ—Å: {q['question']}")
        for key, answer in q['answers'].items():
            print(f"  {key}. {answer}")
    
    disc_questions = parse_disc_questions()
    if disc_questions:
        print(f"\n--- –ü–†–ò–ú–ï–† DISC ---")
        q = disc_questions[0]
        print(f"–í–æ–ø—Ä–æ—Å: {q['question']}")
        print(f"–®–∫–∞–ª–∞: {q.get('scale', '1-5')}")
    
    hexaco_questions = parse_hexaco_questions()
    if hexaco_questions:
        print(f"\n--- –ü–†–ò–ú–ï–† HEXACO ---")
        q = hexaco_questions[0]
        print(f"–í–æ–ø—Ä–æ—Å: {q['question']}")
        print(f"–®–∫–∞–ª–∞: {q.get('scale', '1-5')}")
    
    soft_questions = parse_soft_skills_questions()
    if soft_questions:
        print(f"\n--- –ü–†–ò–ú–ï–† SOFT SKILLS ---")
        q = soft_questions[0]
        print(f"–í–æ–ø—Ä–æ—Å: {q['question']}")
        if 'answers' in q:
            for key, answer in q['answers'].items():
                print(f"  {key}. {answer}")

if __name__ == "__main__":
    print("üîÑ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤...")
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
    success = test_question_loading()
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã
    test_question_samples()
    
    if success:
        print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—è–≤–∏–ª–æ –ø—Ä–æ–±–ª–µ–º—ã!")
        exit(1)