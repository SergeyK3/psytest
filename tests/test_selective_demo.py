#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç —Å —Å–µ–ª–µ–∫—Ç–∏–≤–Ω–æ–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π
"""

import sys
sys.path.append('.')

from enhanced_pdf_report_v2 import EnhancedPDFReportV2
from scale_normalizer import ScaleNormalizer
from datetime import datetime
from pathlib import Path

def create_selective_normalization_demo():
    """–°–æ–∑–¥–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç —Å —Å–µ–ª–µ–∫—Ç–∏–≤–Ω–æ–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
    print("üìä –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Å —Å–µ–ª–µ–∫—Ç–∏–≤–Ω–æ–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –î–û –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
    original_data = {
        "paei": {"P": 1, "A": 5, "E": 2, "I": 0},  # –ú–∞–∫—Å–∏–º—É–º A=5, –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç—Å—è
        "disc": {"D": 6, "I": 1, "S": 2, "C": 0},  # –ú–∞–∫—Å–∏–º—É–º D=6, –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç—Å—è
        "hexaco": {"H": 2.3, "E": 4.7, "X": 1.9, "A": 3.6, "C": 2.1, "O": 4.4},  # –û—Å—Ç–∞–µ—Ç—Å—è 1-5
        "soft_skills": {"–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è": 7.8, "–õ–∏–¥–µ—Ä—Å—Ç–≤–æ": 6.3, "–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å": 8.9, "–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å": 5.4}  # –û—Å—Ç–∞–µ—Ç—Å—è 1-10
    }
    
    print("üìà –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    for test_type, scores in original_data.items():
        print(f"   {test_type.upper()}: {scores}")
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–µ–ª–µ–∫—Ç–∏–≤–Ω—É—é –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é
    print("\nüîÑ –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–µ–ª–µ–∫—Ç–∏–≤–Ω—É—é –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é...")
    processed_data = {}
    normalization_info = {}
    
    for test_type, scores in original_data.items():
        processed_scores, method = ScaleNormalizer.auto_normalize(test_type.upper(), scores)
        processed_data[test_type] = processed_scores
        normalization_info[test_type] = method
        print(f"   {test_type.upper()}: {processed_scores}")
        print(f"      ‚îî‚îÄ {method}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    print("\nüìÑ –°–æ–∑–¥–∞–Ω–∏–µ PDF –æ—Ç—á–µ—Ç–∞...")
    
    try:
        generator = EnhancedPDFReportV2()
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
        ai_interpretations = {
            "paei": "PAEI —Å —Å–µ–ª–µ–∫—Ç–∏–≤–Ω–æ–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π: –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –∫ —à–∫–∞–ª–µ 0-10 –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–π",
            "disc": "DISC —Å —Å–µ–ª–µ–∫—Ç–∏–≤–Ω–æ–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π: –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –∫ —à–∫–∞–ª–µ 0-10 –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–π", 
            "hexaco": "HEXACO –±–µ–∑ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —à–∫–∞–ª–∞ 1-5 –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏",
            "soft_skills": "Soft Skills –±–µ–∑ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —à–∫–∞–ª–∞ 1-10 –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –Ω–∞–≤—ã–∫–æ–≤"
        }
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        filename = f"selective_normalization_demo_{timestamp}.pdf"
        out_path = Path(filename)
        
        pdf_path = generator.generate_enhanced_report(
            participant_name="–î–µ–º–æ –°–µ–ª–µ–∫—Ç–∏–≤–Ω–∞—è –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è",
            test_date=datetime.now().strftime("%d.%m.%Y"),
            paei_scores=processed_data["paei"],
            disc_scores=processed_data["disc"],
            hexaco_scores=processed_data["hexaco"],
            soft_skills_scores=processed_data["soft_skills"],
            ai_interpretations=ai_interpretations,
            out_path=out_path
        )
        
        print(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {pdf_path}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏–π
        print(f"\nüìã –°–≤–æ–¥–∫–∞ —Å–µ–ª–µ–∫—Ç–∏–≤–Ω–æ–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏:")
        print(f"   üìà PAEI: {original_data['paei']} ‚Üí {processed_data['paei']}")
        print(f"      ‚îî‚îÄ –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ –∫ 0-10 (A: 5‚Üí10.0)")
        print(f"   üìà DISC: {original_data['disc']} ‚Üí {processed_data['disc']}")
        print(f"      ‚îî‚îÄ –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ –∫ 0-10 (D: 6‚Üí10.0)")
        print(f"   üìä HEXACO: –æ—Å—Ç–∞–ª—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π (—à–∫–∞–ª–∞ 1-5)")
        print(f"   üìä SOFT_SKILLS: –æ—Å—Ç–∞–ª—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π (—à–∫–∞–ª–∞ 1-10)")
        
        return pdf_path
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        return None

if __name__ == "__main__":
    pdf_path = create_selective_normalization_demo()
    
    if pdf_path:
        print(f"\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç —Å —Å–µ–ª–µ–∫—Ç–∏–≤–Ω–æ–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π –≥–æ—Ç–æ–≤!")
        print(f"üìÅ –§–∞–π–ª: {pdf_path}")
        print(f"\nüîç –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:")
        print(f"   ‚úÖ PAEI/DISC: –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω—ã –∫ 0-10 –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø—Ä–æ–ø–æ—Ä—Ü–∏–π –¥–∏–∞–≥—Ä–∞–º–º")
        print(f"   ‚úÖ HEXACO: –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —à–∫–∞–ª–∞ 1-5 –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏")
        print(f"   ‚úÖ SOFT_SKILLS: –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —à–∫–∞–ª–∞ 1-10 –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Ü–µ–Ω–∫–∏")
        print(f"   ‚úÖ –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ–∫—Ä—É–≥–ª–µ–Ω—ã –¥–æ 1 –¥–µ—Å—è—Ç–∏—á–Ω–æ–≥–æ –∑–Ω–∞–∫–∞")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç")