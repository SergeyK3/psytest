#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∏–∞–≥—Ä–∞–º–º
"""
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, str(Path(__file__).parent / "src"))

from psytest.charts import make_radar, make_bar_chart

def test_updated_charts():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –¥–∏–∞–≥—Ä–∞–º–º"""
    print("üé® –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–ù–û–í–õ–ï–ù–ù–û–ô –°–ò–°–¢–ï–ú–´ –î–ò–ê–ì–†–ê–ú–ú")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    test_dir = Path("test_updated_charts")
    test_dir.mkdir(exist_ok=True)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏ —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    test_cases = [
        {
            "name": "PAEI - –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π A",
            "labels": ["P", "A", "E", "I"],
            "values": [1.0, 10.0, 1.0, 1.0],
            "type": "PAEI"
        },
        {
            "name": "DISC - –î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π D",
            "labels": ["D", "I", "S", "C"],
            "values": [7.8, 1.0, 3.2, 1.0],
            "type": "DISC"
        },
        {
            "name": "–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å",
            "labels": ["A", "B", "C", "D"],
            "values": [6.0, 7.0, 5.0, 6.0],
            "type": "Balanced"
        },
        {
            "name": "–°—Ä–µ–¥–Ω–∏–π –¥–∏—Å–±–∞–ª–∞–Ω—Å", 
            "labels": ["X", "Y", "Z", "W"],
            "values": [2.0, 8.0, 3.0, 4.0],
            "type": "Medium"
        }
    ]
    
    results = []
    
    for i, case in enumerate(test_cases, 1):
        print(f"\nüìä –¢–µ—Å—Ç {i}: {case['name']}")
        print(f"–ó–Ω–∞—á–µ–Ω–∏—è: {case['values']}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        radar_norm = test_dir / f"radar_{i}_normalized.png"
        bar_norm = test_dir / f"bar_{i}_normalized.png"
        
        make_radar(case['labels'], case['values'], radar_norm, 
                  title=f"{case['name']} - –†–∞–¥–∞—Ä (–ù–æ—Ä–º)", normalize=True)
        
        make_bar_chart(case['labels'], case['values'], bar_norm,
                      title=f"{case['name']} - –°—Ç–æ–ª–±—Ü—ã (–ù–æ—Ä–º)", normalize=True)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–µ–∑ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        radar_orig = test_dir / f"radar_{i}_original.png"
        bar_orig = test_dir / f"bar_{i}_original.png"
        
        make_radar(case['labels'], case['values'], radar_orig,
                  title=f"{case['name']} - –†–∞–¥–∞—Ä (–û—Ä–∏–≥)", normalize=False, max_value=10)
        
        make_bar_chart(case['labels'], case['values'], bar_orig,
                      title=f"{case['name']} - –°—Ç–æ–ª–±—Ü—ã (–û—Ä–∏–≥)", normalize=False, max_value=10)
        
        print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–æ: {radar_norm.name}, {bar_norm.name}")
        print(f"  ‚úÖ –î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {radar_orig.name}, {bar_orig.name}")
        
        results.append({
            "case": case['name'],
            "values": case['values'],
            "normalized": [radar_norm, bar_norm],
            "original": [radar_orig, bar_orig]
        })
    
    print(f"\nüéâ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"–°–æ–∑–¥–∞–Ω–æ {len(results) * 4} –¥–∏–∞–≥—Ä–∞–º–º –≤ –ø–∞–ø–∫–µ: {test_dir}")
    print("\nüí° –°–†–ê–í–ù–ò–¢–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print("- *_normalized.png - –° –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π (—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)")
    print("- *_original.png - –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏)")
    print("\n–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∏–∑—É–∞–ª—å–Ω–æ –±–æ–ª–µ–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏!")
    
    return results

def test_normalization_methods():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏"""
    print(f"\nüî¨ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ï–¢–û–î–û–í –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–ò")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    methods_dir = Path("test_normalization_methods")
    methods_dir.mkdir(exist_ok=True)
    
    # –ü—Ä–æ–±–ª–µ–º–Ω—ã–π —Å–ª—É—á–∞–π
    labels = ["P", "A", "E", "I"]
    values = [1.0, 10.0, 1.0, 1.0]
    methods = ["adaptive", "sqrt", "log", "minmax", "none"]
    
    print(f"–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {dict(zip(labels, values))}")
    
    for method in methods:
        print(f"\nüîß –ú–µ—Ç–æ–¥: {method}")
        
        radar_path = methods_dir / f"radar_method_{method}.png"
        bar_path = methods_dir / f"bar_method_{method}.png"
        
        if method == "none":
            make_radar(labels, values, radar_path,
                      title=f"–†–∞–¥–∞—Ä - {method}", normalize=False, max_value=10)
            make_bar_chart(labels, values, bar_path,
                          title=f"–°—Ç–æ–ª–±—Ü—ã - {method}", normalize=False, max_value=10)
        else:
            make_radar(labels, values, radar_path,
                      title=f"–†–∞–¥–∞—Ä - {method}", normalize=True, normalize_method=method)
            make_bar_chart(labels, values, bar_path,
                          title=f"–°—Ç–æ–ª–±—Ü—ã - {method}", normalize=True, normalize_method=method)
        
        print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–æ: {radar_path.name}, {bar_path.name}")
    
    print(f"\nüìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ø–∞–ø–∫–µ: {methods_dir}")
    print("–°—Ä–∞–≤–Ω–∏—Ç–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤!")

if __name__ == "__main__":
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–ù–û–í–õ–ï–ù–ù–û–ô –°–ò–°–¢–ï–ú–´ –î–ò–ê–ì–†–ê–ú–ú")
    print("=" * 70)
    
    try:
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
        test_updated_charts()
        
        # –¢–µ—Å—Ç—ã –º–µ—Ç–æ–¥–æ–≤ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
        test_normalization_methods()
        
        print(f"\n‚ú® –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã - –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–æ–ª–µ–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()