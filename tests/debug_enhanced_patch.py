#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü–ê–¢–ß –î–õ–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò enhanced_pdf_report_v2.py
–î–æ–±–∞–≤–ª—è–µ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
"""

from pathlib import Path
from datetime import datetime
from enhanced_pdf_report_v2 import EnhancedPDFReportV2
import traceback

class DebugEnhancedPDFReportV2(EnhancedPDFReportV2):
    """
    –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –≤—ã–≤–æ–¥–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
    """
    
    def generate_enhanced_report(self, *args, **kwargs):
        """
        –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Å –æ—Ç–ª–∞–¥–∫–æ–π
        """
        print("üîç DEBUG: –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ enhanced report")
        
        # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ —Å –ø–µ—Ä–µ—Ö–≤–∞—Ç–æ–º
        try:
            result = super().generate_enhanced_report(*args, **kwargs)
            print(f"üîç DEBUG: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            if result and result.exists():
                size = result.stat().st_size
                print(f"üîç DEBUG: –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {size} –±–∞–π—Ç")
                
                if size < 5000:
                    print("‚ö†Ô∏è DEBUG: –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π, –≤–æ–∑–º–æ–∂–Ω–∞ –æ—à–∏–±–∫–∞!")
                    # –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
                    try:
                        with open(result, 'rb') as f:
                            first_bytes = f.read(100)
                            print(f"üîç DEBUG: –ü–µ—Ä–≤—ã–µ –±–∞–π—Ç—ã: {first_bytes}")
                    except Exception as e:
                        print(f"üîç DEBUG: –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            
            return result
            
        except Exception as e:
            print(f"‚ùå DEBUG: –û—à–∏–±–∫–∞ –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            traceback.print_exc()
            raise

def debug_test():
    """
    –¢–µ—Å—Ç —Å –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π
    """
    print("üöÄ –û–¢–õ–ê–î–û–ß–ù–´–ô –¢–ï–°–¢ ENHANCED PDF")
    print("=" * 50)
    
    generator = DebugEnhancedPDFReportV2()
    
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    participant_name = "Debug User"
    test_date = "2025-10-05"
    
    paei_scores = {"P": 5, "A": 5, "E": 5, "I": 5}
    disc_scores = {"D": 5, "I": 5, "S": 5, "C": 5}
    hexaco_scores = {"H": 3, "E": 3, "X": 3, "A": 3, "C": 3, "O": 3}
    soft_skills_scores = {"–õ–∏–¥–µ—Ä—Å—Ç–≤–æ": 5, "–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è": 5}
    
    ai_interpretations = {
        "PAEI": "Test PAEI interpretation with more text to see if content affects size",
        "DISC": "Test DISC interpretation with more text to see if content affects size",
        "HEXACO": "Test HEXACO interpretation with more text to see if content affects size", 
        "SOFT_SKILLS": "Test soft skills interpretation with more text to see if content affects size"
    }
    
    out_path = Path("debug_enhanced_v2.pdf")
    
    try:
        result = generator.generate_enhanced_report(
            participant_name=participant_name,
            test_date=test_date,
            paei_scores=paei_scores,
            disc_scores=disc_scores,
            hexaco_scores=hexaco_scores,
            soft_skills_scores=soft_skills_scores,
            ai_interpretations=ai_interpretations,
            out_path=out_path
        )
        
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    debug_test()