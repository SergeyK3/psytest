#!/usr/bin/env python3
"""
–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ PDF - –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã
"""
from pathlib import Path
import re

def validate_pdf_content_by_code():
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫—É –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ PDF –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
    print("üîç –í–ê–õ–ò–î–ê–¶–ò–Ø PDF –°–û–î–ï–†–ñ–ò–ú–û–ì–û –ß–ï–†–ï–ó –ö–û–î")
    print("="*60)
    
    pdf_file = Path("enhanced_pdf_report_v2.py")
    
    if not pdf_file.exists():
        print("‚ùå –§–∞–π–ª enhanced_pdf_report_v2.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    content = pdf_file.read_text(encoding='utf-8')
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    checks = []
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:"
    results_count = len(re.findall(r'–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:', content))
    checks.append({
        'name': '–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:" –≤ –∫–æ–¥–µ',
        'passed': results_count == 0,
        'details': f'–ù–∞–π–¥–µ–Ω–æ –≤—Ö–æ–∂–¥–µ–Ω–∏–π: {results_count}'
    })
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ normalize=False –≤ create_minimalist_radar
    radar_normalize = 'normalize=False' in content and 'create_minimalist_radar' in content
    checks.append({
        'name': 'normalize=False –≤ create_minimalist_radar',
        'passed': radar_normalize,
        'details': '–ü–∞—Ä–∞–º–µ—Ç—Ä –Ω–∞–π–¥–µ–Ω' if radar_normalize else '–ü–∞—Ä–∞–º–µ—Ç—Ä –ù–ï –Ω–∞–π–¥–µ–Ω'
    })
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ normalize=False –≤ create_minimalist_bar_chart
    bar_normalize = 'normalize=False' in content and 'create_minimalist_bar_chart' in content
    checks.append({
        'name': 'normalize=False –≤ create_minimalist_bar_chart',
        'passed': bar_normalize,
        'details': '–ü–∞—Ä–∞–º–µ—Ç—Ä –Ω–∞–π–¥–µ–Ω' if bar_normalize else '–ü–∞—Ä–∞–º–µ—Ç—Ä –ù–ï –Ω–∞–π–¥–µ–Ω'
    })
    
    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è HEXACO
    hexaco_duplicates = content.count('—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –ª–∏—á–Ω–æ—Å—Ç–∏ —á–µ–ª–æ–≤–µ–∫–∞')
    checks.append({
        'name': '–ù–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è HEXACO',
        'passed': hexaco_duplicates <= 1,
        'details': f'–ù–∞–π–¥–µ–Ω–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: {hexaco_duplicates}'
    })
    
    # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    passed_checks = 0
    for i, check in enumerate(checks, 1):
        status = "‚úÖ" if check['passed'] else "‚ùå"
        print(f"{i}. {status} {check['name']}")
        print(f"   {check['details']}")
        if check['passed']:
            passed_checks += 1
    
    success_rate = passed_checks / len(checks) * 100
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –í–ê–õ–ò–î–ê–¶–ò–ò:")
    print(f"   –ü—Ä–æ–π–¥–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {passed_checks}/{len(checks)} ({success_rate:.1f}%)")
    
    return success_rate >= 75

def check_chart_scaling_logic():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –≤ charts.py"""
    print("\nüéØ –ü–†–û–í–ï–†–ö–ê –õ–û–ì–ò–ö–ò –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–Ø –î–ò–ê–ì–†–ê–ú–ú")
    print("="*60)
    
    charts_file = Path("src/psytest/charts.py")
    
    if not charts_file.exists():
        print("‚ùå –§–∞–π–ª src/psytest/charts.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    content = charts_file.read_text(encoding='utf-8')
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ tick_step –¥–ª—è 5-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª—ã
    tick_step_logic = 'if actual_max <= 5:' in content and 'tick_step = 1' in content
    
    print(f"‚úÖ –õ–æ–≥–∏–∫–∞ tick_step –¥–ª—è 5-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª—ã: {'–ù–∞–π–¥–µ–Ω–∞' if tick_step_logic else '–ù–ï –Ω–∞–π–¥–µ–Ω–∞'}")
    
    return tick_step_logic

def create_visual_validation_summary():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    print("\nüì∏ –§–ê–ô–õ–´ –î–õ–Ø –í–ò–ó–£–ê–õ–¨–ù–û–ô –ü–†–û–í–ï–†–ö–ò")
    print("="*60)
    
    test_files = [
        'comprehensive_test_soft_skills_radar.png',
        'comprehensive_test_hexaco_radar.png',
        'comprehensive_test_soft_skills_bar.png'
    ]
    
    existing_files = []
    for file in test_files:
        path = Path(file)
        if path.exists():
            size = path.stat().st_size
            print(f"üìÅ {file} ({size:,} –±–∞–π—Ç)")
            existing_files.append(file)
        else:
            print(f"‚ùå {file} - –ù–ï –ù–ê–ô–î–ï–ù")
    
    if existing_files:
        print(f"\nüéØ –í–ò–ó–£–ê–õ–¨–ù–û –ü–†–û–í–ï–†–¨–¢–ï –í –≠–¢–ò–• –§–ê–ô–õ–ê–•:")
        print(f"   ‚Ä¢ –®–∫–∞–ª–∞: 0, 1, 2, 3, 4, 5 (–ø—Ä–∞–≤–∏–ª—å–Ω–æ)")
        print(f"   ‚Ä¢ –ù–ï –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å: 0, 2, 4, 6, 8, 10 (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ)")
    
    return len(existing_files) >= len(test_files) * 0.75

def main():
    print("üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô")
    print("="*70)
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–¥–∞
    code_valid = validate_pdf_content_by_code()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ –¥–∏–∞–≥—Ä–∞–º–º
    chart_logic_valid = check_chart_scaling_logic()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    visual_files_ready = create_visual_validation_summary()
    
    # –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"\nüéØ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê:")
    print("="*70)
    
    if code_valid and chart_logic_valid and visual_files_ready:
        print("üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –ö–æ–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –õ–æ–≥–∏–∫–∞ –¥–∏–∞–≥—Ä–∞–º–º –æ–±–Ω–æ–≤–ª–µ–Ω–∞")  
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã")
        print("\nüöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ü–†–û–î–£–ö–¢–ò–í–ù–û–ú–£ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è:")
        print(f"   ‚Ä¢ –ö–æ–¥ PDF: {'‚úÖ' if code_valid else '‚ùå'}")
        print(f"   ‚Ä¢ –õ–æ–≥–∏–∫–∞ –¥–∏–∞–≥—Ä–∞–º–º: {'‚úÖ' if chart_logic_valid else '‚ùå'}")
        print(f"   ‚Ä¢ –í–∏–∑—É–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã: {'‚úÖ' if visual_files_ready else '‚ùå'}")
        print("\nüîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞")

if __name__ == "__main__":
    main()