#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è DISC –∏ ADIZES —Å –∑–∞–≥—Ä—É–∑–∫–æ–π .env
"""
import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
try:
    from dotenv import load_dotenv
    load_dotenv()
    print("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
except ImportError:
    print("‚ö†Ô∏è python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å .env –≤—Ä—É—á–Ω—É—é")
    # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ .env —Ñ–∞–π–ª–∞
    if os.path.exists('.env'):
        with open('.env', 'r') as f:
            for line in f:
                if '=' in line and not line.startswith('#'):
                    key, value = line.strip().split('=', 1)
                    os.environ[key] = value
        print("‚úÖ .env —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤—Ä—É—á–Ω—É—é")

from psytest.ai_interpreter import AIInterpreter

def test_disc_with_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º DISC —Å —Ä–µ–∞–ª—å–Ω—ã–º API"""
    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï DISC –° OPENAI API")
    print("=" * 50)
    
    try:
        ai_interpreter = AIInterpreter()
        print("‚úÖ AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç 1: –î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π D (–∫–∞–∫ –Ω–∞ –¥–∏–∞–≥—Ä–∞–º–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        test_data = {
            "1.1": 4, "1.2": 4,  # D=8
            "2.1": 1, "2.2": 1,  # I=2  
            "3.1": 2, "3.2": 2,  # S=4
            "4.1": 1, "4.2": 1   # C=2
        }
        
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π D –ø—Ä–æ—Ñ–∏–ª—å:")
        print(f"–î–∞–Ω–Ω—ã–µ: {test_data}")
        
        interpretation = ai_interpreter.interpret_disc(test_data)
        print(f"\nüìù –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ (–¥–ª–∏–Ω–∞: {len(interpretation)} —Å–∏–º–≤–æ–ª–æ–≤)")
        print(f"\nüí° –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        print("-" * 60)
        print(interpretation)
        print("-" * 60)
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_adizes_with_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º ADIZES —Å —Ä–µ–∞–ª—å–Ω—ã–º API"""
    print("\n\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ADIZES –° OPENAI API")
    print("=" * 50)
    
    try:
        ai_interpreter = AIInterpreter()
        
        # –¢–µ—Å—Ç: –î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π A (–∫–∞–∫ –Ω–∞ –¥–∏–∞–≥—Ä–∞–º–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        test_choices = ["A", "A", "A", "P"]
        
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π A –ø—Ä–æ—Ñ–∏–ª—å:")
        print(f"–í—ã–±–æ—Ä—ã: {test_choices}")
        
        interpretation = ai_interpreter.interpret_adizes(test_choices)
        print(f"\nüìù –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ (–¥–ª–∏–Ω–∞: {len(interpretation)} —Å–∏–º–≤–æ–ª–æ–≤)")
        print(f"\nüí° –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        print("-" * 60)
        print(interpretation)
        print("-" * 60)
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def check_api_key():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞"""
    api_key = os.getenv("OPENAI_API_KEY")
    if api_key:
        print(f"‚úÖ OpenAI API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω (–¥–ª–∏–Ω–∞: {len(api_key)} —Å–∏–º–≤–æ–ª–æ–≤)")
        print(f"üîë –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å: {api_key[:10]}...")
        return True
    else:
        print("‚ùå OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return False

if __name__ == "__main__":
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–´–• –ü–†–û–ú–ü–¢–û–í –° OPENAI API")
    print("=" * 70)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
    if not check_api_key():
        print("\n‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ OpenAI API –∫–ª—é—á. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")
        exit(1)
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º DISC
        disc_success = test_disc_with_api()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º ADIZES
        adizes_success = test_adizes_with_api()
        
        print(f"\n\nüéâ –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print(f"DISC: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if disc_success else '‚ùå –û—à–∏–±–∫–∞'}")
        print(f"ADIZES: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if adizes_success else '‚ùå –û—à–∏–±–∫–∞'}")
        
        if disc_success and adizes_success:
            print("\nüéä –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –æ—Ç–ª–∏—á–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()