#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
–≠–≤–æ–ª—é—Ü–∏—è –æ—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∫ —Å–ª–æ–∂–Ω–æ–º—É
"""

from datetime import datetime, timedelta
from typing import Dict, List, Optional
import json
import os

class SimplePasswordManager:
    """–ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–∞—Ä–æ–ª–µ–π –¥–ª—è —Å—Ç–∞—Ä—Ç–∞"""
    
    def __init__(self, data_file: str = "passwords.json"):
        self.data_file = data_file
        self.passwords: Dict[str, dict] = self._load_data()
    
    def _load_data(self) -> dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–∞—Ä–æ–ª—è—Ö –∏–∑ —Ñ–∞–π–ª–∞"""
        if os.path.exists(self.data_file):
            with open(self.data_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        return {}
    
    def _save_data(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª"""
        with open(self.data_file, 'w', encoding='utf-8') as f:
            json.dump(self.passwords, f, ensure_ascii=False, indent=2)
    
    # === –≠–¢–ê–ü 1: –†–£–ß–ù–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï (MVP) ===
    
    def create_simple_password(self, password: str, company_name: str, tests_limit: int = 10):
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å –¥–ª—è –≥—Ä—É–ø–ø—ã"""
        self.passwords[password] = {
            "company_name": company_name,
            "tests_limit": tests_limit,
            "used_tests": 0,
            "created_at": datetime.now().isoformat(),
            "reports": [],
            "active": True
        }
        self._save_data()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–∞—Ä–æ–ª—å '{password}' –¥–ª—è {company_name} (–ª–∏–º–∏—Ç: {tests_limit} —Ç–µ—Å—Ç–æ–≤)")
    
    def check_password(self, password: str) -> Optional[dict]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞—Ä–æ–ª—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        if password in self.passwords:
            data = self.passwords[password]
            if data["active"] and data["used_tests"] < data["tests_limit"]:
                return data
        return None
    
    def use_test(self, password: str, employee_name: str, report_path: str) -> bool:
        """–û—Ç–º–µ—á–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞"""
        if password in self.passwords:
            data = self.passwords[password]
            if data["used_tests"] < data["tests_limit"]:
                data["used_tests"] += 1
                data["reports"].append({
                    "employee_name": employee_name,
                    "report_path": report_path,
                    "completed_at": datetime.now().isoformat()
                })
                self._save_data()
                return True
        return False
    
    # === –≠–¢–ê–ü 2: –ê–í–¢–û–ì–ï–ù–ï–†–ê–¶–ò–Ø (–†–û–°–¢) ===
    
    def generate_company_password(self, company_name: str, tests_limit: int = 10) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏"""
        import secrets
        import string
        
        # –ü—Ä–æ—Å—Ç–æ–π —á–∏—Ç–∞–µ–º—ã–π –ø–∞—Ä–æ–ª—å: COMPANY123
        base = company_name.upper().replace(" ", "")[:7]
        suffix = ''.join(secrets.choice(string.digits) for _ in range(3))
        password = f"{base}{suffix}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
        while password in self.passwords:
            suffix = ''.join(secrets.choice(string.digits) for _ in range(3))
            password = f"{base}{suffix}"
        
        self.create_simple_password(password, company_name, tests_limit)
        return password
    
    # === –≠–¢–ê–ü 3: –†–ê–°–®–ò–†–ï–ù–ù–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï (–ú–ê–°–®–¢–ê–ë) ===
    
    def set_password_expiry(self, password: str, days: int = 365):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–∞—Ä–æ–ª—è"""
        if password in self.passwords:
            expires_at = datetime.now() + timedelta(days=days)
            self.passwords[password]["expires_at"] = expires_at.isoformat()
            self._save_data()
    
    def deactivate_password(self, password: str, reason: str = ""):
        """–î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–∞—Ä–æ–ª—å"""
        if password in self.passwords:
            self.passwords[password]["active"] = False
            self.passwords[password]["deactivated_at"] = datetime.now().isoformat()
            self.passwords[password]["deactivation_reason"] = reason
            self._save_data()
    
    # === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –û–¢–ß–ï–¢–´ ===
    
    def get_password_stats(self, password: str) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–∞—Ä–æ–ª—é"""
        if password in self.passwords:
            data = self.passwords[password]
            return {
                "company": data["company_name"],
                "used": data["used_tests"],
                "limit": data["tests_limit"],
                "remaining": data["tests_limit"] - data["used_tests"],
                "reports_count": len(data["reports"]),
                "last_used": data["reports"][-1]["completed_at"] if data["reports"] else None
            }
        return {}
    
    def get_all_reports_for_password(self, password: str) -> List[dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –æ—Ç—á–µ—Ç—ã –ø–æ –ø–∞—Ä–æ–ª—é"""
        if password in self.passwords:
            return self.passwords[password]["reports"]
        return []
    
    def admin_overview(self) -> dict:
        """–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
        total_passwords = len(self.passwords)
        active_passwords = sum(1 for p in self.passwords.values() if p["active"])
        total_tests_used = sum(p["used_tests"] for p in self.passwords.values())
        total_reports = sum(len(p["reports"]) for p in self.passwords.values())
        
        return {
            "total_passwords": total_passwords,
            "active_passwords": active_passwords,
            "total_tests_used": total_tests_used,
            "total_reports": total_reports,
            "companies": [p["company_name"] for p in self.passwords.values()]
        }

# === –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –ë–û–¢–û–ú ===

class BotPasswordIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–∞—Ä–æ–ª–µ–π —Å –±–æ—Ç–æ–º"""
    
    def __init__(self):
        self.password_manager = SimplePasswordManager()
    
    async def handle_employee_login(self, password: str, user_id: int) -> tuple:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
        password_data = self.password_manager.check_password(password)
        
        if password_data:
            remaining = password_data["tests_limit"] - password_data["used_tests"]
            return True, f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {password_data['company_name']}!\n–û—Å—Ç–∞–ª–æ—Å—å —Ç–µ—Å—Ç–æ–≤: {remaining}"
        else:
            return False, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–π"
    
    async def complete_employee_test(self, password: str, employee_name: str, report_path: str):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ—Å—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
        success = self.password_manager.use_test(password, employee_name, report_path)
        
        if success:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –≤ Google Drive –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏
            stats = self.password_manager.get_password_stats(password)
            return f"‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n–û—Å—Ç–∞–ª–æ—Å—å —Ç–µ—Å—Ç–æ–≤: {stats['remaining']}"
        else:
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
    
    async def admin_get_password_reports(self, password: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –æ—Ç—á–µ—Ç—ã –ø–æ –ø–∞—Ä–æ–ª—é –¥–ª—è –∞–¥–º–∏–Ω–∞"""
        reports = self.password_manager.get_all_reports_for_password(password)
        stats = self.password_manager.get_password_stats(password)
        
        if not reports:
            return f"üìã –ü–∞—Ä–æ–ª—å '{password}' ({stats['company']}): —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª–∏—Å—å"
        
        result = f"üìä –û—Ç—á–µ—Ç—ã –ø–æ –ø–∞—Ä–æ–ª—é '{password}' ({stats['company']}):\n\n"
        result += f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {stats['used']}/{stats['limit']} —Ç–µ—Å—Ç–æ–≤\n\n"
        
        for i, report in enumerate(reports, 1):
            result += f"{i}. {report['employee_name']}\n"
            result += f"   üìÖ {report['completed_at'][:16]}\n"
            result += f"   üìÑ {report['report_path']}\n\n"
        
        return result

# === –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø ===

def demo_password_evolution():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–≤–æ–ª—é—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –ø–∞—Ä–æ–ª–µ–π"""
    
    pm = SimplePasswordManager()
    
    print("=== –≠–¢–ê–ü 1: –†—É—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π ===")
    # –í—ã —Å–æ–∑–¥–∞–µ—Ç–µ –ø–∞—Ä–æ–ª—å –≤—Ä—É—á–Ω—É—é
    pm.create_simple_password("TESTCOMP2025", "–û–û–û –¢–µ—Å—Ç –ö–æ–º–ø–∞–Ω–∏—è", 5)
    pm.create_simple_password("INNOVATE123", "–ò–Ω–Ω–æ–≤–µ–π—Ç –ì—Ä—É–ø–ø", 10)
    
    print("\n=== –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç —Ç–µ—Å—Ç—ã ===")
    # –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ø–∞—Ä–æ–ª–∏
    pm.use_test("TESTCOMP2025", "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω", "report_ivanov.pdf")
    pm.use_test("TESTCOMP2025", "–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä", "report_petrov.pdf")
    
    print("\n=== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ===")
    stats = pm.get_password_stats("TESTCOMP2025")
    print(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
    
    print("\n=== –≠–¢–ê–ü 2: –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è (–≤ –±—É–¥—É—â–µ–º) ===")
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª–µ–π
    auto_password = pm.generate_company_password("–ù–æ–≤–∞—è –ö–æ–º–ø–∞–Ω–∏—è", 15)
    print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø–∞—Ä–æ–ª—å: {auto_password}")
    
    print("\n=== –≠–¢–ê–ü 3: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–º–∞—Å—à—Ç–∞–±) ===")
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    pm.set_password_expiry("TESTCOMP2025", 30)  # 30 –¥–Ω–µ–π
    
    print("\n=== –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===")
    overview = pm.admin_overview()
    print(f"–ê–¥–º–∏–Ω –æ–±–∑–æ—Ä: {overview}")

if __name__ == "__main__":
    demo_password_evolution()