#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è–º–∏
"""
import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
if os.path.exists('.env'):
    with open('.env', 'r') as f:
        for line in f:
            if '=' in line and not line.startswith('#'):
                key, value = line.strip().split('=', 1)
                os.environ[key] = value

from psytest.ai_interpreter import AIInterpreter

def test_comprehensive_disc():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ç–∏–ø—ã DISC –ø—Ä–æ—Ñ–∏–ª–µ–π"""
    print("üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï DISC")
    print("=" * 50)
    
    ai_interpreter = AIInterpreter()
    
    test_cases = [
        {
            "name": "üéØ –î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π D (—Ä–µ—à–∏—Ç–µ–ª—å–Ω—ã–π –ª–∏–¥–µ—Ä)",
            "data": {"1.1": 5, "1.2": 4, "2.1": 1, "2.2": 2, "3.1": 2, "3.2": 1, "4.1": 2, "4.2": 2},
            "expected_dominant": "D"
        },
        {
            "name": "üó£Ô∏è –î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π I (–∫–æ–º–º—É–Ω–∏–∫–∞—Ç–æ—Ä)",
            "data": {"1.1": 2, "1.2": 1, "2.1": 5, "2.2": 4, "3.1": 2, "3.2": 2, "4.1": 3, "4.2": 2},
            "expected_dominant": "I"
        },
        {
            "name": "ü§ù –î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π S (—Å—Ç–∞–±–∏–ª—å–Ω—ã–π)",
            "data": {"1.1": 2, "1.2": 2, "2.1": 2, "2.2": 2, "3.1": 5, "3.2": 4, "4.1": 3, "4.2": 3},
            "expected_dominant": "S"
        },
        {
            "name": "üìã –î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π C (–∞–Ω–∞–ª–∏—Ç–∏–∫)",
            "data": {"1.1": 1, "1.2": 2, "2.1": 2, "2.2": 2, "3.1": 3, "3.2": 2, "4.1": 5, "4.2": 4},
            "expected_dominant": "C"
        }
    ]
    
    results = []
    for i, test_case in enumerate(test_cases, 1):
        print(f"\nüîç –¢–µ—Å—Ç {i}: {test_case['name']}")
        print("-" * 40)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã
        d_score = test_case['data']['1.1'] + test_case['data']['1.2']
        i_score = test_case['data']['2.1'] + test_case['data']['2.2']
        s_score = test_case['data']['3.1'] + test_case['data']['3.2']
        c_score = test_case['data']['4.1'] + test_case['data']['4.2']
        
        print(f"D: {d_score}, I: {i_score}, S: {s_score}, C: {c_score}")
        
        try:
            interpretation = ai_interpreter.interpret_disc(test_case['data'])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
            quality_checks = {
                "–°–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ—á–Ω—ã–µ —Å—É–º–º—ã": f"–°—É–º–º–∞ –±–∞–ª–ª–æ–≤ –ø–æ –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—é {d_score}" in interpretation,
                "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã": all(aspect in interpretation for aspect in ["–¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—é", "–≤–ª–∏—è–Ω–∏—é", "—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏", "–ø–æ–¥—á–∏–Ω–µ–Ω–∏—é –ø—Ä–∞–≤–∏–ª–∞–º"]),
                "–ï—Å—Ç—å –æ–±—â–∏–π –≤—ã–≤–æ–¥": "–û–±—â–∏–π –≤—ã–≤–æ–¥" in interpretation,
                "–ï—Å—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏": "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏" in interpretation or "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏" in interpretation.lower(),
                "–î–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –¥–ª–∏–Ω–∞": len(interpretation) > 500
            }
            
            passed_checks = sum(quality_checks.values())
            total_checks = len(quality_checks)
            
            print(f"‚úÖ –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ ({len(interpretation)} —Å–∏–º–≤–æ–ª–æ–≤)")
            print(f"üìä –ö–∞—á–µ—Å—Ç–≤–æ: {passed_checks}/{total_checks} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ")
            
            for check, passed in quality_checks.items():
                print(f"  {'‚úÖ' if passed else '‚ùå'} {check}")
            
            results.append({
                "name": test_case['name'],
                "length": len(interpretation),
                "quality": f"{passed_checks}/{total_checks}",
                "success": passed_checks >= 4
            })
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—Ä—ã–≤–æ–∫
            preview = interpretation[:200] + "..." if len(interpretation) > 200 else interpretation
            print(f"üìù –ü—Ä–µ–≤—å—é: {preview}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            results.append({"name": test_case['name'], "success": False, "error": str(e)})
    
    return results

def test_comprehensive_adizes():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ç–∏–ø—ã ADIZES –ø—Ä–æ—Ñ–∏–ª–µ–π"""
    print("\n\nüß™ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ADIZES")
    print("=" * 50)
    
    ai_interpreter = AIInterpreter()
    
    test_cases = [
        {
            "name": "üöÄ –î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π P (–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å)",
            "choices": ["P", "P", "P", "A"]
        },
        {
            "name": "üìä –î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π A (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)",
            "choices": ["A", "A", "A", "P"]
        },
        {
            "name": "üí° –î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π E (–ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å)",
            "choices": ["E", "E", "E", "I"]
        },
        {
            "name": "ü§ù –î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π I (–∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä)",
            "choices": ["I", "I", "I", "P"]
        },
        {
            "name": "‚öñÔ∏è –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å",
            "choices": ["P", "A", "E", "I"]
        }
    ]
    
    results = []
    for i, test_case in enumerate(test_cases, 1):
        print(f"\nüîç –¢–µ—Å—Ç {i}: {test_case['name']}")
        print("-" * 40)
        print(f"–í—ã–±–æ—Ä—ã: {test_case['choices']}")
        
        try:
            interpretation = ai_interpreter.interpret_adizes(test_case['choices'])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
            quality_checks = {
                "–ï—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫": "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –ê–¥–∏–∑–µ—Å—É" in interpretation,
                "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—ã–±–æ—Ä—ã": any(choice in interpretation for choice in ["P", "A", "E", "I"]),
                "–ï—Å—Ç—å –æ–±—â–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç": "–û–±—â–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç" in interpretation,
                "–ï—Å—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏": "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∞" in interpretation,
                "–ï—Å—Ç—å –ø—Ä–æ—Ñ—Ä–æ–ª–∏": "–ò–¥–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏" in interpretation,
                "–î–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –¥–ª–∏–Ω–∞": len(interpretation) > 800
            }
            
            passed_checks = sum(quality_checks.values())
            total_checks = len(quality_checks)
            
            print(f"‚úÖ –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ ({len(interpretation)} —Å–∏–º–≤–æ–ª–æ–≤)")
            print(f"üìä –ö–∞—á–µ—Å—Ç–≤–æ: {passed_checks}/{total_checks} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ")
            
            for check, passed in quality_checks.items():
                print(f"  {'‚úÖ' if passed else '‚ùå'} {check}")
            
            results.append({
                "name": test_case['name'],
                "length": len(interpretation),
                "quality": f"{passed_checks}/{total_checks}",
                "success": passed_checks >= 5
            })
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—Ä—ã–≤–æ–∫
            preview = interpretation[:200] + "..." if len(interpretation) > 200 else interpretation
            print(f"üìù –ü—Ä–µ–≤—å—é: {preview}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            results.append({"name": test_case['name'], "success": False, "error": str(e)})
    
    return results

def generate_summary(disc_results, adizes_results):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç"""
    print("\n\nüéâ –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ DISC ({len(disc_results)} —Ç–µ—Å—Ç–æ–≤):")
    disc_success = 0
    for result in disc_results:
        status = "‚úÖ" if result.get('success', False) else "‚ùå"
        length = result.get('length', 'N/A')
        quality = result.get('quality', 'N/A')
        print(f"  {status} {result['name']} - {length} —Å–∏–º–≤–æ–ª–æ–≤, –∫–∞—á–µ—Å—Ç–≤–æ: {quality}")
        if result.get('success', False):
            disc_success += 1
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ ADIZES ({len(adizes_results)} —Ç–µ—Å—Ç–æ–≤):")
    adizes_success = 0
    for result in adizes_results:
        status = "‚úÖ" if result.get('success', False) else "‚ùå"
        length = result.get('length', 'N/A')
        quality = result.get('quality', 'N/A')
        print(f"  {status} {result['name']} - {length} —Å–∏–º–≤–æ–ª–æ–≤, –∫–∞—á–µ—Å—Ç–≤–æ: {quality}")
        if result.get('success', False):
            adizes_success += 1
    
    print(f"\nüéØ –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"  DISC: {disc_success}/{len(disc_results)} —É—Å–ø–µ—à–Ω–æ ({disc_success/len(disc_results)*100:.1f}%)")
    print(f"  ADIZES: {adizes_success}/{len(adizes_results)} —É—Å–ø–µ—à–Ω–æ ({adizes_success/len(adizes_results)*100:.1f}%)")
    
    total_success = disc_success + adizes_success
    total_tests = len(disc_results) + len(adizes_results)
    print(f"  –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {total_success}/{total_tests} —É—Å–ø–µ—à–Ω–æ ({total_success/total_tests*100:.1f}%)")
    
    if total_success/total_tests >= 0.8:
        print("\nüéä –û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ!")
    elif total_success/total_tests >= 0.6:
        print("\n‚úÖ –•–û–†–û–®–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –£–ª—É—á—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç, –Ω–æ –µ—Å—Ç—å –º–µ—Å—Ç–æ –¥–ª—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏.")
    else:
        print("\n‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–º–ø—Ç—ã –Ω—É–∂–¥–∞—é—Ç—Å—è –≤ —É–ª—É—á—à–µ–Ω–∏–∏.")

if __name__ == "__main__":
    print("üöÄ –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–´–• –ü–†–û–ú–ü–¢–û–í")
    print("=" * 70)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
        if not os.getenv("OPENAI_API_KEY"):
            print("‚ùå OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
            exit(1)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        disc_results = test_comprehensive_disc()
        adizes_results = test_comprehensive_adizes()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        generate_summary(disc_results, adizes_results)
        
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()