#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ —Ç–µ—Å—Ç–æ–≤ –±–µ–∑ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
–°–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –≤–æ–ø—Ä–æ—Å–æ–≤
"""

import re
from pathlib import Path
from typing import Dict, List


def parse_adizes_questions(filepath="data/prompts/adizes_user.txt"):
    """–ü–∞—Ä—Å–∏—Ç –≤–æ–ø—Ä–æ—Å—ã PAEI/Adizes –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        questions = []
        with open(filepath, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–ª–æ–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ (–∏—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω —Å –Ω–æ–º–µ—Ä–æ–º)
        question_blocks = re.split(r'\n(?=\d+\.)', content)
        
        for block in question_blocks:
            if not block.strip() or not re.match(r'^\d+\.', block.strip()):
                continue
                
            lines = block.strip().split('\n')
            question_text = lines[0].strip()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∞–º –≤–æ–ø—Ä–æ—Å (—É–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä)
            question_text = re.sub(r'^\d+\.\s*', '', question_text)
            
            answers = {}
            for line in lines[1:]:
                line = line.strip()
                if re.match(r'^[PAEI]\.', line):
                    code = line[0]  # P, A, E, –∏–ª–∏ I
                    answer_text = re.sub(r'^[PAEI]\.\s*', '', line)
                    answers[code] = answer_text
            
            if question_text and len(answers) == 4:  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 4 –æ—Ç–≤–µ—Ç–∞
                questions.append({
                    "question": question_text,
                    "answers": answers
                })
        
        print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(questions)} PAEI –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ {filepath}")
        return questions
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ PAEI –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
        return []


def parse_disc_questions(filepath="data/prompts/disc_user.txt"):
    """–ü–∞—Ä—Å–∏—Ç –≤–æ–ø—Ä–æ—Å—ã DISC –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        questions = []
        with open(filepath, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ò—â–µ–º –±–ª–æ–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –Ω–æ–º–µ—Ä–∞–º
        question_blocks = re.split(r'\n(?=\d+\.)', content)
        
        for block in question_blocks:
            if not block.strip() or not re.match(r'^\d+\.', block.strip()):
                continue
            
            lines = block.strip().split('\n')
            question_text = lines[0].strip()
            question_text = re.sub(r'^\d+\.\s*', '', question_text)
            
            if question_text:
                questions.append({
                    "question": question_text,
                    "scale": "1-5"
                })
        
        print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(questions)} DISC –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ {filepath}")
        return questions
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DISC –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
        return []


def parse_hexaco_questions():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã HEXACO"""
    return [
        {
            "question": "–Ø –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é –≥–æ–≤–æ—Ä–∏—Ç—å –ø—Ä–∞–≤–¥—É, –¥–∞–∂–µ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ—É–¥–æ–±–Ω–æ",
            "scale": "1-5",
            "dimension": "H"  # Honesty-Humility
        },
        {
            "question": "–Ø —á–∞—Å—Ç–æ —á—É–≤—Å—Ç–≤—É—é –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ –æ –±—É–¥—É—â–µ–º",
            "scale": "1-5", 
            "dimension": "E"  # Emotionality
        },
        {
            "question": "–Ø –ª—é–±–ª—é –±—ã—Ç—å –≤ —Ü–µ–Ω—Ç—Ä–µ –≤–Ω–∏–º–∞–Ω–∏—è",
            "scale": "1-5",
            "dimension": "X"  # eXtraversion
        },
        {
            "question": "–Ø —Å—Ç–∞—Ä–∞—é—Å—å —Å–ª–µ–¥–æ–≤–∞—Ç—å —Å–≤–æ–∏–º –ø–ª–∞–Ω–∞–º, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ —Å–ª–æ–∂–Ω—ã–µ",
            "scale": "1-5",
            "dimension": "A"  # Agreeableness
        },
        {
            "question": "–ú–Ω–µ –ª–µ–≥–∫–æ –Ω–∞–π—Ç–∏ –æ–±—â–∏–π —è–∑—ã–∫ —Å –¥—Ä—É–≥–∏–º–∏ –ª—é–¥—å–º–∏",
            "scale": "1-5",
            "dimension": "C"  # Conscientiousness
        },
        {
            "question": "–Ø –Ω–∞—Å–ª–∞–∂–¥–∞—é—Å—å –∏–∑—É—á–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö –∏–¥–µ–π –∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏–π",
            "scale": "1-5",
            "dimension": "O"  # Openness to experience
        }
    ]


def parse_soft_skills_questions(filepath="data/prompts/soft_user.txt"):
    """–ü–∞—Ä—Å–∏—Ç –≤–æ–ø—Ä–æ—Å—ã Soft Skills –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        questions = []
        current_question = None
        answers = {}
        
        # –ú–∞–ø–ø–∏–Ω–≥ –Ω–æ–º–µ—Ä–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –Ω–∞–≤—ã–∫–∏
        skills_mapping = {
            1: "–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è",
            2: "–†–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ", 
            3: "–õ–∏–¥–µ—Ä—Å—Ç–≤–æ",
            4: "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ",
            5: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–µ–º",
            6: "–°—Ç—Ä–µ—Å—Å–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å",
            7: "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç",
            8: "–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å",
            9: "–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º",
            10: "–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å"
        }
        
        with open(filepath, 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        for line_original in lines:
            line = line_original.strip()
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            if not line or line.startswith('#') or line.startswith('//'):
                continue
            
            # –ò—â–µ–º –Ω–æ–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å
            question_match = re.match(r'^\s*(\d+)\.\s*(.*)', line_original)
            if question_match:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å
                if current_question and answers:
                    question_num = len(questions) + 1
                    skill = skills_mapping.get(question_num, "–û–±—â–∏–µ –Ω–∞–≤—ã–∫–∏")
                    questions.append({
                        'question': current_question,
                        'scale': "1-10",
                        'skill': skill,
                        'answers': answers.copy()
                    })
                
                # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
                current_question = question_match.group(2).strip()
                answers = {}
                continue
                
            # –ò—â–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if current_question:
                answer_match = re.match(r'^\s+([1-9]|10)\.\s*(.*)', line_original)
                if answer_match:
                    key = answer_match.group(1)
                    text = answer_match.group(2).strip()
                    answers[key] = text
                    continue
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å
        if current_question and answers:
            question_num = len(questions) + 1
            skill = skills_mapping.get(question_num, "–û–±—â–∏–µ –Ω–∞–≤—ã–∫–∏")
            questions.append({
                'question': current_question,
                'scale': "1-10",
                'skill': skill,
                'answers': answers.copy()
            })
        
        if questions:
            print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(questions)} Soft Skills –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ {filepath}")
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å Soft Skills –≤–æ–ø—Ä–æ—Å—ã –∏–∑ {filepath}")
        
        return questions
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ Soft Skills –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
        return []


def get_all_questions():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    return {
        'paei': parse_adizes_questions(),
        'disc': parse_disc_questions(),
        'hexaco': parse_hexaco_questions(),
        'soft_skills': parse_soft_skills_questions()
    }


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
PAEI_QUESTIONS = parse_adizes_questions()
DISC_QUESTIONS = parse_disc_questions()
HEXACO_QUESTIONS = parse_hexaco_questions()
SOFT_SKILLS_QUESTIONS = parse_soft_skills_questions()


if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤...")
    
    all_questions = get_all_questions()
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏:")
    print(f"  - PAEI: {len(all_questions['paei'])} –≤–æ–ø—Ä–æ—Å–æ–≤")
    print(f"  - DISC: {len(all_questions['disc'])} –≤–æ–ø—Ä–æ—Å–æ–≤")
    print(f"  - HEXACO: {len(all_questions['hexaco'])} –≤–æ–ø—Ä–æ—Å–æ–≤")
    print(f"  - Soft Skills: {len(all_questions['soft_skills'])} –≤–æ–ø—Ä–æ—Å–æ–≤")
    
    print(f"\n‚úÖ –ú–æ–¥—É–ª—å test_questions_loader.py –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")