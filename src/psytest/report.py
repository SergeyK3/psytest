from pathlib import Path
from typing import Dict
from docx import Document
from docx.shared import Pt
import pandas as pd
from datetime import datetime

def _pick_interpretation(scale: str, scaled_score: float, df_interp: pd.DataFrame) -> str:
    pool = df_interp[df_interp["scale"] == scale]
    row = pool[(pool["range_low"] <= scaled_score) & (scaled_score <= pool["range_high"])]
    if not row.empty:
        return f"{row.iloc[0]['level']}: {row.iloc[0]['text']}"
    # –µ—Å–ª–∏ –Ω–µ –ø–æ–ø–∞–ª–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—ë–º –ø—É—Å—Ç–æ
    return ""

def render_report(scores_raw: Dict[str, float],
                  items_df: pd.DataFrame,
                  interpretations_path: Path,
                  template_path: Path,
                  out_path: Path,
                  title: str = "–û—Ç—á—ë—Ç –ø–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é (PAEI)",
                  participant: str = "–ö–æ–¥ —É—á–∞—Å—Ç–Ω–∏–∫–∞: ______") -> Path:
    """
    scores_raw: {'P': raw, 'A': raw, ...}
    items_df: dataframe —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ (item_id, scale, reverse, ...)
    –ù–æ—Ä–º–∏—Ä—É–µ–º —Å—ã—Ä—ã–µ –±–∞–ª–ª—ã –∫ —à–∫–∞–ª–µ 0..60, —á—Ç–æ–±—ã —Å–æ–æ—Ç–Ω–µ—Å—Ç–∏ —Å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è–º–∏.
    """
    doc = Document(str(template_path))

    # –±–∞–∑–æ–≤–∞—è —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞
    styles = doc.styles
    styles['Normal'].font.name = 'Times New Roman'
    styles['Normal'].font.size = Pt(12)

    doc.add_heading(title, level=1)
    doc.add_paragraph(f"{participant}")
    doc.add_paragraph(f"–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M')}")

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –Ω–æ—Ä–º–∏—Ä–æ–≤–∫—É –∫ 0..60, —É—á–∏—Ç—ã–≤–∞—è —á–∏—Å–ª–æ –ø—É–Ω–∫—Ç–æ–≤ –ø–æ –∫–∞–∂–¥–æ–π —à–∫–∞–ª–µ
    items_per_scale = items_df.groupby("scale")["item_id"].count().to_dict()
    max_per_scale = {k: v * 5 for k, v in items_per_scale.items()}  # 5 ‚Äî –º–∞–∫—Å–∏–º—É–º –ø–æ —Å–ª–∞–π–¥–µ—Ä—É
    scaled_scores = {}
    for s, raw in scores_raw.items():
        max_possible = max_per_scale.get(s, max(raw, 1))  # –∑–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
        scaled_scores[s] = round(raw * 60.0 / max_possible, 2)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
    df_interp = pd.read_csv(interpretations_path)

    doc.add_heading("–°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", level=2)
    table = doc.add_table(rows=1, cols=4)
    hdr = table.rows[0].cells
    hdr[0].text = "–®–∫–∞–ª–∞"
    hdr[1].text = "–°—ã—Ä–æ–π –±–∞–ª–ª"
    hdr[2].text = "–ù–æ—Ä–º. (0..60)"
    hdr[3].text = "–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è"

    for scale in sorted(scores_raw.keys()):
        row = table.add_row().cells
        row[0].text = scale
        row[1].text = str(scores_raw[scale])
        row[2].text = str(scaled_scores[scale])
        row[3].text = _pick_interpretation(scale, scaled_scores[scale], df_interp)

    doc.add_paragraph()
    doc.add_paragraph("‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–æ—Å—è—Ç –æ–∑–Ω–∞–∫–æ–º–∏—Ç–µ–ª—å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –Ω–µ –∑–∞–º–µ–Ω—è—é—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É.")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ AI (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
    if hasattr(render_report, '_uses_ai') and render_report._uses_ai:
        doc.add_paragraph()
        doc.add_paragraph(
            "ü§ñ –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å –ø–æ–º–æ—â—å—é OpenAI GPT-3.5. "
            "Powered by OpenAI (https://openai.com)"
        )

    doc.save(str(out_path))
    return out_path
