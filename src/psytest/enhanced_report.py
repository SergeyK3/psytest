"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á—ë—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–π
"""
import os
from pathlib import Path
from typing import Dict, Optional
from docx import Document
from docx.shared import Pt
import pandas as pd
from datetime import datetime

from .report import render_report as _render_report_base, _pick_interpretation
from .ai_interpreter import get_ai_interpreter


def render_enhanced_report(
    scores_raw: Dict[str, float],
    items_df: pd.DataFrame,
    interpretations_path: Path,
    template_path: Path,
    out_path: Path,
    title: str = "–û—Ç—á—ë—Ç –ø–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é",
    participant: str = "–ö–æ–¥ —É—á–∞—Å—Ç–Ω–∏–∫–∞: ______",
    test_type: str = "PAEI",
    use_ai: bool = None,
    dialog_context: str = ""
) -> Path:
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–π
    
    Args:
        scores_raw: –°–ª–æ–≤–∞—Ä—å —Å—ã—Ä—ã—Ö –±–∞–ª–ª–æ–≤
        items_df: DataFrame —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
        interpretations_path: –ü—É—Ç—å –∫ CSV —Å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è–º–∏
        template_path: –ü—É—Ç—å –∫ —à–∞–±–ª–æ–Ω—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
        out_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞
        title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á—ë—Ç–∞
        participant: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ
        test_type: –¢–∏–ø —Ç–µ—Å—Ç–∞ (PAEI, DISC, HEXACO)
        use_ai: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ AI (None = –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)
        dialog_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è AI
        
    Returns:
        –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É –æ—Ç—á—ë—Ç—É
    """
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ AI
    if use_ai is None:
        use_ai = os.getenv("USE_AI_INTERPRETATIONS", "false").lower() == "true"
    
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä
    ai_interpreter = None
    if use_ai:
        ai_interpreter = get_ai_interpreter()
        if ai_interpreter is None:
            use_ai = False  # Fallback –∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è–º
    
    # –°–æ–∑–¥–∞—ë–º –±–∞–∑–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
    doc = Document(str(template_path))
    
    # –ë–∞–∑–æ–≤–∞—è —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞
    styles = doc.styles
    styles['Normal'].font.name = 'Times New Roman'
    styles['Normal'].font.size = Pt(12)
    
    doc.add_heading(title, level=1)
    doc.add_paragraph(f"{participant}")
    doc.add_paragraph(f"–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M')}")
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –Ω–æ—Ä–º–∏—Ä–æ–≤–∫—É –∫ 0..60
    items_per_scale = items_df.groupby("scale")["item_id"].count().to_dict()
    max_per_scale = {k: v * 5 for k, v in items_per_scale.items()}
    scaled_scores = {}
    for s, raw in scores_raw.items():
        max_possible = max_per_scale.get(s, max(raw, 1))
        scaled_scores[s] = round(raw * 60.0 / max_possible, 2)
    
    # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    doc.add_heading("–°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", level=2)
    table = doc.add_table(rows=1, cols=4)
    hdr = table.rows[0].cells
    hdr[0].text = "–®–∫–∞–ª–∞"
    hdr[1].text = "–°—ã—Ä–æ–π –±–∞–ª–ª"
    hdr[2].text = "–ù–æ—Ä–º. (0..60)"
    hdr[3].text = "–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è"
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É
    if use_ai and ai_interpreter:
        # AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
        for scale in sorted(scores_raw.keys()):
            row = table.add_row().cells
            row[0].text = scale
            row[1].text = str(scores_raw[scale])
            row[2].text = str(scaled_scores[scale])
            row[3].text = "–°–º. –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∏–∂–µ"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π AI –∞–Ω–∞–ª–∏–∑
        doc.add_heading("–ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑", level=2)
        
        if test_type.upper() == "PAEI":
            interpretation = ai_interpreter.interpret_paei(scores_raw, dialog_context)
        elif test_type.upper() == "DISC":
            interpretation = ai_interpreter.interpret_disc(scores_raw, dialog_context)
        elif test_type.upper() == "HEXACO":
            interpretation = ai_interpreter.interpret_hexaco(scores_raw, dialog_context)
        else:
            interpretation = "–¢–∏–ø —Ç–µ—Å—Ç–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏"
        
        doc.add_paragraph(interpretation)
        
    else:
        # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
        df_interp = pd.read_csv(interpretations_path)
        for scale in sorted(scores_raw.keys()):
            row = table.add_row().cells
            row[0].text = scale
            row[1].text = str(scores_raw[scale])
            row[2].text = str(scaled_scores[scale])
            row[3].text = _pick_interpretation(scale, scaled_scores[scale], df_interp)
    
    # Footnotes
    doc.add_paragraph()
    doc.add_paragraph("‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–æ—Å—è—Ç –æ–∑–Ω–∞–∫–æ–º–∏—Ç–µ–ª—å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –Ω–µ –∑–∞–º–µ–Ω—è—é—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É.")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ AI
    if use_ai and ai_interpreter:
        doc.add_paragraph()
        doc.add_paragraph(
            "ü§ñ –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å –ø–æ–º–æ—â—å—é OpenAI GPT-3.5. "
            "Powered by OpenAI (https://openai.com)"
        )
    
    doc.save(str(out_path))
    return out_path


# –ê–ª–∏–∞—Å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def render_report(*args, **kwargs):
    """–û–±—ë—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    return render_enhanced_report(*args, **kwargs)