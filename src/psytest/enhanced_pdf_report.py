"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è PDF –æ—Ç—á—ë—Ç–æ–≤ —Å –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–µ—á–∞—Ç–∏, –±–µ–∑ —Ç–∏—Ç—É–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
"""

from pathlib import Path
from typing import Dict, List, Tuple, Optional
import matplotlib.pyplot as plt
import matplotlib.patches as patches
from reportlab.lib.pagesizes import A4
from reportlab.lib.units import mm, cm
from reportlab.pdfgen import canvas
from reportlab.lib.colors import Color, black, white
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.platypus import PageBreak, KeepTogether
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from datetime import datetime
import numpy as np

from .charts import make_radar, make_bar_chart

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞
class DesignConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–∏–∑–∞–π–Ω–∞ –¥–ª—è –ø–µ—á–∞—Ç–∏"""
    
    # –¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —á/–± –ø–µ—á–∞—Ç–∏)
    PRIMARY_COLOR = Color(0.18, 0.25, 0.34)      # #2E4057 —Ç—ë–º–Ω–æ-—Å–∏–Ω–∏–π
    ACCENT_COLOR = Color(0.29, 0.56, 0.72)       # #4A90B8 —Å–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π  
    TEXT_COLOR = Color(0.17, 0.17, 0.17)         # #2C2C2C —Ç—ë–º–Ω–æ-—Å–µ—Ä—ã–π
    LIGHT_GRAY = Color(0.9, 0.9, 0.9)            # #E6E6E6 —Å–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π
    WHITE = Color(1, 1, 1)                        # #FFFFFF –±–µ–ª—ã–π
    
    # –†–∞–∑–º–µ—Ä—ã (–≤ –º–º)
    PAGE_WIDTH = 210
    PAGE_HEIGHT = 297
    MARGIN = 20
    
    # –†–∞–∑–º–µ—Ä—ã –≥—Ä–∞—Ñ–∏–∫–æ–≤ (–≤ –º–º) 
    RADAR_SIZE = 80
    BAR_CHART_WIDTH = 160
    BAR_CHART_HEIGHT = 60
    
    # –®—Ä–∏—Ñ—Ç—ã (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ Unicode —à—Ä–∏—Ñ—Ç—ã)
    TITLE_FONT = "Times-Bold"
    BODY_FONT = "Times-Roman"
    SMALL_FONT = "Times-Roman"
    
    TITLE_SIZE = 14
    BODY_SIZE = 10
    SMALL_SIZE = 8


class EnhancedCharts:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –¥–∏–∞–≥—Ä–∞–º–º"""
    
    @staticmethod
    def create_minimalist_radar(labels: List[str], values: List[float], 
                               title: str, out_path: Path) -> Path:
        """–°–æ–∑–¥–∞—ë—Ç –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—É—é —Ä–∞–¥–∞—Ä–Ω—É—é –¥–∏–∞–≥—Ä–∞–º–º—É"""
        return make_radar(labels, values, out_path, title=title, max_value=10)
    
    @staticmethod
    def create_minimalist_bar_chart(labels: List[str], values: List[float],
                                   title: str, out_path: Path) -> Path:
        """–°–æ–∑–¥–∞—ë—Ç –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—É—é —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É"""
        return make_bar_chart(labels, values, out_path, title=title, max_value=10)


class EnhancedPDFReport:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω—ã—Ö PDF –æ—Ç—á—ë—Ç–æ–≤"""
    
    def __init__(self, template_dir: Optional[Path] = None):
        self.template_dir = template_dir or Path.cwd() / "temp_charts"
        self.template_dir.mkdir(exist_ok=True)
        self._setup_fonts()
        
    def _setup_fonts(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —à—Ä–∏—Ñ—Ç—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã Windows —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π
            import os
            windows_fonts = "C:/Windows/Fonts/"
            
            # –°–ø–∏—Å–æ–∫ —à—Ä–∏—Ñ—Ç–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
            font_candidates = [
                ("arial.ttf", "Arial-Regular"),
                ("arialbd.ttf", "Arial-Bold"), 
                ("times.ttf", "Times-Regular"),
                ("timesbd.ttf", "Times-Bold"),
            ]
            
            fonts_registered = {}
            
            for font_file, font_name in font_candidates:
                font_path = os.path.join(windows_fonts, font_file)
                if os.path.exists(font_path):
                    try:
                        pdfmetrics.registerFont(TTFont(font_name, font_path))
                        fonts_registered[font_name] = True
                        print(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —à—Ä–∏—Ñ—Ç: {font_name}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ {font_name}: {e}")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, —á—Ç–æ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å
            if "Arial-Regular" in fonts_registered:
                DesignConfig.BODY_FONT = "Arial-Regular"
                DesignConfig.SMALL_FONT = "Arial-Regular"
                print("üìù –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Arial –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞")
            else:
                DesignConfig.BODY_FONT = "Times-Roman"
                DesignConfig.SMALL_FONT = "Times-Roman"
                print("üìù –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Times-Roman –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞")
            
            if "Arial-Bold" in fonts_registered:
                DesignConfig.TITLE_FONT = "Arial-Bold"
                print("üìù –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Arial-Bold –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤")
            elif "Times-Bold" in fonts_registered:
                DesignConfig.TITLE_FONT = "Times-Bold"
                print("üìù –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Times-Bold –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤")
            else:
                DesignConfig.TITLE_FONT = "Times-Bold"
                print("üìù –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π Times-Bold –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤")
                
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à—Ä–∏—Ñ—Ç–æ–≤: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã
            DesignConfig.TITLE_FONT = "Times-Bold"
            DesignConfig.BODY_FONT = "Times-Roman"
            DesignConfig.SMALL_FONT = "Times-Roman"
            print("üìù –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã Times")
        
    def create_visual_bar(self, value: float, max_value: float = 10, 
                         width: int = 100) -> str:
        """–°–æ–∑–¥–∞—ë—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è —Ç–∞–±–ª–∏—Ü"""
        filled = int((value / max_value) * width) if max_value > 0 else 0
        empty = width - filled
        return '‚ñà' * (filled // 10) + '‚ñë' * (empty // 10)
    
    def generate_enhanced_report(self, 
                               participant_name: str,
                               test_date: str,
                               paei_scores: Dict[str, float],
                               disc_scores: Dict[str, float], 
                               hexaco_scores: Dict[str, float],
                               soft_skills_scores: Dict[str, float],
                               ai_interpretations: Dict[str, str],
                               out_path: Path) -> Path:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π PDF –æ—Ç—á—ë—Ç"""
        
        # –°–æ–∑–¥–∞–Ω–∏–µ PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞
        doc = SimpleDocTemplate(str(out_path), pagesize=A4,
                              rightMargin=DesignConfig.MARGIN*mm,
                              leftMargin=DesignConfig.MARGIN*mm,
                              topMargin=DesignConfig.MARGIN*mm,
                              bottomMargin=DesignConfig.MARGIN*mm)
        
        # –°—Ç–∏–ª–∏
        styles = self._get_custom_styles()
        story = []
        
        # === –°–¢–†–ê–ù–ò–¶–ê 1: –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ===
        
        # –®–∞–ø–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        story.append(Paragraph("–ü–°–ò–•–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô –ü–û–†–¢–†–ï–¢ –°–û–¢–†–£–î–ù–ò–ö–ê", 
                              styles['MainTitle']))
        story.append(Spacer(1, 8*mm))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ–º
        info_data = [
            ['–ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:', participant_name],
            ['–î–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', test_date],
            ['–°—Ç–∞—Ç—É—Å:', '–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω']
        ]
        
        info_table = Table(info_data, colWidths=[40*mm, 120*mm])
        info_table.setStyle(TableStyle([
            ('FONTNAME', (0, 0), (-1, -1), DesignConfig.BODY_FONT),
            ('FONTSIZE', (0, 0), (-1, -1), DesignConfig.BODY_SIZE),
            ('TEXTCOLOR', (0, 0), (0, -1), DesignConfig.PRIMARY_COLOR),
            ('TEXTCOLOR', (1, 0), (1, -1), DesignConfig.TEXT_COLOR),
            ('VALIGN', (0, 0), (-1, -1), 'TOP'),
            ('LEFTPADDING', (0, 0), (-1, -1), 0),
            ('RIGHTPADDING', (0, 0), (-1, -1), 6),
            ('TOPPADDING', (0, 0), (-1, -1), 2),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 2),
        ]))
        
        story.append(info_table)
        story.append(Spacer(1, 10*mm))
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–∏–∞–≥—Ä–∞–º–º
        chart_paths = self._create_all_charts(paei_scores, disc_scores, hexaco_scores, soft_skills_scores)
        
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä–∞–¥–∞—Ä–Ω—ã—Ö –¥–∏–∞–≥—Ä–∞–º–º (2 –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
        story.append(Paragraph("–û–ë–ó–û–† –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø", styles['SectionTitle']))
        story.append(Spacer(1, 5*mm))
        
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–¥–∞—Ä–Ω—ã—Ö –¥–∏–∞–≥—Ä–∞–º–º
        # –ü–æ–∫–∞ –¥–æ–±–∞–≤–ª—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
        story.append(Paragraph("‚Ä¢ –î–∏–∞–≥—Ä–∞–º–º–∞ PAEI (–ê–¥–∏–∑–µ—Å): " + self._format_scores(paei_scores), 
                              styles['Body']))
        story.append(Paragraph("‚Ä¢ –î–∏–∞–≥—Ä–∞–º–º–∞ DISC: " + self._format_scores(disc_scores), 
                              styles['Body']))
        story.append(Spacer(1, 5*mm))
        
        # –ö—Ä–∞—Ç–∫–∏–µ –≤—ã–≤–æ–¥—ã
        story.append(Paragraph("–ö–†–ê–¢–ö–ò–ï –í–´–í–û–î–´", styles['SectionTitle']))
        story.append(Spacer(1, 3*mm))
        
        if 'paei' in ai_interpretations:
            brief_paei = ai_interpretations['paei'][:200] + "..."
            story.append(Paragraph(f"<b>–ü–æ –ê–¥–∏–∑–µ—Å—É:</b> {brief_paei}", styles['Body']))
        
        # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≤—Ç–æ—Ä—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        story.append(PageBreak())
        
        # === –°–¢–†–ê–ù–ò–¶–ê 2: –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ ===
        
        story.append(Paragraph("–î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í", styles['MainTitle']))
        story.append(Spacer(1, 8*mm))
        
        # –î–∏–∞–≥—Ä–∞–º–º–∞ HEXACO
        story.append(Paragraph("–¢–ï–°–¢ HEXACO", styles['SectionTitle']))
        story.append(Paragraph(self._format_scores(hexaco_scores), styles['Body']))
        story.append(Spacer(1, 5*mm))
        
        # –°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ Soft Skills
        story.append(Paragraph("SOFT SKILLS", styles['SectionTitle']))
        soft_skills_table = self._create_skills_table(soft_skills_scores, styles)
        story.append(soft_skills_table)
        story.append(Spacer(1, 8*mm))
        
        # AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
        story.append(Paragraph("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ò –í–´–í–û–î–´", styles['SectionTitle']))
        story.append(Spacer(1, 3*mm))
        
        for test_name, interpretation in ai_interpretations.items():
            if interpretation:
                story.append(Paragraph(interpretation, styles['Body']))
                story.append(Spacer(1, 5*mm))
        
        # –§—É—Ç–µ—Ä —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± AI
        story.append(Spacer(1, 10*mm))
        story.append(Paragraph("ü§ñ –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å –ø–æ–º–æ—â—å—é OpenAI GPT-3.5", 
                              styles['Footer']))
        story.append(Paragraph("Powered by OpenAI (https://openai.com)", 
                              styles['Footer']))
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF
        doc.build(story)
        
        return out_path
    
    def _get_custom_styles(self):
        """–°–æ–∑–¥–∞—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å—Ç–∏–ª–∏"""
        styles = getSampleStyleSheet()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        styles.add(ParagraphStyle(
            name='MainTitle',
            parent=styles['Title'],
            fontSize=DesignConfig.TITLE_SIZE,
            fontName=DesignConfig.TITLE_FONT,
            textColor=DesignConfig.PRIMARY_COLOR,
            alignment=1,  # CENTER
            spaceAfter=6,
        ))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
        styles.add(ParagraphStyle(
            name='SectionTitle',
            parent=styles['Heading2'],
            fontSize=12,
            fontName=DesignConfig.TITLE_FONT,
            textColor=DesignConfig.PRIMARY_COLOR,
            spaceBefore=6,
            spaceAfter=3,
        ))
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
        styles.add(ParagraphStyle(
            name='Body',
            parent=styles['Normal'],
            fontSize=DesignConfig.BODY_SIZE,
            fontName=DesignConfig.BODY_FONT,
            textColor=DesignConfig.TEXT_COLOR,
            leading=12,
        ))
        
        # –§—É—Ç–µ—Ä
        styles.add(ParagraphStyle(
            name='Footer',
            parent=styles['Normal'],
            fontSize=DesignConfig.SMALL_SIZE,
            fontName=DesignConfig.SMALL_FONT,
            textColor=DesignConfig.ACCENT_COLOR,
            alignment=1,  # CENTER
        ))
        
        return styles
    
    def _create_all_charts(self, paei_scores: Dict, disc_scores: Dict, 
                         hexaco_scores: Dict, soft_skills_scores: Dict) -> Dict[str, Path]:
        """–°–æ–∑–¥–∞—ë—Ç –≤—Å–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –¥–ª—è –æ—Ç—á–µ—Ç–∞"""
        charts = {}
        
        # PAEI –¥–∏–∞–≥—Ä–∞–º–º–∞ (—Ä–∞–¥–∞—Ä–Ω–∞—è)
        paei_labels = list(paei_scores.keys())
        paei_values = list(paei_scores.values())
        paei_path = self.template_dir / "paei_radar.png"
        EnhancedCharts.create_minimalist_radar(paei_labels, paei_values, 
                                             "PAEI (–ê–¥–∏–∑–µ—Å)", paei_path)
        charts['paei'] = paei_path
        
        # Soft Skills –¥–∏–∞–≥—Ä–∞–º–º–∞ (—Ä–∞–¥–∞—Ä–Ω–∞—è)
        soft_labels = list(soft_skills_scores.keys())
        soft_values = list(soft_skills_scores.values())
        soft_radar_path = self.template_dir / "soft_skills_radar.png"
        EnhancedCharts.create_minimalist_radar(soft_labels, soft_values,
                                             "Soft Skills", soft_radar_path)
        charts['soft_skills'] = soft_radar_path
        
        # HEXACO –¥–∏–∞–≥—Ä–∞–º–º–∞ (—Ä–∞–¥–∞—Ä–Ω–∞—è)
        hexaco_labels = list(hexaco_scores.keys())
        hexaco_values = list(hexaco_scores.values())
        hexaco_path = self.template_dir / "hexaco_radar.png"
        EnhancedCharts.create_minimalist_radar(hexaco_labels, hexaco_values,
                                             "HEXACO", hexaco_path)
        charts['hexaco'] = hexaco_path
        
        # DISC –¥–∏–∞–≥—Ä–∞–º–º–∞ (—Ä–∞–¥–∞—Ä–Ω–∞—è)  
        disc_labels = list(disc_scores.keys())
        disc_values = list(disc_scores.values())
        disc_path = self.template_dir / "disc_radar.png"
        EnhancedCharts.create_minimalist_radar(disc_labels, disc_values,
                                             "DISC", disc_path)
        charts['disc'] = disc_path
        
        return charts
    
    def _create_skills_table(self, soft_skills: Dict[str, float], styles) -> Table:
        """–°–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—É —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏"""
        
        data = [['–ù–∞–≤—ã–∫', '–ë–∞–ª–ª', '–£—Ä–æ–≤–µ–Ω—å', '–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä']]
        
        for skill, score in soft_skills.items():
            level = self._get_level_name(score)
            indicator = self.create_visual_bar(score)
            data.append([skill, f"{score}/10", level, indicator])
        
        table = Table(data, colWidths=[50*mm, 20*mm, 30*mm, 50*mm])
        table.setStyle(TableStyle([
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            ('BACKGROUND', (0, 0), (-1, 0), DesignConfig.LIGHT_GRAY),
            ('TEXTCOLOR', (0, 0), (-1, 0), DesignConfig.PRIMARY_COLOR),
            ('FONTNAME', (0, 0), (-1, 0), DesignConfig.TITLE_FONT),
            ('FONTSIZE', (0, 0), (-1, 0), DesignConfig.BODY_SIZE),
            
            # –î–∞–Ω–Ω—ã–µ
            ('FONTNAME', (0, 1), (-1, -1), DesignConfig.BODY_FONT),
            ('FONTSIZE', (0, 1), (-1, -1), DesignConfig.BODY_SIZE),
            ('TEXTCOLOR', (0, 1), (-1, -1), DesignConfig.TEXT_COLOR),
            
            # –ì—Ä–∞–Ω–∏—Ü—ã
            ('GRID', (0, 0), (-1, -1), 0.5, DesignConfig.TEXT_COLOR),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ('LEFTPADDING', (0, 0), (-1, -1), 6),
            ('RIGHTPADDING', (0, 0), (-1, -1), 6),
            ('TOPPADDING', (0, 0), (-1, -1), 3),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 3),
        ]))
        
        return table
    
    def _format_scores(self, scores: Dict[str, float]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±–∞–ª–ª—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        return ", ".join([f"{k}: {v}" for k, v in scores.items()])
    
    def _get_level_name(self, score: float) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø–æ –±–∞–ª–ª–∞–º"""
        if score >= 8:
            return "–í—ã—Å–æ–∫–∏–π"
        elif score >= 5:
            return "–°—Ä–µ–¥–Ω–∏–π"
        else:
            return "–ù–∏–∑–∫–∏–π"