#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –¥–∏–∞–≥—Ä–∞–º–º —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π 5-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª—ã
"""
import sys
sys.path.append('src')

from pathlib import Path
from enhanced_pdf_report_v2 import EnhancedCharts
import time

def test_all_chart_types():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –¥–∏–∞–≥—Ä–∞–º–º"""
    print("üéØ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–ò–ê–ì–†–ê–ú–ú")
    print("="*60)
    
    results = []
    
    # 1. Soft Skills —Ä–∞–¥–∞—Ä
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Soft Skills —Ä–∞–¥–∞—Ä–∞...")
    try:
        labels = ['–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è', '–†–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ', '–õ–∏–¥–µ—Ä—Å—Ç–≤–æ', '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ']
        values = [4.2, 3.8, 3.5, 4.1]
        path = Path('comprehensive_test_soft_skills_radar.png')
        
        EnhancedCharts.create_minimalist_radar(labels, values, 'Soft Skills (5-–±–∞–ª–ª—å–Ω–∞—è —à–∫–∞–ª–∞)', path)
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω: {path}")
        results.append(('Soft Skills —Ä–∞–¥–∞—Ä', True, path))
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        results.append(('Soft Skills —Ä–∞–¥–∞—Ä', False, None))
    
    # 2. HEXACO —Ä–∞–¥–∞—Ä  
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HEXACO —Ä–∞–¥–∞—Ä–∞...")
    try:
        labels = ['H', 'E', 'X', 'A', 'C', 'O']
        values = [4.5, 3.2, 3.8, 4.0, 4.3, 3.7]
        path = Path('comprehensive_test_hexaco_radar.png')
        
        EnhancedCharts.create_hexaco_radar(labels, values, 'HEXACO (5-–±–∞–ª–ª—å–Ω–∞—è —à–∫–∞–ª–∞)', path)
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω: {path}")
        results.append(('HEXACO —Ä–∞–¥–∞—Ä', True, path))
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        results.append(('HEXACO —Ä–∞–¥–∞—Ä', False, None))
    
    # 3. –ë–∞—Ä–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ Soft Skills
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Soft Skills –±–∞—Ä–Ω–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã...")
    try:
        labels = ['–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è', '–õ–∏–¥–µ—Ä—Å—Ç–≤–æ', '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ']
        values = [4.1, 3.7, 4.2]
        path = Path('comprehensive_test_soft_skills_bar.png')
        
        EnhancedCharts.create_minimalist_bar_chart(labels, values, 'Soft Skills –±–∞—Ä–Ω–∞—è (5-–±–∞–ª–ª—å–Ω–∞—è —à–∫–∞–ª–∞)', path)
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω: {path}")
        results.append(('Soft Skills –±–∞—Ä–Ω–∞—è', True, path))
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        results.append(('Soft Skills –±–∞—Ä–Ω–∞—è', False, None))
    
    # 4. PAEI –¥–∏–∞–≥—Ä–∞–º–º—ã
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PAEI –¥–∏–∞–≥—Ä–∞–º–º...")
    try:
        from src.psytest.charts import make_combined_paei_chart
        
        paei_scores = {'P': 3, 'A': 2, 'E': 4, 'I': 3}
        path = Path('comprehensive_test_paei_combined.png')
        
        make_combined_paei_chart(paei_scores, str(path))
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω: {path}")
        results.append(('PAEI –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è', True, path))
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        results.append(('PAEI –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è', False, None))
    
    # 5. DISC –¥–∏–∞–≥—Ä–∞–º–º—ã
    print("\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DISC –¥–∏–∞–≥—Ä–∞–º–º...")
    try:
        from src.psytest.charts import make_combined_disc_chart
        
        disc_scores = {'D': 15, 'I': 12, 'S': 8, 'C': 10}
        path = Path('comprehensive_test_disc_combined.png')
        
        make_combined_disc_chart(disc_scores, str(path))
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω: {path}")
        results.append(('DISC –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è', True, path))
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        results.append(('DISC –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è', False, None))
    
    return results

def show_results(results):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("="*60)
    
    successful = 0
    total = len(results)
    
    for test_name, success, path in results:
        if success:
            file_size = path.stat().st_size if path and path.exists() else 0
            print(f"   ‚úÖ {test_name} - {file_size} –±–∞–π—Ç")
            successful += 1
        else:
            print(f"   ‚ùå {test_name} - –û–®–ò–ë–ö–ê")
    
    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {successful}/{total} ({successful/total*100:.1f}%)")
    print(f"   ‚Ä¢ –ü—Ä–æ–≤–∞–ª–∏–≤—à–∏—Ö—Å—è: {total-successful}/{total}")
    
    if successful == total:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("‚ú® –í—Å–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –¥–æ–ª–∂–Ω—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —à–∫–∞–ª—É: 0, 1, 2, 3, 4, 5")
        print("‚ùå –ù–ï –¥–æ–ª–∂–Ω—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å: 0, 2, 4, 6, 8, 10")
    else:
        print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å!")
        print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ")
    
    return successful == total

def main():
    start_time = time.time()
    
    results = test_all_chart_types()
    all_success = show_results(results)
    
    end_time = time.time()
    
    print(f"\n‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {end_time - start_time:.2f} —Å–µ–∫")
    
    if all_success:
        print("\nüöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")
    else:
        print("\nüîß –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –û–¢–õ–ê–î–ö–ê")

if __name__ == "__main__":
    main()