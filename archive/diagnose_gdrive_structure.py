#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Google Drive –ø–∞–ø–æ–∫
"""

from oauth_google_drive import setup_oauth_google_drive

def list_folder_contents(service, folder_id, folder_name=""):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏"""
    try:
        print(f"\nüìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ '{folder_name}' (ID: {folder_id}):")
        print("-" * 60)
        
        query = f"'{folder_id}' in parents"
        results = service.files().list(
            q=query, 
            fields="files(id, name, mimeType, parents, createdTime, modifiedTime)",
            orderBy="modifiedTime desc"
        ).execute()
        
        files = results.get('files', [])
        
        if not files:
            print("   üìÑ –ü–∞–ø–∫–∞ –ø—É—Å—Ç–∞")
            return []
        
        for file in files:
            file_type = "üìÅ" if file['mimeType'] == 'application/vnd.google-apps.folder' else "üìÑ"
            modified = file.get('modifiedTime', 'Unknown')[:19]
            print(f"   {file_type} {file['name']}")
            print(f"      ID: {file['id']}")
            print(f"      –ò–∑–º–µ–Ω–µ–Ω: {modified}")
            print()
        
        return files
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∞–ø–∫–∏: {e}")
        return []

def diagnose_folder_structure():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ Google Drive"""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–¢–†–£–ö–¢–£–†–´ GOOGLE DRIVE")
    print("=" * 60)
    
    service = setup_oauth_google_drive()
    if not service:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google Drive")
        return
    
    try:
        # 1. –ò—â–µ–º –ø–∞–ø–∫—É MyAiProjects
        print("\nüîç –ü–æ–∏—Å–∫ –ø–∞–ø–∫–∏ MyAiProjects...")
        query = "name='MyAiProjects' and mimeType='application/vnd.google-apps.folder'"
        results = service.files().list(q=query, fields="files(id, name, parents)").execute()
        folders = results.get('files', [])
        
        if not folders:
            print("‚ùå –ü–∞–ø–∫–∞ MyAiProjects –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        main_folder = folders[0]
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ MyAiProjects: {main_folder['id']}")
        
        # 2. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ MyAiProjects
        main_contents = list_folder_contents(service, main_folder['id'], "MyAiProjects")
        
        # 3. –ò—â–µ–º –ø–∞–ø–∫—É PsychTest Reports
        psychtest_folder = None
        for item in main_contents:
            if item['name'] == 'PsychTest Reports' and item['mimeType'] == 'application/vnd.google-apps.folder':
                psychtest_folder = item
                break
        
        if not psychtest_folder:
            print("‚ùå –ü–∞–ø–∫–∞ PsychTest Reports –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ MyAiProjects")
            return
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ PsychTest Reports: {psychtest_folder['id']}")
        
        # 4. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ PsychTest Reports
        psychtest_contents = list_folder_contents(service, psychtest_folder['id'], "PsychTest Reports")
        
        # 5. –ò—â–µ–º –ø–∞–ø–∫—É 2025
        year_folder = None
        for item in psychtest_contents:
            if item['name'] == '2025' and item['mimeType'] == 'application/vnd.google-apps.folder':
                year_folder = item
                break
        
        if not year_folder:
            print("‚ùå –ü–∞–ø–∫–∞ 2025 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ PsychTest Reports")
            return
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞ 2025: {year_folder['id']}")
        
        # 6. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ 2025
        year_contents = list_folder_contents(service, year_folder['id'], "2025")
        
        # 7. –ò—â–µ–º –ø–∞–ø–∫—É 10-October
        month_folder = None
        for item in year_contents:
            if item['name'] == '10-October' and item['mimeType'] == 'application/vnd.google-apps.folder':
                month_folder = item
                break
        
        if not month_folder:
            print("‚ùå –ü–∞–ø–∫–∞ 10-October –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ 2025")
            return
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞ 10-October: {month_folder['id']}")
        
        # 8. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ 10-October (–∑–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç—á–µ—Ç—ã)
        month_contents = list_folder_contents(service, month_folder['id'], "10-October")
        
        # 9. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ —Ñ–∞–π–ª—ã –≤ –∫–æ—Ä–Ω–µ Google Drive
        print("\nüîç –ù–µ–¥–∞–≤–Ω–∏–µ —Ñ–∞–π–ª—ã –≤ Google Drive (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):")
        print("-" * 60)
        
        recent_results = service.files().list(
            fields="files(id, name, parents, createdTime, mimeType)",
            orderBy="createdTime desc",
            pageSize=10
        ).execute()
        
        recent_files = recent_results.get('files', [])
        for file in recent_files:
            if 'pdf' in file['name'].lower():
                parents = file.get('parents', ['–ù–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è'])
                created = file.get('createdTime', 'Unknown')[:19]
                print(f"   üìÑ {file['name']}")
                print(f"      ID: {file['id']}")
                print(f"      –°–æ–∑–¥–∞–Ω: {created}")
                print(f"      –†–æ–¥–∏—Ç–µ–ª–∏: {parents}")
                print()
        
        print("\n" + "=" * 60)
        print("üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É 10-October - —Ç–∞–º –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç—á–µ—Ç—ã")
        print("2. –ï—Å–ª–∏ –æ—Ç—á–µ—Ç—ã –Ω–µ –≤ –Ω—É–∂–Ω–æ–π –ø–∞–ø–∫–µ, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ '–ù–µ–¥–∞–≤–Ω–∏–µ —Ñ–∞–π–ª—ã'")
        print("3. –í–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –≤ –∫–æ—Ä–µ–Ω—å –∏–ª–∏ –¥—Ä—É–≥—É—é –ø–∞–ø–∫—É")
        print("=" * 60)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")

if __name__ == "__main__":
    diagnose_folder_structure()