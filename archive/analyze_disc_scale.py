#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —à–∫–∞–ª—ã –¥–ª—è DISC - 1-5 vs 2-10 vs —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
"""

def analyze_disc_scale_options():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —à–∫–∞–ª—ã DISC"""
    print("üéØ –ê–ù–ê–õ–ò–ó –û–ü–¢–ò–ú–ê–õ–¨–ù–û–ô –®–ö–ê–õ–´ DISC")
    print("=" * 50)
    
    # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—à–µ–ª 8 –≤–æ–ø—Ä–æ—Å–æ–≤, –ø–æ 2 –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    example_answers = {
        "D": [4, 5],  # –î–≤–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—é: 4 –∏ 5 –±–∞–ª–ª–æ–≤
        "I": [2, 3],  # –î–≤–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ –≤–ª–∏—è–Ω–∏—é: 2 –∏ 3 –±–∞–ª–ª–∞
        "S": [3, 4],  # –î–≤–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤—É: 3 –∏ 4 –±–∞–ª–ª–∞
        "C": [5, 4]   # –î–≤–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—é: 5 –∏ 4 –±–∞–ª–ª–∞
    }
    
    print("üìù –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    for category, answers in example_answers.items():
        print(f"   {category}: {answers} (–æ—Ç–≤–µ—Ç—ã –Ω–∞ 2 –≤–æ–ø—Ä–æ—Å–∞)")
    
    print("\nüìä –í–ê–†–ò–ê–ù–¢–´ –ü–†–ï–î–°–¢–ê–í–õ–ï–ù–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
    print("-" * 50)
    
    # –í–∞—Ä–∏–∞–Ω—Ç 1: –°—É–º–º–∞ (—Ç–µ–∫—É—â–∞—è —Å–∏—Å—Ç–µ–º–∞)
    print("1Ô∏è‚É£ –°–£–ú–ú–ê –ë–ê–õ–õ–û–í (—Ç–µ–∫—É—â–∞—è —Å–∏—Å—Ç–µ–º–∞):")
    sums = {cat: sum(answers) for cat, answers in example_answers.items()}
    for category, total in sums.items():
        print(f"   {category}: {total}/10 (–¥–∏–∞–ø–∞–∑–æ–Ω 2-10)")
    print("   üëç –ü–ª—é—Å—ã: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å–∏–ª—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    print("   üëé –ú–∏–Ω—É—Å—ã: –ù–µ–ø—Ä–∏–≤—ã—á–Ω–∞—è —à–∫–∞–ª–∞, –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤")
    
    # –í–∞—Ä–∏–∞–Ω—Ç 2: –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    print("\n2Ô∏è‚É£ –°–†–ï–î–ù–ï–ï –ó–ù–ê–ß–ï–ù–ò–ï (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π):")
    averages = {cat: round(sum(answers) / len(answers), 1) for cat, answers in example_answers.items()}
    for category, avg in averages.items():
        print(f"   {category}: {avg}/5.0 (–¥–∏–∞–ø–∞–∑–æ–Ω 1.0-5.0)")
    print("   üëç –ü–ª—é—Å—ã: –ü—Ä–∏–≤—ã—á–Ω–∞—è —à–∫–∞–ª–∞ 1-5, –ª–µ–≥–∫–æ –ø–æ–Ω–∏–º–∞—Ç—å")
    print("   üëç –ü–ª—é—Å—ã: –ù–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤")
    print("   üëç –ü–ª—é—Å—ã: –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–π —à–∫–∞–ª–µ –æ—Ç–≤–µ—Ç–æ–≤")
    
    # –í–∞—Ä–∏–∞–Ω—Ç 3: –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —à–∫–∞–ª–∞
    print("\n3Ô∏è‚É£ –ü–†–û–¶–ï–ù–¢–ù–ê–Ø –®–ö–ê–õ–ê:")
    percentages = {cat: round((sum(answers) / (len(answers) * 5)) * 100, 1) for cat, answers in example_answers.items()}
    for category, pct in percentages.items():
        print(f"   {category}: {pct}% (–¥–∏–∞–ø–∞–∑–æ–Ω 20%-100%)")
    print("   üëç –ü–ª—é—Å—ã: –ò–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ –ø–æ–Ω—è—Ç–Ω–æ")
    print("   üëé –ú–∏–Ω—É—Å—ã: –ù–µ–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –º–∏–Ω–∏–º—É–º 20%")

def check_current_implementation():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é"""
    print("\nüîß –¢–ï–ö–£–©–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø:")
    print("=" * 30)
    
    try:
        import sys, os
        current_dir = os.path.dirname(os.path.abspath(__file__))
        sys.path.insert(0, current_dir)
        
        from telegram_test_bot import DISC_QUESTIONS
        
        print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ DISC –≤–æ–ø—Ä–æ—Å–æ–≤: {len(DISC_QUESTIONS)}")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        category_count = {"D": 0, "I": 0, "S": 0, "C": 0}
        for q in DISC_QUESTIONS:
            if 'category' in q:
                category_count[q['category']] += 1
        
        print("üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤:")
        for category, count in category_count.items():
            print(f"   {category}: {count} –≤–æ–ø—Ä–æ—Å–æ–≤")
        
        if all(count == 2 for count in category_count.values()):
            print("\n‚úÖ –°–∏—Å—Ç–µ–º–∞ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∞: –ø–æ 2 –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
            print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –°–†–ï–î–ù–ï–ï –ó–ù–ê–ß–ï–ù–ò–ï (1-5)")
        else:
            print("\n‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –Ω–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∞!")
            print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ª–∏–±–æ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞—Ç—å, –ª–∏–±–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ä–µ–¥–Ω–µ–µ")
        
        return category_count
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

def recommend_implementation():
    """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏"""
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("=" * 20)
    
    print("‚úÖ –õ–£–ß–®–ò–ô –í–ê–†–ò–ê–ù–¢: –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 1-5")
    print("   ‚Ä¢ –õ–µ–≥–∫–æ –ø–æ–Ω–∏–º–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
    print("   ‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —à–∫–∞–ª–µ –æ—Ç–≤–µ—Ç–æ–≤")
    print("   ‚Ä¢ –ù–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤")
    print("   ‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç –≤ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏")
    
    print("\nüîß –ò–ó–ú–ï–ù–ï–ù–ò–Ø –í –ö–û–î–ï:")
    print("1. –í telegram_test_bot.py:")
    print("   ‚Ä¢ –í–º–µ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—É–º–º—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å—Ä–µ–¥–Ω–µ–µ")
    print("   ‚Ä¢ disc_scores[category] = sum / count")
    
    print("\n2. –í –¥–∏–∞–≥—Ä–∞–º–º–∞—Ö:")
    print("   ‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å max_value —Å 10 –Ω–∞ 5")
    print("   ‚Ä¢ –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∏ –æ—Å–µ–π")
    
    print("\n3. –í scale_normalizer.py:")
    print("   ‚Ä¢ –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ –¥–∏–∞–ø–∞–∑–æ–Ω–µ")

def simulation_average_system():
    """–°–∏–º—É–ª—è—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Å–æ —Å—Ä–µ–¥–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏"""
    print("\nüß™ –°–ò–ú–£–õ–Ø–¶–ò–Ø –ù–û–í–û–ô –°–ò–°–¢–ï–ú–´:")
    print("=" * 35)
    
    # –†–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤
    scenarios = {
        "–í—ã—Å–æ–∫–æ–µ –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ": {"D": [5, 5], "I": [2, 1], "S": [3, 2], "C": [4, 3]},
        "–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π": {"D": [3, 4], "I": [3, 3], "S": [3, 4], "C": [3, 3]},
        "–í—ã—Å–æ–∫–æ–µ –≤–ª–∏—è–Ω–∏–µ": {"D": [2, 1], "I": [5, 4], "S": [2, 3], "C": [2, 2]}
    }
    
    for name, answers in scenarios.items():
        print(f"\nüìä –°—Ü–µ–Ω–∞—Ä–∏–π: {name}")
        averages = {}
        for category, scores in answers.items():
            avg = sum(scores) / len(scores)
            averages[category] = round(avg, 1)
            print(f"   {category}: {scores} ‚Üí —Å—Ä–µ–¥–Ω–µ–µ {avg:.1f}/5.0")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        dominant = max(averages.items(), key=lambda x: x[1])
        print(f"   üéØ –î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —Å—Ç–∏–ª—å: {dominant[0]} ({dominant[1]}/5.0)")

if __name__ == "__main__":
    analyze_disc_scale_options()
    check_current_implementation()
    recommend_implementation()
    simulation_average_system()