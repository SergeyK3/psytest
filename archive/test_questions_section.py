#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥—É–ª—è questions_answers_section.py
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ä–∞–∑–¥–µ–ª–∞ —Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–æ–π –æ—Ç–≤–µ—Ç–æ–≤
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent))

from questions_answers_section import QuestionAnswerSection, create_sample_data_for_testing

def test_questions_loading():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤"""
    print("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤...")
    
    qa_section = QuestionAnswerSection()
    
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:")
    print(f"  ‚Ä¢ PAEI: {len(qa_section.paei_questions)} –≤–æ–ø—Ä–æ—Å–æ–≤")
    print(f"  ‚Ä¢ DISC: {len(qa_section.disc_questions)} –≤–æ–ø—Ä–æ—Å–æ–≤")
    print(f"  ‚Ä¢ Soft Skills: {len(qa_section.soft_skills_questions)} –≤–æ–ø—Ä–æ—Å–æ–≤")
    print(f"  ‚Ä¢ HEXACO: {len(qa_section.hexaco_questions)} –≤–æ–ø—Ä–æ—Å–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å PAEI
    if qa_section.paei_questions:
        first_question = qa_section.paei_questions[0]
        print(f"\nüéØ –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å PAEI:")
        print(f"‚ùì {first_question['question']}")
        print(f"üìù –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:")
        for key, answer in first_question['answers'].items():
            print(f"   {key}. {answer}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–∞
        expected_start = "–ö–æ–≥–¥–∞ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç —Å–ª–æ–∂–Ω–∞—è –∑–∞–¥–∞—á–∞"
        if first_question['question'].startswith(expected_start):
            print(f"‚úÖ –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –∑–∞–≥—Ä—É–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–≤–æ–º –≤–æ–ø—Ä–æ—Å–µ!")
    else:
        print("‚ùå PAEI –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")

def test_paei_section_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ä–∞–∑–¥–µ–ª–∞ PAEI"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ä–∞–∑–¥–µ–ª–∞ PAEI...")
    
    qa_section = QuestionAnswerSection()
    sample_data = create_sample_data_for_testing()
    
    # –ü—Ä–æ—Å—Ç—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    class MockStyles:
        def __getitem__(self, key):
            return {"name": key}
    
    styles = MockStyles()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–∑–¥–µ–ª
    paei_elements = qa_section.generate_paei_questions_section(
        user_answers=sample_data['paei_answers'],
        final_scores=sample_data['paei_scores'],
        styles=styles
    )
    
    print(f"üìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(paei_elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ PAEI")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    print(f"\nüìù –ü–µ—Ä–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–∞–∑–¥–µ–ª–∞:")
    for i, element in enumerate(paei_elements[:3]):
        if hasattr(element, 'text'):
            print(f"  {i+1}. {element.text[:100]}...")
        else:
            print(f"  {i+1}. {type(element).__name__}")

def test_complete_section_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞...")
    
    qa_section = QuestionAnswerSection()
    sample_data = create_sample_data_for_testing()
    
    # –ü—Ä–æ—Å—Ç—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    class MockStyles:
        def __getitem__(self, key):
            return {"name": key}
    
    styles = MockStyles()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ä–∞–∑–¥–µ–ª
    all_elements = qa_section.generate_complete_questions_section(
        paei_answers=sample_data['paei_answers'],
        soft_skills_answers=sample_data['soft_skills_answers'],
        hexaco_answers=sample_data['hexaco_answers'],
        disc_answers=sample_data['disc_answers'],
        paei_scores=sample_data['paei_scores'],
        soft_skills_scores=sample_data['soft_skills_scores'],
        hexaco_scores=sample_data['hexaco_scores'],
        disc_scores=sample_data['disc_scores'],
        styles=styles
    )
    
    print(f"üìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(all_elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞")
    print(f"‚úÖ –ü–æ–ª–Ω—ã–π —Ä–∞–∑–¥–µ–ª –≥–æ—Ç–æ–≤ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å PDF –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–£–õ–Ø QUESTIONS_ANSWERS_SECTION")
    print("=" * 50)
    
    test_questions_loading()
    test_paei_section_generation()
    test_complete_section_generation()
    
    print("\n" + "=" * 50)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main()