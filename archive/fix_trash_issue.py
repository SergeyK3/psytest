#!/usr/bin/env python3
"""–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞–ø–∫—É –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""

from oauth_google_drive import setup_oauth_google_drive

def main():
    try:
        service = setup_oauth_google_drive()
        if not service:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ Google Drive")
            return

        # ID –ø–∞–ø–∫–∏ 2025
        folder_id = "1BFT4qQHJjS--qAx0Y7-3nJgKjlVl3grb"
        
        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–∞–ø–∫–∏ 2025: {folder_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É
        try:
            folder = service.files().get(fileId=folder_id, fields="id,name,trashed,parents").execute()
            print(f"üìÅ –ü–∞–ø–∫–∞: {folder.get('name')}")
            print(f"üóëÔ∏è –í –∫–æ—Ä–∑–∏–Ω–µ: {folder.get('trashed', False)}")
            print(f"üìÇ –†–æ–¥–∏—Ç–µ–ª–∏: {folder.get('parents', [])}")
            
            if folder.get('trashed'):
                print(f"\nüîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞–ø–∫—É –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã...")
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞–ø–∫—É
                restored = service.files().update(
                    fileId=folder_id,
                    body={'trashed': False}
                ).execute()
                
                print(f"‚úÖ –ü–∞–ø–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {restored.get('name')}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                query = f"'{folder_id}' in parents and trashed=true"
                results = service.files().list(q=query, fields="files(id, name)").execute()
                trashed_files = results.get('files', [])
                
                if trashed_files:
                    print(f"\nüîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã ({len(trashed_files)} —à—Ç.)...")
                    for file in trashed_files:
                        try:
                            service.files().update(
                                fileId=file['id'],
                                body={'trashed': False}
                            ).execute()
                            print(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {file['name']}")
                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è {file['name']}: {e}")
                else:
                    print(f"‚úÖ –§–∞–π–ª—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            else:
                print(f"‚úÖ –ü–∞–ø–∫–∞ –Ω–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–ø–∫–∏: {e}")
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        print(f"\nüìä –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ 2025:")
        query = f"'{folder_id}' in parents and trashed=false"
        results = service.files().list(q=query, fields="files(id, name, createdTime)", orderBy="createdTime desc").execute()
        files = results.get('files', [])
        
        for file in files:
            print(f"üìÑ {file['name']} ({file.get('createdTime')})")
        
        return folder_id
        
    except Exception as e:
        print(f"ERROR: {e}")
        return None

if __name__ == "__main__":
    main()