#!/usr/bin/env python3
"""
–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –¥–∏–∞–≥—Ä–∞–º–º —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –Ω–∞–±–æ—Ä–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
"""
import sys
sys.path.append('src')

import time
import random
from pathlib import Path
from enhanced_pdf_report_v2 import EnhancedCharts

def generate_test_data():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    datasets = [
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        {
            'name': '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è',
            'labels': ['A', 'B', 'C', 'D'],
            'values': [1.0, 1.0, 1.0, 1.0]
        },
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        {
            'name': '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è', 
            'labels': ['A', 'B', 'C', 'D'],
            'values': [5.0, 5.0, 5.0, 5.0]
        },
        # –°–ª—É—á–∞–π–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        {
            'name': '–°–ª—É—á–∞–π–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è',
            'labels': ['Test1', 'Test2', 'Test3', 'Test4'],
            'values': [round(random.uniform(1.0, 5.0), 1) for _ in range(4)]
        },
        # –ì—Ä–∞–Ω–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        {
            'name': '–ì—Ä–∞–Ω–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è',
            'labels': ['–ì—Ä–∞–Ω—å1', '–ì—Ä–∞–Ω—å2', '–ì—Ä–∞–Ω—å3'],
            'values': [1.0, 2.5, 5.0]
        },
        # –î–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        {
            'name': '–î–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è',
            'labels': ['–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–∞ –Ω–æ–º–µ—Ä –æ–¥–∏–Ω', '–î—Ä—É–≥–æ–π –¥–ª–∏–Ω–Ω—ã–π –Ω–∞–≤—ã–∫', '–¢—Ä–µ—Ç–∏–π –Ω–∞–≤—ã–∫'],
            'values': [3.2, 4.1, 2.8]
        }
    ]
    return datasets

def stress_test_charts():
    """–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º"""
    print("‚ö° –°–¢–†–ï–°–°-–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –î–ò–ê–ì–†–ê–ú–ú")
    print("="*60)
    
    datasets = generate_test_data()
    results = []
    total_time = 0
    
    for i, dataset in enumerate(datasets, 1):
        print(f"\n{i}Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {dataset['name']}")
        
        # –¢–µ—Å—Ç —Ä–∞–¥–∞—Ä–Ω–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
        start_time = time.time()
        try:
            radar_path = Path(f'stress_test_radar_{i}.png')
            EnhancedCharts.create_minimalist_radar(
                dataset['labels'], 
                dataset['values'], 
                f"–†–∞–¥–∞—Ä: {dataset['name']}", 
                radar_path
            )
            radar_time = time.time() - start_time
            radar_size = radar_path.stat().st_size
            print(f"   ‚úÖ –†–∞–¥–∞—Ä: {radar_time:.3f}—Å, {radar_size:,} –±–∞–π—Ç")
            results.append(('radar', True, radar_time, radar_size))
        except Exception as e:
            radar_time = time.time() - start_time
            print(f"   ‚ùå –†–∞–¥–∞—Ä: –û–®–ò–ë–ö–ê - {e}")
            results.append(('radar', False, radar_time, 0))
        
        # –¢–µ—Å—Ç –±–∞—Ä–Ω–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
        start_time = time.time()
        try:
            bar_path = Path(f'stress_test_bar_{i}.png')
            EnhancedCharts.create_minimalist_bar_chart(
                dataset['labels'], 
                dataset['values'], 
                f"–ë–∞—Ä: {dataset['name']}", 
                bar_path
            )
            bar_time = time.time() - start_time
            bar_size = bar_path.stat().st_size
            print(f"   ‚úÖ –ë–∞—Ä: {bar_time:.3f}—Å, {bar_size:,} –±–∞–π—Ç")
            results.append(('bar', True, bar_time, bar_size))
        except Exception as e:
            bar_time = time.time() - start_time
            print(f"   ‚ùå –ë–∞—Ä: –û–®–ò–ë–ö–ê - {e}")
            results.append(('bar', False, bar_time, 0))
        
        total_time += radar_time + bar_time
    
    return results, total_time

def analyze_performance(results, total_time):
    """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print(f"\nüìä –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
    print("="*60)
    
    successful = sum(1 for _, success, _, _ in results if success)
    total_tests = len(results)
    
    radar_times = [time for chart_type, success, time, _ in results if chart_type == 'radar' and success]
    bar_times = [time for chart_type, success, time, _ in results if chart_type == 'bar' and success]
    
    radar_sizes = [size for chart_type, success, _, size in results if chart_type == 'radar' and success]
    bar_sizes = [size for chart_type, success, _, size in results if chart_type == 'bar' and success]
    
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {successful}/{total_tests} ({successful/total_tests*100:.1f}%)")
    print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.3f} —Å–µ–∫—É–Ω–¥")
    print(f"‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –¥–∏–∞–≥—Ä–∞–º–º—É: {total_time/total_tests:.3f}—Å")
    
    if radar_times:
        print(f"üéØ –†–∞–¥–∞—Ä–Ω—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã:")
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {sum(radar_times)/len(radar_times):.3f}—Å")
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä: {sum(radar_sizes)/len(radar_sizes):,.0f} –±–∞–π—Ç")
    
    if bar_times:
        print(f"üìä –ë–∞—Ä–Ω—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã:")
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {sum(bar_times)/len(bar_times):.3f}—Å")
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä: {sum(bar_sizes)/len(bar_sizes):,.0f} –±–∞–π—Ç")
    
    # –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if successful == total_tests and total_time/total_tests < 2.0:
        print(f"\nüöÄ –û–¢–õ–ò–ß–ù–ê–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨!")
        return True
    elif successful >= total_tests * 0.8:
        print(f"\n‚úÖ –•–û–†–û–®–ê–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨")
        return True
    else:
        print(f"\n‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø")
        return False

def main():
    print("üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –°–¢–†–ï–°–°-–¢–ï–°–¢ –°–ò–°–¢–ï–ú–´")
    print("="*70)
    
    start_time = time.time()
    
    # –ó–∞–ø—É—Å–∫ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞
    results, test_time = stress_test_charts()
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    performance_good = analyze_performance(results, test_time)
    
    end_time = time.time()
    total_execution_time = end_time - start_time
    
    print(f"\nüéØ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê –°–¢–†–ï–°–°-–¢–ï–°–¢–ê:")
    print("="*70)
    print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞: {total_execution_time:.2f} —Å–µ–∫—É–Ω–¥")
    
    if performance_good:
        print("üéâ –°–ò–°–¢–ï–ú–ê –ü–†–û–®–õ–ê –°–¢–†–ï–°–°-–¢–ï–°–¢ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
        print("‚úÖ –ü—Ä–∏–µ–º–ª–µ–º–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
        print("üöÄ –ì–û–¢–û–í–ê –ö –ü–†–û–î–£–ö–¢–ò–í–ù–û–ô –≠–ö–°–ü–õ–£–ê–¢–ê–¶–ò–ò!")
    else:
        print("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
        print("üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")

if __name__ == "__main__":
    main()