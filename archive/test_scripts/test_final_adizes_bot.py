#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –ê–¥–∏–∑–µ—Å–∞ —Å –º–∞—Ä–∫–¥–∞—É–Ω —Ä–∞–∑–º–µ—Ç–∫–æ–π –≤ –±–æ—Ç–µ
"""

from interpretation_utils import generate_interpretations_from_prompt
from interpretation_formatter import format_ai_interpretations
from enhanced_pdf_report_v2 import EnhancedPDFReportV2
from pathlib import Path

def test_final_adizes_in_bot():
    """–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Ä–∞–±–æ—Ç—ã –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –ê–¥–∏–∑–µ—Å–∞ –∫–∞–∫ –≤ –±–æ—Ç–µ"""
    print("üöÄ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –ê–¥–∏–∑–µ—Å–∞ –≤ –±–æ—Ç–µ")
    print("=" * 60)
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–æ—Ç–∞
    paei_scores = {'P': 2, 'A': 2, 'E': 0, 'I': 1}  # –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π P –∏ A
    disc_scores = {'D': 4.0, 'I': 3.0, 'S': 2.5, 'C': 3.0}
    hexaco_scores = {'H': 3.8, 'E': 4.2, 'X': 3.5, 'A': 4.0, 'C': 3.9, 'O': 4.3}
    soft_skills_scores = {
        'leadership': 4, 'communication': 5, 'teamwork': 3, 'creativity': 4,
        'time_management': 3, 'critical_thinking': 4, 'adaptability': 5,
        'problem_solving': 4, 'emotional_intelligence': 3, 'conflict_resolution': 4
    }
    
    print(f"üìä PAEI —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {paei_scores}")
    
    # –®–∞–≥ 1: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
    print("\n1Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏...")
    raw_interpretations = generate_interpretations_from_prompt(
        paei_scores=paei_scores,
        disc_scores=disc_scores,
        hexaco_scores=hexaco_scores,
        soft_skills_scores=soft_skills_scores
    )
    
    if 'paei' in raw_interpretations:
        adizes_raw = raw_interpretations['paei']
        print(f"‚úÖ PAEI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ ({len(adizes_raw)} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞—Ä–∫–¥–∞—É–Ω —ç–ª–µ–º–µ–Ω—Ç—ã
        markdown_raw = {
            'bold': adizes_raw.count('**'),
            'headers': adizes_raw.count('###'),
            'separators': adizes_raw.count('---'),
            'lists': adizes_raw.count('- ')
        }
        print(f"   üìù –ú–∞—Ä–∫–¥–∞—É–Ω: {markdown_raw}")
    else:
        print("‚ùå PAEI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!")
        return
    
    # –®–∞–≥ 2: –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
    print("\n2Ô∏è‚É£ –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ interpretation_formatter...")
    formatted_interpretations = format_ai_interpretations(raw_interpretations)
    
    if 'paei' in formatted_interpretations:
        adizes_formatted = formatted_interpretations['paei']
        print(f"‚úÖ PAEI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∞ ({len(adizes_formatted)} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞—Ä–∫–¥–∞—É–Ω —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        markdown_formatted = {
            'bold': adizes_formatted.count('**'),
            'headers': adizes_formatted.count('###'),
            'separators': adizes_formatted.count('---'),
            'lists': adizes_formatted.count('- ')
        }
        print(f"   üìù –ú–∞—Ä–∫–¥–∞—É–Ω: {markdown_formatted}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç—å
        if markdown_raw == markdown_formatted:
            print("   ‚úÖ –ú–∞—Ä–∫–¥–∞—É–Ω —Ä–∞–∑–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        else:
            print("   ‚ö†Ô∏è –ú–∞—Ä–∫–¥–∞—É–Ω —Ä–∞–∑–º–µ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞!")
    else:
        print("‚ùå PAEI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –ø–æ—Ç–µ—Ä—è–Ω–∞!")
        return
    
    # –®–∞–≥ 3: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF –∫–∞–∫ –≤ –±–æ—Ç–µ
    print("\n3Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF –æ—Ç—á–µ—Ç...")
    
    try:
        pdf_generator = EnhancedPDFReportV2()
        pdf_path = Path("final_test_adizes_markdown.pdf")
        
        pdf_path_obj, _ = pdf_generator.generate_enhanced_report(
            participant_name="–¢–µ—Å—Ç –§–∏–Ω–∞–ª—å–Ω—ã–π",
            test_date="2025-10-24",
            paei_scores=paei_scores,
            disc_scores=disc_scores,
            hexaco_scores=hexaco_scores,
            soft_skills_scores=soft_skills_scores,
            ai_interpretations=formatted_interpretations,
            out_path=pdf_path,
            user_answers=None
        )
        
        if pdf_path_obj and pdf_path.exists():
            file_size = pdf_path.stat().st_size
            print(f"‚úÖ PDF —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
            print(f"üìÅ –ü—É—Ç—å: {pdf_path}")
            print(f"üìè –†–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
            print(f"\nüìÑ –ü—Ä–µ–≤—å—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –ê–¥–∏–∑–µ—Å–∞:")
            lines = adizes_formatted.split('\n')[:15]
            for line in lines:
                if line.strip():
                    print(f"   {line}")
            print("   ...")
            
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print("\n" + "=" * 60)
    print("üéØ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –ê–¥–∏–∑–µ—Å–∞ —Ç–µ–ø–µ—Ä—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–∞—Ä–∫–¥–∞—É–Ω —Ä–∞–∑–º–µ—Ç–∫—É.")

if __name__ == "__main__":
    test_final_adizes_in_bot()