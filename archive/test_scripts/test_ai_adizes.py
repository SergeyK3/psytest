#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –ê–¥–∏–∑–µ—Å–∞ —Å –º–∞—Ä–∫–¥–∞—É–Ω —Ä–∞–∑–º–µ—Ç–∫–æ–π
"""

from pathlib import Path
import json
import os
import re

def test_real_ai_interpretation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –ê–¥–∏–∑–µ—Å–∞")
    print("=" * 60)
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ PAEI
    paei_scores = {'P': 2, 'A': 2, 'E': 0, 'I': 1}  # –î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–µ P –∏ A
    
    # –ò—â–µ–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â—É—é —Ä–æ–ª—å
    max_role = max(paei_scores, key=paei_scores.get)
    max_score = paei_scores[max_role]
    
    print(f"üìä PAEI —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {paei_scores}")
    print(f"üéØ –î–æ–º–∏–Ω–∏—Ä—É—é—â–∞—è —Ä–æ–ª—å: {max_role} ({max_score} –±–∞–ª–ª–æ–≤)")
    print()
    
    # –ß–∏—Ç–∞–µ–º –ø—Ä–æ–º–ø—Ç-—Ñ–∞–π–ª
    adizes_file = Path("data/prompts/adizes_system_res.txt")
    if adizes_file.exists():
        with open(adizes_file, 'r', encoding='utf-8') as f:
            adizes_content = f.read()
        
        print("üìã –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏ –ê–¥–∏–∑–µ—Å–∞")
        print(f"üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(adizes_content)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ò—â–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø–æ —Ä–æ–ª—è–º
        examples = []
        
        # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
        example_patterns = [
            r'–û–±—Ä–∞–∑–µ—Ü –±–ª–æ–∫–∞ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –ê–¥–∏–∑–µ—Å—É.*?(?=–û–±—Ä–∞–∑–µ—Ü –±–ª–æ–∫–∞|–ò–ù–°–¢–†–£–ö–¶–ò–Ø|$)',
        ]
        
        for pattern in example_patterns:
            matches = re.findall(pattern, adizes_content, re.DOTALL | re.IGNORECASE)
            examples.extend(matches)
        
        print(f"üìö –ù–∞–π–¥–µ–Ω–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏: {len(examples)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
        for i, example in enumerate(examples, 1):
            print(f"\nüî∏ –ü—Ä–∏–º–µ—Ä {i}:")
            print(f"   –î–ª–∏–Ω–∞: {len(example)} —Å–∏–º–≤–æ–ª–æ–≤")
            preview = example[:200].replace('\n', ' ')
            print(f"   –ü—Ä–µ–≤—å—é: {preview}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä–∫–¥–∞—É–Ω —ç–ª–µ–º–µ–Ω—Ç—ã
            markdown_elements = []
            if '**' in example:
                markdown_elements.append("–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç (**text**)")
            if '###' in example:
                markdown_elements.append("–ó–∞–≥–æ–ª–æ–≤–∫–∏ (### text)")
            if '---' in example:
                markdown_elements.append("–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ (---)")
            if '- ' in example:
                markdown_elements.append("–°–ø–∏—Å–∫–∏ (- item)")
            
            print(f"   –ú–∞—Ä–∫–¥–∞—É–Ω: {', '.join(markdown_elements) if markdown_elements else '–ù–µ—Ç'}")
    
    else:
        print("‚ùå –§–∞–π–ª —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        
    print("\n" + "=" * 60)

if __name__ == "__main__":
    test_real_ai_interpretation()