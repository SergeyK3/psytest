"""
–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è Google Drive –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å OAuth
"""

import os
import json
from pathlib import Path
from datetime import datetime
from typing import Optional, Tuple

def setup_oauth_google_drive():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç OAuth –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è Google Drive"""
    
    try:
        from google.auth.transport.requests import Request
        from google.oauth2.credentials import Credentials
        from google_auth_oauthlib.flow import InstalledAppFlow
        from googleapiclient.discovery import build
        from googleapiclient.http import MediaFileUpload
        
        SCOPES = ['https://www.googleapis.com/auth/drive.file']
        
        creds = None
        token_file = 'token.json'
        credentials_file = 'oauth_credentials.json'
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–∫–µ–Ω—ã
        if os.path.exists(token_file):
            creds = Credentials.from_authorized_user_file(token_file, SCOPES)
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤, –∑–∞–ø—É—Å–∫–∞–µ–º OAuth flow
        if not creds or not creds.valid:
            if creds and creds.expired and creds.refresh_token:
                creds.refresh(Request())
            else:
                if not os.path.exists(credentials_file):
                    print(f"‚ùå –§–∞–π–ª {credentials_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                    print("üìñ –°–æ–∑–¥–∞–π—Ç–µ OAuth credentials –≤ Google Cloud Console")
                    return None
                    
                flow = InstalledAppFlow.from_client_secrets_file(credentials_file, SCOPES)
                creds = flow.run_local_server(port=0)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            with open(token_file, 'w') as token:
                token.write(creds.to_json())
        
        service = build('drive', 'v3', credentials=creds)
        print("‚úÖ OAuth Google Drive API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return service
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OAuth: {e}")
        return None

def create_monthly_folder_structure(service, year: int, month: int, base_folder_id: str = None, base_folder_name: str = "PsychTest Reports") -> Optional[str]:
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫: –±–∞–∑–æ–≤–∞—è_–ø–∞–ø–∫–∞ / 2025 / 10-October
    
    Args:
        service: Google Drive API service
        year: –ì–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025)
        month: –ú–µ—Å—è—Ü (1-12)
        base_folder_id: ID –±–∞–∑–æ–≤–æ–π –ø–∞–ø–∫–∏ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–º–µ—Å—Ç–æ –ø–æ–∏—Å–∫–∞ –ø–æ –∏–º–µ–Ω–∏)
        base_folder_name: –ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –ø–∞–ø–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –µ—Å–ª–∏ base_folder_id –Ω–µ —É–∫–∞–∑–∞–Ω)
    
    Returns:
        folder_id –º–µ—Å—è—á–Ω–æ–π –ø–∞–ø–∫–∏ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    try:
        # –ù–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
        month_names = {
            1: "01-January", 2: "02-February", 3: "03-March", 4: "04-April",
            5: "05-May", 6: "06-June", 7: "07-July", 8: "08-August", 
            9: "09-September", 10: "10-October", 11: "11-November", 12: "12-December"
        }
        
        # 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é –ø–∞–ø–∫—É
        if base_folder_id:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π ID
            print(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–æ–≤–∞—è –ø–∞–ø–∫–∞ —Å ID: {base_folder_id}")
        else:
            # –ò—â–µ–º –ø–∞–ø–∫—É –ø–æ –∏–º–µ–Ω–∏ (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞)
            query = f"name='{base_folder_name}' and mimeType='application/vnd.google-apps.folder'"
            results = service.files().list(q=query, fields="files(id, name)").execute()
            folders = results.get('files', [])
            
            if not folders:
                print(f"‚ùå –ü–∞–ø–∫–∞ '{base_folder_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return None
            
            base_folder_id = folders[0]['id']
            print(f"üìÅ –ù–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞ {base_folder_name}: {base_folder_id}")
        
        # 2. –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –≥–æ–¥–∞ –≤ –±–∞–∑–æ–≤–æ–π –ø–∞–ø–∫–µ
        year_str = str(year)
        query = f"name='{year_str}' and mimeType='application/vnd.google-apps.folder' and '{base_folder_id}' in parents and trashed=false"
        results = service.files().list(q=query, fields="files(id, name)").execute()
        folders = results.get('files', [])
        
        print(f"üîç –ü–æ–∏—Å–∫ –ø–∞–ø–∫–∏ –≥–æ–¥–∞ '{year_str}' –≤ –±–∞–∑–æ–≤–æ–π –ø–∞–ø–∫–µ")
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ –ø–∞–ø–æ–∫ —Å –∏–º–µ–Ω–µ–º '{year_str}': {len(folders)}")
        
        if folders:
            year_folder_id = folders[0]['id']
            print(f"üìÅ ‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ø–∞–ø–∫–∞ –≥–æ–¥–∞: {year_str} (ID: {year_folder_id})")
        else:
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –≥–æ–¥–∞
            folder_metadata = {
                'name': year_str,
                'mimeType': 'application/vnd.google-apps.folder',
                'parents': [base_folder_id]
            }
            folder = service.files().create(body=folder_metadata).execute()
            year_folder_id = folder.get('id')
            print(f"üìÅ ‚ûï –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ø–∞–ø–∫–∞ –≥–æ–¥–∞: {year_str} (ID: {year_folder_id})")
        
        # 3. –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –º–µ—Å—è—Ü–∞ –≤–Ω—É—Ç—Ä–∏ –ø–∞–ø–∫–∏ –≥–æ–¥–∞
        month_folder_name = month_names[month]
        query = f"name='{month_folder_name}' and mimeType='application/vnd.google-apps.folder' and '{year_folder_id}' in parents and trashed=false"
        results = service.files().list(q=query, fields="files(id, name)").execute()
        folders = results.get('files', [])
        
        print(f"üîç –ü–æ–∏—Å–∫ –ø–∞–ø–∫–∏ –º–µ—Å—è—Ü–∞ '{month_folder_name}' –≤ –ø–∞–ø–∫–µ –≥–æ–¥–∞")
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ –ø–∞–ø–æ–∫ —Å –∏–º–µ–Ω–µ–º '{month_folder_name}': {len(folders)}")
        
        if folders:
            month_folder_id = folders[0]['id']
            print(f"üìÅ ‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ø–∞–ø–∫–∞ –º–µ—Å—è—Ü–∞: {month_folder_name} (ID: {month_folder_id})")
        else:
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –º–µ—Å—è—Ü–∞
            folder_metadata = {
                'name': month_folder_name,
                'mimeType': 'application/vnd.google-apps.folder',
                'parents': [year_folder_id]
            }
            folder = service.files().create(body=folder_metadata).execute()
            month_folder_id = folder.get('id')
            print(f"üìÅ ‚ûï –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ø–∞–ø–∫–∞ –º–µ—Å—è—Ü–∞: {month_folder_name} (ID: {month_folder_id})")
        
        return month_folder_id
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫: {e}")
        return None

def upload_to_google_drive_oauth(file_path: str, folder_name: str = "PsychTest Reports", folder_id: str = "1Z77eo09GmcLuhsDGlb17E86vfb2p3jEM", use_monthly_structure: bool = False) -> Optional[str]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –≤ Google Drive –∏—Å–ø–æ–ª—å–∑—É—è OAuth
    
    Args:
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        folder_name: –ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –ø–∞–ø–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –µ—Å–ª–∏ folder_id –Ω–µ —É–∫–∞–∑–∞–Ω)
        folder_id: –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π ID –±–∞–∑–æ–≤–æ–π –ø–∞–ø–∫–∏ Google Drive (–≤–Ω—É—Ç—Ä–∏ —Å–æ–∑–¥–∞–µ—Ç—Å—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥–æ–¥/–º–µ—Å—è—Ü)
        use_monthly_structure: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ –º–µ—Å—è—á–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ (–≥–æ–¥/–º–µ—Å—è—Ü)
    """
    
    service = setup_oauth_google_drive()
    if not service:
        return None
    
    try:
        from googleapiclient.http import MediaFileUpload
        from googleapiclient.errors import HttpError
        import datetime
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π ID –ø–∞–ø–∫–∏ –∏ –Ω—É–∂–Ω–∞ –º–µ—Å—è—á–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
        if folder_id and use_monthly_structure:
            # –°–æ–∑–¥–∞–µ–º –º–µ—Å—è—á–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤–Ω—É—Ç—Ä–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏
            now = datetime.datetime.now()
            monthly_folder_id = create_monthly_folder_structure(service, now.year, now.month, folder_id, folder_name)
            if monthly_folder_id:
                folder_id = monthly_folder_id
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–µ—Å—è—á–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –ø–∞–ø–∫—É")
                print(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–æ–≤–∞—è –ø–∞–ø–∫–∞ —Å ID: {folder_id}")
        elif folder_id:
            print(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–∫–∞–∑–∞–Ω–Ω–∞—è –ø–∞–ø–∫–∞ —Å ID: {folder_id}")
        elif use_monthly_structure:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Å—è—á–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
            now = datetime.datetime.now()
            folder_id = create_monthly_folder_structure(service, now.year, now.month, folder_id, folder_name)
            if not folder_id:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–µ—Å—è—á–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫")
                return None
        else:
            # –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –ø–æ –∏–º–µ–Ω–∏ (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞)
            query = f"name='{folder_name}' and mimeType='application/vnd.google-apps.folder'"
            results = service.files().list(q=query, fields="files(id, name)").execute()
            folders = results.get('files', [])
            
            if folders:
                folder_id = folders[0]['id']
                print(f"üìÅ –ù–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞: {folder_name}")
            else:
                # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É
                folder_metadata = {
                    'name': folder_name,
                    'mimeType': 'application/vnd.google-apps.folder'
                }
                folder = service.files().create(body=folder_metadata).execute()
                folder_id = folder.get('id')
                print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {folder_name}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        file_name = os.path.basename(file_path)
        file_metadata = {
            'name': file_name,
            'parents': [folder_id]
        }
        
        media = MediaFileUpload(file_path, mimetype='application/pdf')
        file = service.files().create(
            body=file_metadata,
            media_body=media,
            fields='id,webViewLink'
        ).execute()
        
        file_id = file.get('id')
        web_link = file.get('webViewLink')
        
        print(f"üì§ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {file_name}")
        print(f"üîó –°—Å—ã–ª–∫–∞: {web_link}")
        
        return web_link
        
    except HttpError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        return None
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        return None

if __name__ == "__main__":
    # –¢–µ—Å—Ç OAuth –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OAuth –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    test_file = "test_oauth.txt"
    with open(test_file, 'w', encoding='utf-8') as f:
        f.write("–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è OAuth Google Drive –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Google Drive
    link = upload_to_google_drive_oauth(test_file)
    
    if link:
        print(f"üéâ –£—Å–ø–µ—Ö! –§–∞–π–ª –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Å—Å—ã–ª–∫–µ: {link}")
        os.remove(test_file)  # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")